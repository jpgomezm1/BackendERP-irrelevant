Directory structure:
└── jpgomezm1-control-fresco/
    ├── README.md
    ├── components.json
    ├── eslint.config.js
    ├── index.html
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.ts
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vite.config.ts
    ├── public/
    │   └── robots.txt
    └── src/
        ├── App.css
        ├── App.tsx
        ├── index.css
        ├── main.tsx
        ├── vite-env.d.ts
        ├── components/
        │   ├── cash-flow/
        │   │   ├── analysis-charts.tsx
        │   │   └── financial-metrics.tsx
        │   ├── clients/
        │   │   ├── add-client-dialog.tsx
        │   │   ├── add-document-dialog.tsx
        │   │   ├── add-payment-dialog.tsx
        │   │   ├── add-project-dialog.tsx
        │   │   ├── client-details.tsx
        │   │   ├── client-projects.tsx
        │   │   ├── clients-list.tsx
        │   │   ├── documents-list.tsx
        │   │   ├── edit-client-dialog.tsx
        │   │   ├── edit-project-dialog.tsx
        │   │   ├── financial-overview.tsx
        │   │   ├── project-details.tsx
        │   │   ├── project-payments.tsx
        │   │   └── projects-list.tsx
        │   ├── expenses/
        │   │   └── accrued-expenses.tsx
        │   ├── financial/
        │   │   ├── client-analytics.tsx
        │   │   ├── financial-dashboard.tsx
        │   │   └── financial-projections.tsx
        │   ├── income/
        │   │   ├── add-income-dialog.tsx
        │   │   ├── income-analysis.tsx
        │   │   ├── income-data.ts
        │   │   ├── income-list.tsx
        │   │   └── income-tabs.tsx
        │   ├── layout/
        │   │   ├── AppLayout.tsx
        │   │   └── Sidebar.tsx
        │   └── ui/
        │       ├── accordion.tsx
        │       ├── alert-dialog.tsx
        │       ├── alert.tsx
        │       ├── aspect-ratio.tsx
        │       ├── avatar.tsx
        │       ├── badge.tsx
        │       ├── breadcrumb.tsx
        │       ├── button.tsx
        │       ├── calendar.tsx
        │       ├── card.tsx
        │       ├── carousel.tsx
        │       ├── chart.tsx
        │       ├── checkbox.tsx
        │       ├── collapsible.tsx
        │       ├── command.tsx
        │       ├── context-menu.tsx
        │       ├── currency-input.tsx
        │       ├── data-table.tsx
        │       ├── date-range-picker.tsx
        │       ├── dialog.tsx
        │       ├── drawer.tsx
        │       ├── dropdown-menu.tsx
        │       ├── file-upload.tsx
        │       ├── form.tsx
        │       ├── hover-card.tsx
        │       ├── input-otp.tsx
        │       ├── input.tsx
        │       ├── label.tsx
        │       ├── menubar.tsx
        │       ├── navigation-menu.tsx
        │       ├── page-header.tsx
        │       ├── pagination.tsx
        │       ├── popover.tsx
        │       ├── progress.tsx
        │       ├── radio-group.tsx
        │       ├── resizable.tsx
        │       ├── scroll-area.tsx
        │       ├── select.tsx
        │       ├── separator.tsx
        │       ├── sheet.tsx
        │       ├── sidebar.tsx
        │       ├── skeleton.tsx
        │       ├── slider.tsx
        │       ├── sonner.tsx
        │       ├── stats-card.tsx
        │       ├── switch.tsx
        │       ├── table.tsx
        │       ├── tabs.tsx
        │       ├── textarea.tsx
        │       ├── toast.tsx
        │       ├── toaster.tsx
        │       ├── toggle-group.tsx
        │       ├── toggle.tsx
        │       ├── tooltip.tsx
        │       └── use-toast.ts
        ├── hooks/
        │   ├── use-clients-data.tsx
        │   ├── use-mobile.tsx
        │   ├── use-payments-data.tsx
        │   ├── use-projects-data.tsx
        │   └── use-toast.ts
        ├── lib/
        │   └── utils.ts
        ├── pages/
        │   ├── CashFlowPage.tsx
        │   ├── ClientsPage.tsx
        │   ├── Dashboard.tsx
        │   ├── ExpensesPage.tsx
        │   ├── IncomePage.tsx
        │   ├── Index.tsx
        │   ├── NotFound.tsx
        │   └── ReportsPage.tsx
        └── types/
            └── clients.ts

================================================
FILE: README.md
================================================
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/b62abeda-18f5-4ee8-b0f3-c1b4f6ca1fe7

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/b62abeda-18f5-4ee8-b0f3-c1b4f6ca1fe7) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with .

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/b62abeda-18f5-4ee8-b0f3-c1b4f6ca1fe7) and click on Share -> Publish.

## I want to use a custom domain - is that possible?

We don't support custom domains (yet). If you want to deploy your project under your own domain then we recommend using Netlify. Visit our docs for more details: [Custom domains](https://docs.lovable.dev/tips-tricks/custom-domain/)



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}


================================================
FILE: eslint.config.js
================================================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);



================================================
FILE: index.html
================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>control-fresco</title>
    <meta name="description" content="Lovable Generated Project" />
    <meta name="author" content="Lovable" />

    <meta property="og:title" content="Lovable Generated Project" />
    <meta property="og:description" content="Lovable Generated Project" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@lovable_dev" />
    <meta name="twitter:image" content="https://lovable.dev/opengraph-image-p98pqg.png" />
  </head>

  <body>
    <div id="root"></div>
    <!-- IMPORTANT: DO NOT REMOVE THIS SCRIPT TAG OR THIS VERY COMMENT! -->
    <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
FILE: package.json
================================================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@tanstack/react-query": "^5.56.2",
    "@tanstack/react-table": "^8.21.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.3.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}



================================================
FILE: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
FILE: tailwind.config.ts
================================================

import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				},
				// Irrelevant brand colors
                irrelevant: {
                    50: '#f0f4ff',
                    100: '#e0e9ff',
                    200: '#c7d7fe',
                    300: '#a5bcfd',
                    400: '#8098fb',
                    500: '#6373f5',
                    600: '#4b4ce6',
                    700: '#3e3ecf',
                    800: '#3335a8',
                    900: '#2e3284',
                    950: '#1c1d50',
                }
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: { height: '0' },
					to: { height: 'var(--radix-accordion-content-height)' }
				},
				'accordion-up': {
					from: { height: 'var(--radix-accordion-content-height)' },
					to: { height: '0' }
				},
				'fade-in': {
					from: { opacity: '0' },
					to: { opacity: '1' }
				},
				'fade-out': {
					from: { opacity: '1' },
					to: { opacity: '0' }
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out',
				'fade-in': 'fade-in 0.3s ease-out',
				'fade-out': 'fade-out 0.3s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;



================================================
FILE: tsconfig.app.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}



================================================
FILE: tsconfig.json
================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}



================================================
FILE: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}



================================================
FILE: vite.config.ts
================================================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
    mode === 'development' &&
    componentTagger(),
  ].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));



================================================
FILE: public/robots.txt
================================================
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /



================================================
FILE: src/App.css
================================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



================================================
FILE: src/App.tsx
================================================

import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AppLayout } from "./components/layout/AppLayout";
import Dashboard from "./pages/Dashboard";
import ExpensesPage from "./pages/ExpensesPage";
import IncomePage from "./pages/IncomePage";
import ClientsPage from "./pages/ClientsPage";
import CashFlowPage from "./pages/CashFlowPage";
import ReportsPage from "./pages/ReportsPage";
import NotFound from "./pages/NotFound";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<AppLayout />}>
            <Route index element={<Dashboard />} />
            <Route path="gastos" element={<ExpensesPage />} />
            <Route path="ingresos" element={<IncomePage />} />
            <Route path="clientes" element={<ClientsPage />} />
            <Route path="caja" element={<CashFlowPage />} />
            <Route path="reportes" element={<ReportsPage />} />
          </Route>
          <Route path="*" element={<NotFound />} />
        </Routes>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;



================================================
FILE: src/index.css
================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 230 85% 60%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --sidebar-background: 222 47% 11%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 230 85% 60%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 217 33% 17.5%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217 33% 17.5%;
    --sidebar-ring: 224 76% 48%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    
    --sidebar-background: 222 47% 11%;
    --sidebar-foreground: 210 40% 98%;
    --sidebar-primary: 230 85% 60%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 217 33% 17.5%;
    --sidebar-accent-foreground: 210 40% 98%;
    --sidebar-border: 217 33% 17.5%;
    --sidebar-ring: 224 76% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
  
  /* Currency input styling */
  input.currency::-webkit-outer-spin-button,
  input.currency::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  input.currency {
    -moz-appearance: textfield;
  }
  
  .form-required:after {
    content: "*";
    color: hsl(var(--destructive));
    margin-left: 0.2rem;
  }
  
  /* Custom file upload styling */
  .file-upload-area {
    @apply border-2 border-dashed rounded-md p-6 transition-colors duration-200 ease-in-out;
  }
  
  .file-upload-area.dragging {
    @apply border-primary bg-primary/5;
  }
}



================================================
FILE: src/main.tsx
================================================
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'

createRoot(document.getElementById("root")!).render(<App />);



================================================
FILE: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
FILE: src/components/cash-flow/analysis-charts.tsx
================================================

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { formatCurrency } from "@/lib/utils";
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from "recharts";

interface AnalysisChartsProps {
  monthlyData: {
    name: string;
    ingresos: number;
    gastos: number;
    balance: number;
  }[];
  categoryExpenses: {
    name: string;
    value: number;
  }[];
  clientIncome: {
    name: string;
    value: number;
  }[];
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];

export function AnalysisCharts({ monthlyData, categoryExpenses, clientIncome }: AnalysisChartsProps) {
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Evolución Financiera</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={monthlyData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                <Tooltip formatter={(value) => [formatCurrency(Number(value)), ""]} />
                <Legend />
                <Line
                  type="monotone"
                  dataKey="ingresos"
                  name="Ingresos"
                  stroke="#4ade80"
                  strokeWidth={2}
                />
                <Line
                  type="monotone"
                  dataKey="gastos"
                  name="Gastos"
                  stroke="#f87171"
                  strokeWidth={2}
                />
                <Line
                  type="monotone"
                  dataKey="balance"
                  name="Balance"
                  stroke="#4b4ce6"
                  strokeWidth={2}
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      <div className="grid md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Gastos por Categoría</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={categoryExpenses}
                    cx="50%"
                    cy="50%"
                    innerRadius={60}
                    outerRadius={80}
                    fill="#8884d8"
                    paddingAngle={5}
                    dataKey="value"
                    label={({name, percent}) => `${name} (${(percent * 100).toFixed(0)}%)`}
                  >
                    {categoryExpenses.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                    ))}
                  </Pie>
                  <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Ingresos por Cliente</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={clientIncome} layout="vertical">
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis type="number" tickFormatter={(value) => `$${value / 1000000}M`} />
                  <YAxis type="category" dataKey="name" width={100} />
                  <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                  <Bar dataKey="value" fill="#4ade80" radius={[0, 4, 4, 0]} />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}



================================================
FILE: src/components/cash-flow/financial-metrics.tsx
================================================

import { StatsCard } from "@/components/ui/stats-card";
import { formatCurrency } from "@/lib/utils";
import { ArrowDown, ArrowUp, CalendarDays, Clock, Wallet, TrendingUp, TrendingDown } from "lucide-react";

interface FinancialMetricsProps {
  totalIncome: number;
  totalExpenses: number;
  currentBalance: number;
  averageMonthlyIncome: number;
  averageMonthlyExpenses: number;
  runway: number;
  breakEvenDate: Date;
}

export function FinancialMetrics({
  totalIncome,
  totalExpenses,
  currentBalance,
  averageMonthlyIncome,
  averageMonthlyExpenses,
  runway,
  breakEvenDate,
}: FinancialMetricsProps) {
  const runwayStatus = runway < 3 ? "danger" : runway < 6 ? "warning" : "success";
  const runwayColors = {
    danger: "bg-red-50",
    warning: "bg-amber-50",
    success: "bg-green-50",
  };

  return (
    <div className="grid gap-4 md:grid-cols-4">
      <StatsCard
        title="Ingresos Totales"
        value={formatCurrency(totalIncome)}
        icon={<ArrowDown className="h-4 w-4 text-green-500" />}
        className="bg-green-50"
      />
      <StatsCard
        title="Gastos Totales"
        value={formatCurrency(totalExpenses)}
        icon={<ArrowUp className="h-4 w-4 text-red-500" />}
        className="bg-red-50"
      />
      <StatsCard
        title="Saldo Actual"
        value={formatCurrency(currentBalance)}
        icon={<Wallet className="h-4 w-4" />}
        className={currentBalance >= 0 ? "bg-blue-50" : "bg-amber-50"}
      />
      <StatsCard
        title="Runway Estimado"
        value={`${runway.toFixed(1)} meses`}
        icon={<Clock className="h-4 w-4" />}
        description={`Quiebre estimado: ${breakEvenDate.toLocaleDateString()}`}
        className={runwayColors[runwayStatus]}
      />
      <StatsCard
        title="Ingreso Mensual Promedio"
        value={formatCurrency(averageMonthlyIncome)}
        icon={<TrendingUp className="h-4 w-4 text-green-500" />}
        description="Últimos 6 meses"
        className="bg-green-50"
      />
      <StatsCard
        title="Gasto Mensual Promedio"
        value={formatCurrency(averageMonthlyExpenses)}
        icon={<TrendingDown className="h-4 w-4 text-red-500" />}
        description="Últimos 6 meses"
        className="bg-red-50"
      />
    </div>
  );
}



================================================
FILE: src/components/clients/add-client-dialog.tsx
================================================

import React from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from "@/lib/utils";
import { ClientStatus } from "@/types/clients";

const clientFormSchema = z.object({
  name: z.string().min(3, { message: "El nombre debe tener al menos 3 caracteres" }),
  contactName: z.string().optional(),
  email: z.string().email({ message: "Email inválido" }),
  phone: z.string().min(6, { message: "Número de teléfono inválido" }),
  address: z.string().optional(),
  taxId: z.string().optional(),
  status: z.enum(["Activo", "Pausado", "Terminado"]),
  startDate: z.date(),
  notes: z.string().optional(),
});

type ClientFormValues = z.infer<typeof clientFormSchema>;

interface AddClientDialogProps {
  children: React.ReactNode;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onClientAdded?: () => void;
}

export function AddClientDialog({
  children,
  open,
  onOpenChange,
  onClientAdded
}: AddClientDialogProps) {
  const form = useForm<ClientFormValues>({
    resolver: zodResolver(clientFormSchema),
    defaultValues: {
      name: "",
      email: "",
      phone: "",
      status: "Activo",
      startDate: new Date(),
    },
  });

  function onSubmit(data: ClientFormValues) {
    console.log("Añadiendo cliente:", data);
    // Aquí iría la lógica para agregar el cliente
    
    if (onClientAdded) {
      onClientAdded();
    }
    
    form.reset();
    onOpenChange(false);
  }
  
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Registrar Nuevo Cliente</DialogTitle>
          <DialogDescription>
            Ingresa la información del cliente
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nombre del Cliente</FormLabel>
                    <FormControl>
                      <Input placeholder="Empresa S.A.S." {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="contactName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nombre del Contacto</FormLabel>
                    <FormControl>
                      <Input placeholder="Nombre y Apellido" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input placeholder="correo@empresa.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Teléfono</FormLabel>
                    <FormControl>
                      <Input placeholder="+57 300 123 4567" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="taxId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>NIT / ID Tributario</FormLabel>
                    <FormControl>
                      <Input placeholder="900.123.456-7" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Estado</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccionar estado" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Activo">Activo</SelectItem>
                        <SelectItem value="Pausado">Pausado</SelectItem>
                        <SelectItem value="Terminado">Terminado</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="address"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Dirección</FormLabel>
                  <FormControl>
                    <Input placeholder="Calle 123 # 45-67, Ciudad" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="startDate"
              render={({ field }) => (
                <FormItem className="flex flex-col">
                  <FormLabel>Fecha de Inicio</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant="outline"
                          className={cn(
                            "w-full pl-3 text-left font-normal",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          {field.value ? (
                            format(field.value, "PPP", { locale: es })
                          ) : (
                            <span>Seleccionar fecha</span>
                          )}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        initialFocus
                        className={cn("p-3 pointer-events-auto")}
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Notas</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Notas adicionales sobre el cliente"
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => onOpenChange(false)}
              >
                Cancelar
              </Button>
              <Button type="submit">Guardar</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: src/components/clients/add-document-dialog.tsx
================================================

import React from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { DocumentType } from "@/types/clients";
import { FileUpload } from "@/components/ui/file-upload";
import { useToast } from "@/components/ui/use-toast";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const documentFormSchema = z.object({
  name: z.string().min(1, { message: "El nombre del documento es requerido" }),
  type: z.enum([
    "RUT", 
    "Cámara de Comercio", 
    "NDA", 
    "Contrato", 
    "Factura", 
    "Otro"
  ]),
  file: z.any().refine((file) => file?.size, {
    message: "El archivo es requerido",
  }),
});

type DocumentFormValues = z.infer<typeof documentFormSchema>;

interface AddDocumentDialogProps {
  children: React.ReactNode;
  clientId?: number;
  projectId?: number;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function AddDocumentDialog({
  children,
  clientId,
  projectId,
  open,
  onOpenChange,
}: AddDocumentDialogProps) {
  const { toast } = useToast();
  
  const form = useForm<DocumentFormValues>({
    resolver: zodResolver(documentFormSchema),
    defaultValues: {
      name: "",
      type: "Otro",
    },
  });

  function onSubmit(data: DocumentFormValues) {
    console.log("Añadiendo documento:", data);
    // Aquí iría la lógica para subir y asociar el documento
    
    toast({
      title: "Documento subido",
      description: "El documento ha sido subido correctamente.",
    });
    
    form.reset();
    onOpenChange(false);
  }

  const documentTypes: DocumentType[] = [
    "RUT", 
    "Cámara de Comercio", 
    "NDA", 
    "Contrato", 
    "Factura", 
    "Otro"
  ];

  const entityType = clientId ? "cliente" : "proyecto";
  
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Añadir Documento</DialogTitle>
          <DialogDescription>
            Sube un nuevo documento para el {entityType}
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Nombre del Documento</FormLabel>
                  <FormControl>
                    <Input placeholder="Ej. Contrato de Servicios 2023" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Tipo de Documento</FormLabel>
                  <Select 
                    onValueChange={field.onChange} 
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Seleccionar tipo" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {documentTypes.map((type) => (
                        <SelectItem key={type} value={type}>
                          {type}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="file"
              render={({ field: { onChange, value, ...rest } }) => (
                <FormItem>
                  <FormLabel>Archivo</FormLabel>
                  <FormControl>
                    <FileUpload
                      onFileSelect={(file) => onChange(file)}
                      acceptedFileTypes=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png"
                      {...rest}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => onOpenChange(false)}
              >
                Cancelar
              </Button>
              <Button type="submit">Subir Documento</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: src/components/clients/add-payment-dialog.tsx
================================================

import React from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { CurrencyInput } from "@/components/ui/currency-input";
import { cn } from "@/lib/utils";
import { useToast } from "@/components/ui/use-toast";
import { Currency } from "@/lib/utils";
import { PaymentStatus } from "@/types/clients";

const paymentFormSchema = z.object({
  amount: z.number().min(1, { message: "El monto debe ser mayor a 0" }),
  currency: z.enum(["COP", "USD"]),
  date: z.date(),
  status: z.enum(["Pagado", "Pendiente"]),
  paidDate: z.date().optional().nullable(),
  type: z.enum(["Implementación", "Recurrente"]),
  installmentNumber: z.number().optional().nullable(),
  invoiceNumber: z.string().optional(),
  notes: z.string().optional(),
});

type PaymentFormValues = z.infer<typeof paymentFormSchema>;

interface AddPaymentDialogProps {
  children: React.ReactNode;
  projectId: number;
  clientId: number;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onPaymentAdded?: () => void;
}

export function AddPaymentDialog({
  children,
  projectId,
  clientId,
  open,
  onOpenChange,
  onPaymentAdded,
}: AddPaymentDialogProps) {
  const { toast } = useToast();
  
  const form = useForm<PaymentFormValues>({
    resolver: zodResolver(paymentFormSchema),
    defaultValues: {
      amount: 0,
      currency: "COP",
      date: new Date(),
      status: "Pendiente",
      paidDate: null,
      type: "Implementación",
      installmentNumber: null,
      invoiceNumber: "",
      notes: "",
    },
  });

  // Observar el estado de pago para mostrar/ocultar campos
  const watchStatus = form.watch("status");
  const watchType = form.watch("type");
  
  function onSubmit(data: PaymentFormValues) {
    console.log("Registrando pago:", data);
    // Aquí iría la lógica para añadir el pago
    
    toast({
      title: "Pago registrado",
      description: "El pago ha sido registrado correctamente.",
    });
    
    if (onPaymentAdded) {
      onPaymentAdded();
    }
    
    form.reset();
    onOpenChange(false);
  }
  
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Registrar Pago</DialogTitle>
          <DialogDescription>
            Añade un nuevo pago al proyecto
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="amount"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Monto</FormLabel>
                    <FormControl>
                      <CurrencyInput
                        onValueChange={field.onChange}
                        value={field.value}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="currency"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Moneda</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccionar moneda" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="COP">COP</SelectItem>
                        <SelectItem value="USD">USD</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="date"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel className="form-required">Fecha Programada</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP", { locale: es })
                            ) : (
                              <span>Seleccionar fecha</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                          className={cn("p-3 pointer-events-auto")}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Estado</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccionar estado" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Pendiente">Pendiente</SelectItem>
                        <SelectItem value="Pagado">Pagado</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            {watchStatus === "Pagado" && (
              <FormField
                control={form.control}
                name="paidDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel className="form-required">Fecha de Pago</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP", { locale: es })
                            ) : (
                              <span>Seleccionar fecha</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value || undefined}
                          onSelect={field.onChange}
                          initialFocus
                          className={cn("p-3 pointer-events-auto")}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />
            )}
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Tipo</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccionar tipo" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Implementación">Implementación</SelectItem>
                        <SelectItem value="Recurrente">Recurrente</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {watchType === "Implementación" && (
                <FormField
                  control={form.control}
                  name="installmentNumber"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Número de Cuota</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="1" 
                          {...field} 
                          value={field.value || ""}
                          onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : null)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}
            </div>
            
            {watchStatus === "Pagado" && (
              <FormField
                control={form.control}
                name="invoiceNumber"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Número de Factura</FormLabel>
                    <FormControl>
                      <Input placeholder="Ej. FV-2023-001" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            )}
            
            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Notas</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Notas adicionales sobre el pago"
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => onOpenChange(false)}
              >
                Cancelar
              </Button>
              <Button type="submit">Guardar</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: src/components/clients/add-project-dialog.tsx
================================================

import React, { useState } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { CurrencyInput } from "@/components/ui/currency-input";
import { cn } from "@/lib/utils";
import { Currency } from "@/lib/utils";
import { ProjectStatus, PaymentFrequency, PlanType } from "@/types/clients";
import { useClientsData } from "@/hooks/use-clients-data";

const projectFormSchema = z.object({
  clientId: z.number({
    required_error: "Debes seleccionar un cliente",
  }),
  name: z.string().min(3, { message: "El nombre debe tener al menos 3 caracteres" }),
  description: z.string().min(10, { message: "La descripción debe tener al menos 10 caracteres" }),
  status: z.enum(["Activo", "Pausado", "Finalizado", "Cancelado"]),
  startDate: z.date(),
  endDate: z.date().optional().nullable(),
  notes: z.string().optional(),
  planType: z.enum(["Fee único", "Fee por cuotas", "Suscripción periódica", "Mixto"]),
  // Campos para Fee único o por cuotas
  implementationFeeTotal: z.number().optional(),
  implementationFeeCurrency: z.enum(["COP", "USD"]).optional(),
  implementationFeeInstallments: z.number().optional(),
  // Campos para suscripción periódica
  recurringFeeAmount: z.number().optional(),
  recurringFeeCurrency: z.enum(["COP", "USD"]).optional(),
  recurringFeeFrequency: z.enum([
    "Semanal",
    "Quincenal",
    "Mensual",
    "Bimensual",
    "Trimestral",
    "Semestral",
    "Anual",
    "Personalizada",
  ]).optional(),
  recurringFeeDayOfCharge: z.number().optional(),
  recurringFeeGracePeriods: z.number().optional(),
  recurringFeeDiscountPeriods: z.number().optional(),
  recurringFeeDiscountPercentage: z.number().optional(),
});

type ProjectFormValues = z.infer<typeof projectFormSchema>;

interface AddProjectDialogProps {
  children: React.ReactNode;
  defaultClientId?: number;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onProjectAdded?: () => void;
}

export function AddProjectDialog({
  children,
  defaultClientId,
  open,
  onOpenChange,
  onProjectAdded,
}: AddProjectDialogProps) {
  const { clients } = useClientsData();
  
  const form = useForm<ProjectFormValues>({
    resolver: zodResolver(projectFormSchema),
    defaultValues: {
      clientId: defaultClientId || 0,
      name: "",
      description: "",
      status: "Activo",
      startDate: new Date(),
      endDate: null,
      planType: "Fee único",
      implementationFeeTotal: 0,
      implementationFeeCurrency: "COP",
      implementationFeeInstallments: 1,
      recurringFeeAmount: 0,
      recurringFeeCurrency: "COP",
      recurringFeeFrequency: "Mensual",
      recurringFeeDayOfCharge: 1,
      recurringFeeGracePeriods: 0,
      recurringFeeDiscountPeriods: 0,
      recurringFeeDiscountPercentage: 0,
    },
  });

  // Observar el tipo de plan para mostrar los campos correspondientes
  const watchPlanType = form.watch("planType");
  const showImplementationFee = ["Fee único", "Fee por cuotas", "Mixto"].includes(watchPlanType);
  const showRecurringFee = ["Suscripción periódica", "Mixto"].includes(watchPlanType);

  function onSubmit(data: ProjectFormValues) {
    console.log("Añadiendo proyecto:", data);
    // Aquí iría la lógica para agregar el proyecto
    
    if (onProjectAdded) {
      onProjectAdded();
    }
    
    form.reset();
    onOpenChange(false);
  }
  
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Registrar Nuevo Proyecto</DialogTitle>
          <DialogDescription>
            Ingresa la información del proyecto y su plan de pagos
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="clientId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="form-required">Cliente</FormLabel>
                  <Select 
                    onValueChange={(value) => field.onChange(parseInt(value))} 
                    defaultValue={field.value ? field.value.toString() : undefined}
                    disabled={!!defaultClientId}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Seleccionar cliente" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {clients.map((client) => (
                        <SelectItem key={client.id} value={client.id.toString()}>
                          {client.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Nombre del Proyecto</FormLabel>
                    <FormControl>
                      <Input placeholder="Ej. Rediseño Sitio Web" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Estado</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccionar estado" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Activo">Activo</SelectItem>
                        <SelectItem value="Pausado">Pausado</SelectItem>
                        <SelectItem value="Finalizado">Finalizado</SelectItem>
                        <SelectItem value="Cancelado">Cancelado</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="form-required">Descripción</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Describe los detalles del proyecto"
                      className="resize-none"
                      rows={3}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="startDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel className="form-required">Fecha de Inicio</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP", { locale: es })
                            ) : (
                              <span>Seleccionar fecha</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                          className={cn("p-3 pointer-events-auto")}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="endDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Fecha de Finalización (opcional)</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP", { locale: es })
                            ) : (
                              <span>Seleccionar fecha</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value || undefined}
                          onSelect={field.onChange}
                          initialFocus
                          disabled={(date) => date < form.watch("startDate")}
                          className={cn("p-3 pointer-events-auto")}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Plan de Pagos */}
            <div className="space-y-4 pt-2 border-t">
              <h3 className="text-lg font-medium">Plan de Pagos</h3>
              
              <FormField
                control={form.control}
                name="planType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Tipo de Plan</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccionar tipo de plan" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Fee único">Fee único</SelectItem>
                        <SelectItem value="Fee por cuotas">Fee por cuotas</SelectItem>
                        <SelectItem value="Suscripción periódica">Suscripción periódica</SelectItem>
                        <SelectItem value="Mixto">Mixto (implementación + recurrente)</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {/* Fee de Implementación */}
              {showImplementationFee && (
                <div className="space-y-4 border-l-2 border-primary/20 pl-4">
                  <h4 className="font-medium">Fee de Implementación</h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="implementationFeeTotal"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="form-required">Valor Total</FormLabel>
                          <FormControl>
                            <CurrencyInput
                              onValueChange={field.onChange}
                              value={field.value || 0}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="implementationFeeCurrency"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="form-required">Moneda</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Seleccionar moneda" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="COP">COP</SelectItem>
                              <SelectItem value="USD">USD</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <FormField
                    control={form.control}
                    name="implementationFeeInstallments"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="form-required">Número de Cuotas</FormLabel>
                        <Select 
                          onValueChange={(value) => field.onChange(parseInt(value))} 
                          defaultValue={field.value?.toString()}
                        >
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Seleccionar cuotas" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="1">Pago único</SelectItem>
                            <SelectItem value="2">2 cuotas</SelectItem>
                            <SelectItem value="3">3 cuotas</SelectItem>
                            <SelectItem value="4">4 cuotas</SelectItem>
                            <SelectItem value="5">5 cuotas</SelectItem>
                            <SelectItem value="6">6 cuotas</SelectItem>
                            <SelectItem value="12">12 cuotas</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              )}
              
              {/* Fee Recurrente */}
              {showRecurringFee && (
                <div className="space-y-4 border-l-2 border-primary/20 pl-4">
                  <h4 className="font-medium">Fee Recurrente</h4>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="recurringFeeAmount"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="form-required">Valor</FormLabel>
                          <FormControl>
                            <CurrencyInput
                              onValueChange={field.onChange}
                              value={field.value || 0}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="recurringFeeCurrency"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="form-required">Moneda</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Seleccionar moneda" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="COP">COP</SelectItem>
                              <SelectItem value="USD">USD</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="recurringFeeFrequency"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="form-required">Frecuencia</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Seleccionar frecuencia" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="Semanal">Semanal</SelectItem>
                              <SelectItem value="Quincenal">Quincenal</SelectItem>
                              <SelectItem value="Mensual">Mensual</SelectItem>
                              <SelectItem value="Bimensual">Bimensual</SelectItem>
                              <SelectItem value="Trimestral">Trimestral</SelectItem>
                              <SelectItem value="Semestral">Semestral</SelectItem>
                              <SelectItem value="Anual">Anual</SelectItem>
                              <SelectItem value="Personalizada">Personalizada</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="recurringFeeDayOfCharge"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="form-required">Día de Cobro</FormLabel>
                          <FormControl>
                            <Input 
                              type="number" 
                              min="1" 
                              max="31" 
                              {...field} 
                              onChange={(e) => field.onChange(parseInt(e.target.value))}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="recurringFeeGracePeriods"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Periodos de Gracia</FormLabel>
                          <FormControl>
                            <Input 
                              type="number" 
                              min="0" 
                              {...field} 
                              onChange={(e) => field.onChange(parseInt(e.target.value))}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="recurringFeeDiscountPeriods"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Periodos con Descuento</FormLabel>
                          <FormControl>
                            <Input 
                              type="number" 
                              min="0" 
                              {...field} 
                              onChange={(e) => field.onChange(parseInt(e.target.value))}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  
                  <FormField
                    control={form.control}
                    name="recurringFeeDiscountPercentage"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Porcentaje de Descuento (%)</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            min="0" 
                            max="100" 
                            {...field} 
                            onChange={(e) => field.onChange(parseInt(e.target.value))}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              )}
            </div>

            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Notas</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Notas adicionales sobre el proyecto"
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => onOpenChange(false)}
              >
                Cancelar
              </Button>
              <Button type="submit">Guardar</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: src/components/clients/client-details.tsx
================================================

import React, { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  ArrowLeft, 
  FileText, 
  Plus, 
  CreditCard, 
  Edit,
  Trash2 
} from "lucide-react";
import { formatDate } from "@/lib/utils";
import { useClientsData } from "@/hooks/use-clients-data";
import { DocumentsList } from "./documents-list";
import { ClientProjects } from "./client-projects";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { AddDocumentDialog } from "./add-document-dialog";
import { EditClientDialog } from "./edit-client-dialog";

interface ClientDetailsProps {
  clientId: number;
  onBack: () => void;
  onViewFinancials: () => void;
}

export function ClientDetails({ 
  clientId, 
  onBack,
  onViewFinancials 
}: ClientDetailsProps) {
  const { getClientById } = useClientsData();
  const client = getClientById(clientId);
  const [documentDialogOpen, setDocumentDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);

  if (!client) {
    return (
      <Card>
        <CardContent className="pt-6">
          <p>Cliente no encontrado</p>
          <Button onClick={onBack} className="mt-4">Volver</Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button variant="ghost" onClick={onBack}>
          <ArrowLeft className="mr-2 h-4 w-4" />
          Volver a la lista
        </Button>
        <div className="flex gap-2">
          <EditClientDialog
            client={client}
            open={editDialogOpen}
            onOpenChange={setEditDialogOpen}
          >
            <Button variant="outline">
              <Edit className="mr-2 h-4 w-4" />
              Editar Cliente
            </Button>
          </EditClientDialog>
          <Button variant="default" onClick={onViewFinancials}>
            <CreditCard className="mr-2 h-4 w-4" />
            Ver Finanzas
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl">{client.name}</CardTitle>
              <CardDescription>
                Cliente desde {formatDate(client.startDate)}
              </CardDescription>
            </div>
            <Badge 
              variant={
                client.status === "Activo" ? "success" : 
                client.status === "Pausado" ? "warning" : "secondary"
              }
              className="text-sm"
            >
              {client.status}
            </Badge>
          </div>
        </CardHeader>
        
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-medium mb-2">Información de Contacto</h3>
              <div className="space-y-2 text-sm">
                {client.contactName && (
                  <p><span className="font-medium">Contacto:</span> {client.contactName}</p>
                )}
                <p><span className="font-medium">Email:</span> {client.email}</p>
                <p><span className="font-medium">Teléfono:</span> {client.phone}</p>
                {client.address && (
                  <p><span className="font-medium">Dirección:</span> {client.address}</p>
                )}
                {client.taxId && (
                  <p><span className="font-medium">NIT/ID Tributario:</span> {client.taxId}</p>
                )}
              </div>
            </div>
            
            {client.notes && (
              <div>
                <h3 className="font-medium mb-2">Notas</h3>
                <p className="text-sm">{client.notes}</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="projects">
        <TabsList>
          <TabsTrigger value="projects">Proyectos</TabsTrigger>
          <TabsTrigger value="documents">Documentos</TabsTrigger>
        </TabsList>

        <TabsContent value="projects" className="mt-4">
          <ClientProjects clientId={client.id} />
        </TabsContent>

        <TabsContent value="documents" className="mt-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-3">
              <div>
                <CardTitle>Documentos</CardTitle>
                <CardDescription>
                  Documentos administrativos del cliente
                </CardDescription>
              </div>
              <AddDocumentDialog 
                clientId={client.id}
                open={documentDialogOpen}
                onOpenChange={setDocumentDialogOpen}
              >
                <Button size="sm">
                  <Plus className="mr-2 h-4 w-4" />
                  Añadir Documento
                </Button>
              </AddDocumentDialog>
            </CardHeader>
            <CardContent>
              <DocumentsList 
                documents={client.documents} 
                entityType="client"
                entityId={client.id}
              />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}



================================================
FILE: src/components/clients/client-projects.tsx
================================================

import React, { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { useProjectsData } from "@/hooks/use-projects-data";
import { useClientsData } from "@/hooks/use-clients-data";
import { ProjectsList } from "./projects-list";
import { AddProjectDialog } from "./add-project-dialog";

interface ClientProjectsProps {
  clientId: number;
}

export function ClientProjects({ clientId }: ClientProjectsProps) {
  const { getClientById } = useClientsData();
  const client = getClientById(clientId);
  const [projectDialogOpen, setProjectDialogOpen] = useState(false);

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between pb-3">
        <div>
          <CardTitle>Proyectos del Cliente</CardTitle>
          <CardDescription>
            Proyectos asociados a {client?.name || "este cliente"}
          </CardDescription>
        </div>
        <AddProjectDialog 
          open={projectDialogOpen}
          onOpenChange={setProjectDialogOpen}
          defaultClientId={clientId}
        >
          <Button size="sm">
            <Plus className="mr-2 h-4 w-4" />
            Nuevo Proyecto
          </Button>
        </AddProjectDialog>
      </CardHeader>
      <CardContent>
        <ProjectsList 
          clientId={clientId}
          onProjectSelect={() => {}} // Aquí podrías manejar la navegación a detalles del proyecto
        />
      </CardContent>
    </Card>
  );
}



================================================
FILE: src/components/clients/clients-list.tsx
================================================

import React, { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { DataTable } from "@/components/ui/data-table";
import { Button } from "@/components/ui/button";
import { formatDate } from "@/lib/utils";
import { useClientsData } from "@/hooks/use-clients-data";
import { Badge } from "@/components/ui/badge";

interface ClientsListProps {
  onClientSelect: (clientId: number) => void;
}

export function ClientsList({ onClientSelect }: ClientsListProps) {
  const { clients } = useClientsData();
  
  const clientColumns = [
    {
      accessorKey: "name",
      header: "Nombre",
    },
    {
      accessorKey: "email",
      header: "Correo",
    },
    {
      accessorKey: "phone",
      header: "Teléfono",
    },
    {
      accessorKey: "startDate",
      header: "Fecha Inicio",
      cell: ({ row }) => formatDate(row.original.startDate),
    },
    {
      accessorKey: "status",
      header: "Estado",
      cell: ({ row }) => {
        const status = row.original.status;
        return (
          <Badge 
            variant={
              status === "Activo" ? "success" : 
              status === "Pausado" ? "warning" : "secondary"
            }
          >
            {status}
          </Badge>
        );
      },
    },
    {
      id: "actions",
      header: "Acciones",
      cell: ({ row }) => (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onClientSelect(row.original.id)}
        >
          Ver Detalles
        </Button>
      ),
    },
  ];

  return (
    <Card>
      <CardHeader>
        <CardTitle>Clientes</CardTitle>
        <CardDescription>
          Lista de todos los clientes registrados
        </CardDescription>
      </CardHeader>
      <CardContent>
        <DataTable
          columns={clientColumns}
          data={clients}
          searchColumn="name"
          searchPlaceholder="Buscar cliente..."
        />
      </CardContent>
    </Card>
  );
}



================================================
FILE: src/components/clients/documents-list.tsx
================================================

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { formatDate } from "@/lib/utils";
import { Document } from "@/types/clients";
import { FileText, Download, Trash2 } from "lucide-react";
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Badge } from "@/components/ui/badge";

interface DocumentsListProps {
  documents: Document[];
  entityType: "client" | "project";
  entityId: number;
}

export function DocumentsList({ 
  documents, 
  entityType,
  entityId 
}: DocumentsListProps) {
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [documentToDelete, setDocumentToDelete] = useState<Document | null>(null);

  const handleDelete = (document: Document) => {
    setDocumentToDelete(document);
    setDeleteDialogOpen(true);
  };

  const confirmDelete = () => {
    // Aquí iría la lógica para eliminar el documento
    console.log(`Eliminando documento ${documentToDelete?.id}`);
    setDeleteDialogOpen(false);
    setDocumentToDelete(null);
  };

  const getDocumentBadgeColor = (type: string) => {
    switch(type) {
      case "RUT": return "default";
      case "Cámara de Comercio": return "secondary";
      case "Contrato": return "warning";
      case "NDA": return "destructive";
      case "Factura": return "success";
      default: return "outline";
    }
  };

  if (documents.length === 0) {
    return (
      <div className="text-center py-6">
        <p className="text-muted-foreground">No hay documentos registrados</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {documents.map((doc) => (
        <div 
          key={doc.id} 
          className="flex items-center justify-between p-4 border rounded-lg bg-card"
        >
          <div className="flex items-center space-x-4">
            <div className="p-2 bg-muted rounded-md">
              <FileText className="h-5 w-5 text-primary" />
            </div>
            <div>
              <p className="font-medium">{doc.name}</p>
              <div className="flex items-center gap-2 mt-1">
                <Badge variant="outline" className={getDocumentBadgeColor(doc.type)}>
                  {doc.type}
                </Badge>
                <span className="text-xs text-muted-foreground">
                  Subido el {formatDate(doc.uploadDate)}
                </span>
              </div>
            </div>
          </div>
          <div className="flex space-x-2">
            <Button size="sm" variant="ghost" asChild>
              <a href={doc.url} target="_blank" rel="noopener noreferrer">
                <Download className="h-4 w-4 mr-1" />
                Descargar
              </a>
            </Button>
            <Button 
              size="sm" 
              variant="ghost" 
              onClick={() => handleDelete(doc)}
            >
              <Trash2 className="h-4 w-4 text-destructive" />
            </Button>
          </div>
        </div>
      ))}

      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>¿Estás seguro?</AlertDialogTitle>
            <AlertDialogDescription>
              Esta acción eliminará permanentemente el documento 
              "{documentToDelete?.name}".
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancelar</AlertDialogCancel>
            <AlertDialogAction onClick={confirmDelete}>
              Eliminar
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}



================================================
FILE: src/components/clients/edit-client-dialog.tsx
================================================

import React, { useEffect } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from "@/lib/utils";
import { Client, ClientStatus } from "@/types/clients";
import { useToast } from "@/components/ui/use-toast";

const clientFormSchema = z.object({
  name: z.string().min(3, { message: "El nombre debe tener al menos 3 caracteres" }),
  contactName: z.string().optional(),
  email: z.string().email({ message: "Email inválido" }),
  phone: z.string().min(6, { message: "Número de teléfono inválido" }),
  address: z.string().optional(),
  taxId: z.string().optional(),
  status: z.enum(["Activo", "Pausado", "Terminado"]),
  startDate: z.date(),
  notes: z.string().optional(),
});

type ClientFormValues = z.infer<typeof clientFormSchema>;

interface EditClientDialogProps {
  children: React.ReactNode;
  client: Client;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function EditClientDialog({
  children,
  client,
  open,
  onOpenChange,
}: EditClientDialogProps) {
  const { toast } = useToast();
  
  const form = useForm<ClientFormValues>({
    resolver: zodResolver(clientFormSchema),
    defaultValues: {
      name: client.name,
      contactName: client.contactName || "",
      email: client.email,
      phone: client.phone,
      address: client.address || "",
      taxId: client.taxId || "",
      status: client.status,
      startDate: client.startDate,
      notes: client.notes || "",
    },
  });

  // Actualizar el formulario cuando cambia el cliente
  useEffect(() => {
    if (open) {
      form.reset({
        name: client.name,
        contactName: client.contactName || "",
        email: client.email,
        phone: client.phone,
        address: client.address || "",
        taxId: client.taxId || "",
        status: client.status,
        startDate: client.startDate,
        notes: client.notes || "",
      });
    }
  }, [client, open, form]);

  function onSubmit(data: ClientFormValues) {
    console.log("Actualizando cliente:", data);
    // Aquí iría la lógica para actualizar el cliente
    
    toast({
      title: "Cliente actualizado",
      description: "Los datos del cliente han sido actualizados correctamente.",
    });
    
    onOpenChange(false);
  }
  
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Editar Cliente</DialogTitle>
          <DialogDescription>
            Modifica la información del cliente
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nombre del Cliente</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="contactName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nombre del Contacto</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Teléfono</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="taxId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>NIT / ID Tributario</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="status"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Estado</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      value={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Activo">Activo</SelectItem>
                        <SelectItem value="Pausado">Pausado</SelectItem>
                        <SelectItem value="Terminado">Terminado</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="address"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Dirección</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="startDate"
              render={({ field }) => (
                <FormItem className="flex flex-col">
                  <FormLabel>Fecha de Inicio</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant="outline"
                          className={cn(
                            "w-full pl-3 text-left font-normal",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          {field.value ? (
                            format(field.value, "PPP", { locale: es })
                          ) : (
                            <span>Seleccionar fecha</span>
                          )}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        initialFocus
                        className={cn("p-3 pointer-events-auto")}
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Notas</FormLabel>
                  <FormControl>
                    <Textarea
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => onOpenChange(false)}
              >
                Cancelar
              </Button>
              <Button type="submit">Guardar Cambios</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: src/components/clients/edit-project-dialog.tsx
================================================

import React, { useEffect } from "react";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { cn } from "@/lib/utils";
import { useToast } from "@/components/ui/use-toast";
import { Project } from "@/types/clients";

const projectFormSchema = z.object({
  name: z.string().min(3, { message: "El nombre debe tener al menos 3 caracteres" }),
  description: z.string().min(10, { message: "La descripción debe tener al menos 10 caracteres" }),
  status: z.enum(["Activo", "Pausado", "Finalizado", "Cancelado"]),
  startDate: z.date(),
  endDate: z.date().optional().nullable(),
  notes: z.string().optional(),
});

type ProjectFormValues = z.infer<typeof projectFormSchema>;

interface EditProjectDialogProps {
  children: React.ReactNode;
  project: Project;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function EditProjectDialog({
  children,
  project,
  open,
  onOpenChange,
}: EditProjectDialogProps) {
  const { toast } = useToast();
  
  const form = useForm<ProjectFormValues>({
    resolver: zodResolver(projectFormSchema),
    defaultValues: {
      name: project.name,
      description: project.description,
      status: project.status,
      startDate: project.startDate,
      endDate: project.endDate || null,
      notes: project.notes || "",
    },
  });

  // Actualizar el formulario cuando cambia el proyecto
  useEffect(() => {
    if (open) {
      form.reset({
        name: project.name,
        description: project.description,
        status: project.status,
        startDate: project.startDate,
        endDate: project.endDate || null,
        notes: project.notes || "",
      });
    }
  }, [project, open, form]);

  function onSubmit(data: ProjectFormValues) {
    console.log("Actualizando proyecto:", data);
    // Aquí iría la lógica para actualizar el proyecto
    
    toast({
      title: "Proyecto actualizado",
      description: "Los datos del proyecto han sido actualizados correctamente.",
    });
    
    onOpenChange(false);
  }
  
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Editar Proyecto</DialogTitle>
          <DialogDescription>
            Modifica la información del proyecto
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="form-required">Nombre del Proyecto</FormLabel>
                  <FormControl>
                    <Input {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="status"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="form-required">Estado</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="Activo">Activo</SelectItem>
                      <SelectItem value="Pausado">Pausado</SelectItem>
                      <SelectItem value="Finalizado">Finalizado</SelectItem>
                      <SelectItem value="Cancelado">Cancelado</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="form-required">Descripción</FormLabel>
                  <FormControl>
                    <Textarea
                      className="resize-none"
                      rows={3}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="startDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel className="form-required">Fecha de Inicio</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP", { locale: es })
                            ) : (
                              <span>Seleccionar fecha</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                          className={cn("p-3 pointer-events-auto")}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="endDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel>Fecha de Finalización (opcional)</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant="outline"
                            className={cn(
                              "w-full pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP", { locale: es })
                            ) : (
                              <span>Seleccionar fecha</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value || undefined}
                          onSelect={field.onChange}
                          initialFocus
                          disabled={(date) => date < form.watch("startDate")}
                          className={cn("p-3 pointer-events-auto")}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Notas</FormLabel>
                  <FormControl>
                    <Textarea
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => onOpenChange(false)}
              >
                Cancelar
              </Button>
              <Button type="submit">Guardar Cambios</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: src/components/clients/financial-overview.tsx
================================================

import React, { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { DataTable } from "@/components/ui/data-table";
import { Button } from "@/components/ui/button";
import { DatePickerWithRange } from "@/components/ui/date-range-picker";
import { DateRange } from "react-day-picker";
import { formatDate, formatCurrency } from "@/lib/utils";
import { usePaymentsData } from "@/hooks/use-payments-data";
import { useClientsData } from "@/hooks/use-clients-data";
import { useProjectsData } from "@/hooks/use-projects-data";
import { Badge } from "@/components/ui/badge";
import { FileText, Download } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface FinancialOverviewProps {
  clientId?: number | null;
  projectId?: number | null;
}

export function FinancialOverview({ 
  clientId, 
  projectId 
}: FinancialOverviewProps) {
  const { payments, getPaymentsByProjectId, getPaymentsByClientId } = usePaymentsData();
  const { getClientById } = useClientsData();
  const { getProjectById } = useProjectsData();
  
  const [dateRange, setDateRange] = useState<DateRange | undefined>({
    from: new Date(new Date().setDate(1)), // Primero del mes actual
    to: new Date(),
  });
  
  const [statusFilter, setStatusFilter] = useState<string>("todos");
  
  // Filtrar pagos según los parámetros
  let filteredPayments = payments;
  
  if (projectId) {
    filteredPayments = getPaymentsByProjectId(projectId);
  } else if (clientId) {
    filteredPayments = getPaymentsByClientId(clientId);
  }
  
  // Aplicar filtro de fechas
  if (dateRange?.from) {
    filteredPayments = filteredPayments.filter(
      payment => new Date(payment.date) >= dateRange.from!
    );
  }
  
  if (dateRange?.to) {
    filteredPayments = filteredPayments.filter(
      payment => new Date(payment.date) <= dateRange.to!
    );
  }
  
  // Aplicar filtro de estado
  if (statusFilter !== "todos") {
    filteredPayments = filteredPayments.filter(
      payment => payment.status === statusFilter
    );
  }
  
  // Calcular totales
  const totalPending = filteredPayments
    .filter(p => p.status === "Pendiente")
    .reduce((sum, p) => sum + p.amount, 0);
  
  const totalPaid = filteredPayments
    .filter(p => p.status === "Pagado")
    .reduce((sum, p) => sum + p.amount, 0);
  
  const totalOverdue = filteredPayments
    .filter(p => p.status === "Vencido")
    .reduce((sum, p) => sum + p.amount, 0);
  
  const totalGeneral = totalPending + totalPaid + totalOverdue;
  
  // Columnas para la tabla de pagos
  const paymentColumns = [
    {
      accessorKey: "date",
      header: "Fecha Programada",
      cell: ({ row }) => formatDate(row.original.date),
    },
    {
      accessorKey: "clientName",
      header: "Cliente",
      cell: ({ row }) => row.original.clientName,
    },
    {
      accessorKey: "projectName",
      header: "Proyecto",
      cell: ({ row }) => row.original.projectName,
    },
    {
      accessorKey: "type",
      header: "Tipo",
      cell: ({ row }) => {
        const type = row.original.type;
        if (type === "Implementación" && row.original.installmentNumber) {
          return `${type} (Cuota ${row.original.installmentNumber})`;
        }
        return type;
      },
    },
    {
      accessorKey: "amount",
      header: "Monto",
      cell: ({ row }) => formatCurrency(row.original.amount, row.original.currency),
    },
    {
      accessorKey: "status",
      header: "Estado",
      cell: ({ row }) => {
        const status = row.original.status;
        return (
          <Badge 
            variant={
              status === "Pagado" ? "success" : 
              status === "Pendiente" ? "warning" : 
              "destructive"
            }
          >
            {status}
          </Badge>
        );
      },
    },
    {
      accessorKey: "paidDate",
      header: "Fecha de Pago",
      cell: ({ row }) => row.original.paidDate ? formatDate(row.original.paidDate) : "-",
    },
    {
      accessorKey: "invoiceNumber",
      header: "Factura",
      cell: ({ row }) => row.original.invoiceNumber || "-",
    },
    {
      id: "actions",
      header: "",
      cell: ({ row }) => {
        const { status, invoiceUrl } = row.original;
        
        if (status === "Pagado" && invoiceUrl) {
          return (
            <Button variant="ghost" size="sm" asChild>
              <a href={invoiceUrl} target="_blank" rel="noopener noreferrer">
                <FileText className="h-4 w-4 mr-1" />
                Ver
              </a>
            </Button>
          );
        }
        
        return null;
      },
    },
  ];
  
  // Título dinámico según los filtros
  let title = "Panorama Financiero";
  let description = "Visión general de todos los pagos";
  
  if (clientId && projectId) {
    const project = getProjectById(projectId);
    const client = getClientById(clientId);
    if (project && client) {
      title = `Pagos: ${project.name}`;
      description = `Cliente: ${client.name}`;
    }
  } else if (clientId) {
    const client = getClientById(clientId);
    if (client) {
      title = `Pagos de ${client.name}`;
      description = "Todos los proyectos";
    }
  } else if (projectId) {
    const project = getProjectById(projectId);
    if (project) {
      title = `Pagos: ${project.name}`;
    }
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
          <div>
            <CardTitle>{title}</CardTitle>
            <CardDescription>{description}</CardDescription>
          </div>
          <Button variant="outline">
            <Download className="h-4 w-4 mr-2" />
            Exportar Excel
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="pagos" className="space-y-4">
          <TabsList>
            <TabsTrigger value="pagos">Pagos</TabsTrigger>
            <TabsTrigger value="resumen">Resumen</TabsTrigger>
          </TabsList>
          
          <div className="flex flex-col sm:flex-row justify-between gap-4 mt-4">
            <DatePickerWithRange
              value={dateRange}
              onChange={setDateRange}
            />
            
            <Select
              value={statusFilter}
              onValueChange={setStatusFilter}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filtrar por estado" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="todos">Todos los estados</SelectItem>
                <SelectItem value="Pagado">Pagados</SelectItem>
                <SelectItem value="Pendiente">Pendientes</SelectItem>
                <SelectItem value="Vencido">Vencidos</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <TabsContent value="pagos">
            <DataTable
              columns={paymentColumns}
              data={filteredPayments}
              searchColumn="projectName"
              searchPlaceholder="Buscar por proyecto..."
            />
          </TabsContent>
          
          <TabsContent value="resumen">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Total Facturado</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">
                    {formatCurrency(totalGeneral, "COP")}
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    Periodo: {dateRange?.from && formatDate(dateRange.from)} - {dateRange?.to && formatDate(dateRange.to)}
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg text-green-600">Pagado</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-green-600">
                    {formatCurrency(totalPaid, "COP")}
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    {((totalPaid / totalGeneral) * 100).toFixed(1)}% del total
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg text-amber-600">Pendiente</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-amber-600">
                    {formatCurrency(totalPending, "COP")}
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    {((totalPending / totalGeneral) * 100).toFixed(1)}% del total
                  </p>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg text-red-600">Vencido</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-red-600">
                    {formatCurrency(totalOverdue, "COP")}
                  </div>
                  <p className="text-xs text-muted-foreground mt-1">
                    {((totalOverdue / totalGeneral) * 100).toFixed(1)}% del total
                  </p>
                </CardContent>
              </Card>
            </div>
            
            <Card>
              <CardContent className="p-6">
                <h3 className="text-lg font-medium mb-4">Distribución de Pagos</h3>
                <div className="flex items-center">
                  <div className="w-full bg-gray-200 rounded-full h-4">
                    <div className="h-4 rounded-l-full bg-green-500" style={{ 
                      width: `${(totalPaid / totalGeneral) * 100}%` 
                    }}></div>
                  </div>
                </div>
                <div className="flex justify-between mt-2 text-sm">
                  <div className="flex items-center">
                    <div className="w-3 h-3 bg-green-500 rounded mr-1"></div>
                    <span>Pagado: {((totalPaid / totalGeneral) * 100).toFixed(1)}%</span>
                  </div>
                  <div className="flex items-center">
                    <div className="w-3 h-3 bg-amber-500 rounded mr-1"></div>
                    <span>Pendiente: {((totalPending / totalGeneral) * 100).toFixed(1)}%</span>
                  </div>
                  <div className="flex items-center">
                    <div className="w-3 h-3 bg-red-500 rounded mr-1"></div>
                    <span>Vencido: {((totalOverdue / totalGeneral) * 100).toFixed(1)}%</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}



================================================
FILE: src/components/clients/project-details.tsx
================================================

import React, { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  ArrowLeft, 
  FileText,
  Plus, 
  CreditCard, 
  Edit,
  Calendar
} from "lucide-react";
import { formatDate, formatCurrency } from "@/lib/utils";
import { useProjectsData } from "@/hooks/use-projects-data";
import { useClientsData } from "@/hooks/use-clients-data";
import { DocumentsList } from "./documents-list";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ProjectPayments } from "./project-payments";
import { AddDocumentDialog } from "./add-document-dialog";
import { EditProjectDialog } from "./edit-project-dialog";
import { AddPaymentDialog } from "./add-payment-dialog";

interface ProjectDetailsProps {
  projectId: number;
  onBack: () => void;
  onViewFinancials: () => void;
}

export function ProjectDetails({ 
  projectId, 
  onBack,
  onViewFinancials 
}: ProjectDetailsProps) {
  const { getProjectById } = useProjectsData();
  const { getClientById } = useClientsData();
  const project = getProjectById(projectId);
  const client = project ? getClientById(project.clientId) : null;
  
  const [documentDialogOpen, setDocumentDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);
  
  if (!project || !client) {
    return (
      <Card>
        <CardContent className="pt-6">
          <p>Proyecto no encontrado</p>
          <Button onClick={onBack} className="mt-4">Volver</Button>
        </CardContent>
      </Card>
    );
  }

  const renderPaymentPlan = () => {
    const { paymentPlan: plan } = project;
    
    return (
      <div className="space-y-4">
        <div>
          <h3 className="font-medium mb-2">Tipo de Plan</h3>
          <Badge variant="outline" className="text-sm">{plan.type}</Badge>
        </div>
        
        {plan.implementationFee && (
          <div>
            <h3 className="font-medium mb-2">Fee de Implementación</h3>
            <div className="bg-muted p-4 rounded-lg space-y-2">
              <p className="text-sm">
                <span className="font-medium">Valor Total:</span> {" "}
                {formatCurrency(plan.implementationFee.total, plan.implementationFee.currency)}
              </p>
              <p className="text-sm">
                <span className="font-medium">Forma de Pago:</span> {" "}
                {plan.implementationFee.installments === 1
                  ? "Pago único"
                  : `${plan.implementationFee.installments} cuotas`}
              </p>
            </div>
          </div>
        )}
        
        {plan.recurringFee && (
          <div>
            <h3 className="font-medium mb-2">Fee Recurrente</h3>
            <div className="bg-muted p-4 rounded-lg space-y-2">
              <p className="text-sm">
                <span className="font-medium">Valor:</span> {" "}
                {formatCurrency(plan.recurringFee.amount, plan.recurringFee.currency)}
              </p>
              <p className="text-sm">
                <span className="font-medium">Frecuencia:</span> {" "}
                {plan.recurringFee.frequency}
              </p>
              <p className="text-sm">
                <span className="font-medium">Día de Cobro:</span> {" "}
                {plan.recurringFee.dayOfCharge}
              </p>
              
              {plan.recurringFee.gracePeriods && plan.recurringFee.gracePeriods > 0 && (
                <p className="text-sm">
                  <span className="font-medium">Periodo de Gracia:</span> {" "}
                  {plan.recurringFee.gracePeriods} {plan.recurringFee.gracePeriods === 1 ? "periodo" : "periodos"}
                </p>
              )}
              
              {plan.recurringFee.discountPeriods && plan.recurringFee.discountPeriods > 0 && (
                <p className="text-sm">
                  <span className="font-medium">Descuento:</span> {" "}
                  {plan.recurringFee.discountPercentage}% por {plan.recurringFee.discountPeriods} {plan.recurringFee.discountPeriods === 1 ? "periodo" : "periodos"}
                </p>
              )}
            </div>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button variant="ghost" onClick={onBack}>
          <ArrowLeft className="mr-2 h-4 w-4" />
          Volver a la lista
        </Button>
        <div className="flex gap-2">
          <EditProjectDialog
            project={project}
            open={editDialogOpen}
            onOpenChange={setEditDialogOpen}
          >
            <Button variant="outline">
              <Edit className="mr-2 h-4 w-4" />
              Editar Proyecto
            </Button>
          </EditProjectDialog>
          <Button variant="default" onClick={onViewFinancials}>
            <CreditCard className="mr-2 h-4 w-4" />
            Ver Finanzas
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm text-muted-foreground mb-1">
                Cliente: {client.name}
              </div>
              <CardTitle className="text-2xl">{project.name}</CardTitle>
              <CardDescription>
                Iniciado el {formatDate(project.startDate)}
              </CardDescription>
            </div>
            <Badge 
              variant={
                project.status === "Activo" ? "success" : 
                project.status === "Pausado" ? "warning" : 
                project.status === "Finalizado" ? "default" :
                "destructive"
              }
              className="text-sm"
            >
              {project.status}
            </Badge>
          </div>
        </CardHeader>
        
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-medium mb-2">Descripción</h3>
              <p className="text-sm">{project.description}</p>
              
              <div className="mt-4">
                <h3 className="font-medium mb-2">Fechas</h3>
                <div className="space-y-2 text-sm">
                  <p><span className="font-medium">Inicio:</span> {formatDate(project.startDate)}</p>
                  {project.endDate && (
                    <p><span className="font-medium">Fin:</span> {formatDate(project.endDate)}</p>
                  )}
                </div>
              </div>
              
              {project.notes && (
                <div className="mt-4">
                  <h3 className="font-medium mb-2">Notas</h3>
                  <p className="text-sm">{project.notes}</p>
                </div>
              )}
            </div>
            
            <div>
              {renderPaymentPlan()}
            </div>
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="payments">
        <TabsList>
          <TabsTrigger value="payments">Pagos</TabsTrigger>
          <TabsTrigger value="documents">Documentos</TabsTrigger>
        </TabsList>

        <TabsContent value="payments" className="mt-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-3">
              <div>
                <CardTitle>Pagos</CardTitle>
                <CardDescription>
                  Seguimiento de pagos del proyecto
                </CardDescription>
              </div>
              <div className="flex gap-2">
                <AddPaymentDialog
                  projectId={project.id}
                  clientId={client.id}
                  open={paymentDialogOpen}
                  onOpenChange={setPaymentDialogOpen}
                >
                  <Button size="sm">
                    <Plus className="mr-2 h-4 w-4" />
                    Registrar Pago
                  </Button>
                </AddPaymentDialog>
                <Button variant="outline" size="sm">
                  <Calendar className="mr-2 h-4 w-4" />
                  Generar Cuotas
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <ProjectPayments projectId={project.id} />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="documents" className="mt-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-3">
              <div>
                <CardTitle>Documentos</CardTitle>
                <CardDescription>
                  Documentos del proyecto
                </CardDescription>
              </div>
              <AddDocumentDialog 
                projectId={project.id}
                open={documentDialogOpen}
                onOpenChange={setDocumentDialogOpen}
              >
                <Button size="sm">
                  <Plus className="mr-2 h-4 w-4" />
                  Añadir Documento
                </Button>
              </AddDocumentDialog>
            </CardHeader>
            <CardContent>
              <DocumentsList 
                documents={project.documents} 
                entityType="project"
                entityId={project.id}
              />
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}



================================================
FILE: src/components/clients/project-payments.tsx
================================================

import React from "react";
import { DataTable } from "@/components/ui/data-table";
import { Button } from "@/components/ui/button";
import { formatDate, formatCurrency } from "@/lib/utils";
import { usePaymentsData } from "@/hooks/use-payments-data";
import { Badge } from "@/components/ui/badge";
import { FileText, CheckCircle2, XCircle } from "lucide-react";

interface ProjectPaymentsProps {
  projectId: number;
}

export function ProjectPayments({ projectId }: ProjectPaymentsProps) {
  const { getPaymentsByProjectId } = usePaymentsData();
  const payments = getPaymentsByProjectId(projectId);
  
  const paymentColumns = [
    {
      accessorKey: "date",
      header: "Fecha Programada",
      cell: ({ row }) => formatDate(row.original.date),
    },
    {
      accessorKey: "type",
      header: "Tipo",
      cell: ({ row }) => {
        const type = row.original.type;
        if (type === "Implementación") {
          const installment = row.original.installmentNumber;
          return `${type} (Cuota ${installment})`;
        }
        return type;
      },
    },
    {
      accessorKey: "amount",
      header: "Monto",
      cell: ({ row }) => formatCurrency(row.original.amount, row.original.currency),
    },
    {
      accessorKey: "status",
      header: "Estado",
      cell: ({ row }) => {
        const status = row.original.status;
        return (
          <Badge 
            variant={
              status === "Pagado" ? "success" : 
              status === "Pendiente" ? "warning" : 
              "destructive"
            }
            className="flex items-center gap-1"
          >
            {status === "Pagado" ? (
              <CheckCircle2 className="h-3 w-3" />
            ) : status === "Vencido" ? (
              <XCircle className="h-3 w-3" />
            ) : null}
            {status}
          </Badge>
        );
      },
    },
    {
      accessorKey: "paidDate",
      header: "Fecha de Pago",
      cell: ({ row }) => row.original.paidDate ? formatDate(row.original.paidDate) : "-",
    },
    {
      accessorKey: "invoiceNumber",
      header: "Factura",
      cell: ({ row }) => row.original.invoiceNumber || "-",
    },
    {
      id: "actions",
      header: "",
      cell: ({ row }) => {
        const { status, invoiceUrl } = row.original;
        
        if (status === "Pagado" && invoiceUrl) {
          return (
            <Button variant="ghost" size="sm" asChild>
              <a href={invoiceUrl} target="_blank" rel="noopener noreferrer">
                <FileText className="h-4 w-4 mr-1" />
                Ver Factura
              </a>
            </Button>
          );
        }
        
        if (status === "Pendiente") {
          return (
            <Button variant="ghost" size="sm">
              <CheckCircle2 className="h-4 w-4 mr-1" />
              Marcar como Pagado
            </Button>
          );
        }
        
        return null;
      },
    },
  ];

  return (
    <div>
      {payments.length === 0 ? (
        <div className="text-center py-6">
          <p className="text-muted-foreground">No hay pagos registrados para este proyecto</p>
        </div>
      ) : (
        <DataTable
          columns={paymentColumns}
          data={payments}
        />
      )}
    </div>
  );
}



================================================
FILE: src/components/clients/projects-list.tsx
================================================

import React from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { DataTable } from "@/components/ui/data-table";
import { Button } from "@/components/ui/button";
import { formatDate, formatCurrency } from "@/lib/utils";
import { useProjectsData } from "@/hooks/use-projects-data";
import { Badge } from "@/components/ui/badge";

interface ProjectsListProps {
  onProjectSelect: (projectId: number) => void;
  clientId?: number; // Opcional, para filtrar proyectos por cliente
}

export function ProjectsList({ onProjectSelect, clientId }: ProjectsListProps) {
  const { projects } = useProjectsData();
  
  // Filtrar proyectos si se proporciona un clientId
  const filteredProjects = clientId 
    ? projects.filter(p => p.clientId === clientId)
    : projects;
  
  const projectColumns = [
    {
      accessorKey: "clientName",
      header: "Cliente",
    },
    {
      accessorKey: "name",
      header: "Nombre del Proyecto",
    },
    {
      accessorKey: "description",
      header: "Descripción",
      cell: ({ row }) => {
        const description = row.original.description;
        return description.length > 40 
          ? `${description.substring(0, 40)}...` 
          : description;
      }
    },
    {
      accessorKey: "startDate",
      header: "Fecha Inicio",
      cell: ({ row }) => formatDate(row.original.startDate),
    },
    {
      accessorKey: "status",
      header: "Estado",
      cell: ({ row }) => {
        const status = row.original.status;
        return (
          <Badge 
            variant={
              status === "Activo" ? "success" : 
              status === "Pausado" ? "warning" : 
              status === "Finalizado" ? "default" :
              "destructive"
            }
          >
            {status}
          </Badge>
        );
      },
    },
    {
      accessorKey: "fee",
      header: "Valor",
      cell: ({ row }) => {
        const plan = row.original.paymentPlan;
        
        if (plan.type === "Fee único") {
          return formatCurrency(
            plan.implementationFee?.total || 0,
            plan.implementationFee?.currency || "COP"
          );
        }
        
        if (plan.recurringFee) {
          return `${formatCurrency(
            plan.recurringFee.amount,
            plan.recurringFee.currency
          )} / ${plan.recurringFee.frequency}`;
        }
        
        return "-";
      },
    },
    {
      id: "actions",
      header: "Acciones",
      cell: ({ row }) => (
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onProjectSelect(row.original.id)}
        >
          Ver Detalles
        </Button>
      ),
    },
  ];

  return (
    <Card>
      <CardHeader>
        <CardTitle>Proyectos</CardTitle>
        <CardDescription>
          {clientId 
            ? "Proyectos del cliente seleccionado" 
            : "Lista de todos los proyectos"}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {filteredProjects.length === 0 ? (
          <div className="text-center py-6">
            <p className="text-muted-foreground">No hay proyectos registrados</p>
          </div>
        ) : (
          <DataTable
            columns={projectColumns}
            data={filteredProjects}
            searchColumn="name"
            searchPlaceholder="Buscar proyecto..."
          />
        )}
      </CardContent>
    </Card>
  );
}



================================================
FILE: src/components/expenses/accrued-expenses.tsx
================================================

import React, { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { DataTable } from "@/components/ui/data-table";
import { Button } from "@/components/ui/button";
import { DatePickerWithRange } from "@/components/ui/date-range-picker";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DateRange } from "react-day-picker";
import { FileText, Download, Check, Calendar, CreditCard } from "lucide-react";
import { format, isBefore, isAfter, subMonths, startOfMonth, endOfMonth } from "date-fns";
import { es } from "date-fns/locale";
import { formatCurrency, convertCurrency, Currency, formatDate, getStatusBadge } from "@/lib/utils";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { CurrencyInput } from "@/components/ui/currency-input";
import { useToast } from "@/hooks/use-toast";
import { StatsCard } from "@/components/ui/stats-card";

// Types for our accrued expenses
interface AccruedExpense {
  id: number;
  description: string;
  dueDate: Date;
  amount: number;
  currency: Currency;
  category: string;
  paymentMethod: string;
  status: 'pagado' | 'pendiente' | 'vencido';
  receipt?: string;
  isRecurring: boolean;
  recurringId?: number;
  notes?: string;
}

// Mock accrued expenses data
const accruedExpensesData: AccruedExpense[] = [
  {
    id: 1,
    description: "Arriendo Oficina",
    dueDate: new Date(2023, 8, 5), // September 5, 2023
    amount: 3200000,
    currency: "COP",
    category: "Arriendo",
    paymentMethod: "Transferencia",
    status: "pagado",
    receipt: "recibo-arriendo-sept.pdf",
    isRecurring: true,
    recurringId: 2
  },
  {
    id: 2,
    description: "Arriendo Oficina",
    dueDate: new Date(2023, 9, 5), // October 5, 2023
    amount: 3200000,
    currency: "COP",
    category: "Arriendo",
    paymentMethod: "Transferencia",
    status: "pagado",
    receipt: "recibo-arriendo-oct.pdf",
    isRecurring: true,
    recurringId: 2
  },
  {
    id: 3,
    description: "Arriendo Oficina",
    dueDate: new Date(2023, 10, 5), // November 5, 2023
    amount: 3200000,
    currency: "COP",
    category: "Arriendo",
    paymentMethod: "Transferencia",
    status: "pendiente",
    isRecurring: true,
    recurringId: 2
  },
  {
    id: 4,
    description: "Servicios Cloud",
    dueDate: new Date(2023, 10, 10), // November 10, 2023
    amount: 950000,
    currency: "COP",
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    status: "pendiente",
    isRecurring: true,
    recurringId: 3
  },
  {
    id: 5,
    description: "Suscripción Herramientas de Diseño",
    dueDate: new Date(2023, 10, 15), // November 15, 2023
    amount: 50,
    currency: "USD",
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    status: "pendiente",
    isRecurring: true,
    recurringId: 5
  },
  {
    id: 6,
    description: "Licencia Software Anual",
    dueDate: new Date(2023, 5, 20), // June 20, 2023
    amount: 1200,
    currency: "USD",
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    status: "pagado",
    receipt: "licencia-adobe.pdf",
    isRecurring: false
  },
  {
    id: 7,
    description: "Servicio AWS",
    dueDate: new Date(2023, 5, 25), // June 25, 2023
    amount: 350,
    currency: "USD",
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    status: "pagado",
    receipt: "aws-junio.pdf",
    isRecurring: false
  },
  {
    id: 8,
    description: "Nómina",
    dueDate: new Date(2023, 10, 15), // November 15, 2023
    amount: 7500000,
    currency: "COP",
    category: "Personal",
    paymentMethod: "Transferencia",
    status: "pendiente",
    isRecurring: true,
    recurringId: 1
  },
  {
    id: 9,
    description: "Servicios Contables",
    dueDate: new Date(2023, 10, 20), // November 20, 2023
    amount: 1800000,
    currency: "COP",
    category: "Servicios Profesionales",
    paymentMethod: "Transferencia",
    status: "vencido",
    isRecurring: true,
    recurringId: 4
  }
];

export function AccruedExpenses() {
  const { toast } = useToast();
  const [selectedCurrency, setSelectedCurrency] = useState<Currency | "all">("all");
  const [viewCurrency, setViewCurrency] = useState<Currency>("COP");
  const [dateRange, setDateRange] = useState<DateRange | undefined>({
    from: startOfMonth(new Date()),
    to: endOfMonth(new Date())
  });
  const [periodFilter, setPeriodFilter] = useState<string>("month");
  const [selectedExpense, setSelectedExpense] = useState<AccruedExpense | null>(null);
  const [markAsPaidOpen, setMarkAsPaidOpen] = useState(false);

  // Set date range based on period selection
  const handlePeriodChange = (period: string) => {
    const today = new Date();
    let start: Date;
    let end: Date;

    setPeriodFilter(period);

    switch (period) {
      case "month":
        start = startOfMonth(today);
        end = endOfMonth(today);
        break;
      case "quarter":
        start = startOfMonth(subMonths(today, 2));
        end = endOfMonth(today);
        break;
      case "year":
        start = startOfMonth(subMonths(today, 11));
        end = endOfMonth(today);
        break;
      default:
        return; // For custom, keep current range
    }

    setDateRange({ from: start, to: end });
  };

  // Filter expenses based on date range and currency
  const filteredExpenses = accruedExpensesData.filter(expense => {
    const inDateRange = dateRange?.from && dateRange?.to 
      ? !isBefore(expense.dueDate, dateRange.from) && !isAfter(expense.dueDate, dateRange.to)
      : true;
    
    const matchesCurrency = selectedCurrency === "all" || expense.currency === selectedCurrency;
    
    return inDateRange && matchesCurrency;
  });

  // Calculate totals
  const totalByCategoryAndCurrency = filteredExpenses.reduce((acc, expense) => {
    const category = expense.category;
    const currency = expense.currency;
    
    if (!acc[category]) {
      acc[category] = { COP: 0, USD: 0 };
    }
    
    acc[category][currency] += expense.amount;
    
    return acc;
  }, {} as Record<string, Record<Currency, number>>);

  const totalInViewCurrency = Object.entries(totalByCategoryAndCurrency).reduce(
    (acc, [_, amounts]) => {
      let totalInView = 0;
      
      // Convert and sum both currencies to view currency
      if (viewCurrency === "COP") {
        totalInView += amounts.COP + convertCurrency(amounts.USD, "USD", "COP");
      } else {
        totalInView += amounts.USD + convertCurrency(amounts.COP, "COP", "USD");
      }
      
      return acc + totalInView;
    }, 
    0
  );

  // Handle marking expense as paid
  const handleMarkAsPaid = () => {
    if (selectedExpense) {
      toast({
        title: "Gasto marcado como pagado",
        description: `El gasto "${selectedExpense.description}" ha sido marcado como pagado.`
      });
      setMarkAsPaidOpen(false);
      setSelectedExpense(null);
    }
  };

  // Columns for data table
  const columns = [
    {
      accessorKey: "description",
      header: "Descripción",
    },
    {
      accessorKey: "dueDate",
      header: "Fecha de Vencimiento",
      cell: ({ row }: { row: any }) => formatDate(row.original.dueDate),
    },
    {
      accessorKey: "amount",
      header: "Monto",
      cell: ({ row }: { row: any }) => {
        const expense = row.original;
        
        // If viewing in original currency
        if (viewCurrency === expense.currency) {
          return formatCurrency(expense.amount, expense.currency);
        }
        
        // If we need to convert
        const convertedAmount = convertCurrency(
          expense.amount, 
          expense.currency, 
          viewCurrency
        );
        
        return (
          <div className="flex items-center">
            <span>{formatCurrency(convertedAmount, viewCurrency)}</span>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger>
                  <span className="ml-1 text-xs text-muted-foreground">
                    ({expense.currency})
                  </span>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Original: {formatCurrency(expense.amount, expense.currency)}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        );
      }
    },
    {
      accessorKey: "category",
      header: "Categoría",
    },
    {
      accessorKey: "paymentMethod",
      header: "Método de Pago",
      cell: ({ row }: { row: any }) => (
        <div className="flex items-center">
          <CreditCard className="h-4 w-4 mr-2 text-muted-foreground" />
          {row.original.paymentMethod}
        </div>
      )
    },
    {
      accessorKey: "status",
      header: "Estado",
      cell: ({ row }: { row: any }) => (
        <span className={getStatusBadge(row.original.status)}>
          {row.original.status.charAt(0).toUpperCase() + row.original.status.slice(1)}
        </span>
      ),
    },
    {
      accessorKey: "receipt",
      header: "Comprobante",
      cell: ({ row }: { row: any }) => (
        row.original.receipt ? (
          <Button variant="ghost" size="sm" className="w-full justify-start">
            <FileText className="h-4 w-4 mr-2" />
            Ver
          </Button>
        ) : (
          <Button variant="ghost" size="sm" className="w-full justify-start" disabled={row.original.status === "pagado"}>
            <FileText className="h-4 w-4 mr-2" />
            Subir
          </Button>
        )
      ),
    },
    {
      accessorKey: "actions",
      header: "Acciones",
      cell: ({ row }: { row: any }) => (
        <div className="flex items-center gap-2">
          {row.original.status !== "pagado" && (
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => {
                setSelectedExpense(row.original);
                setMarkAsPaidOpen(true);
              }}
            >
              <Check className="h-4 w-4 mr-2" />
              Marcar Pagado
            </Button>
          )}
          <Button variant="ghost" size="sm">
            Editar
          </Button>
        </div>
      ),
    },
  ];

  return (
    <>
      <Card>
        <CardHeader className="bg-muted/20">
          <CardTitle>Gastos Causados</CardTitle>
          <CardDescription>
            Visualización de todos los gastos causados en el periodo seleccionado
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="flex flex-col md:flex-row gap-4 justify-between items-start md:items-center pt-4">
            <div className="flex flex-col md:flex-row gap-4">
              <Select 
                value={periodFilter} 
                onValueChange={handlePeriodChange}
              >
                <SelectTrigger className="w-[180px]">
                  <Calendar className="h-4 w-4 mr-2" />
                  <SelectValue placeholder="Periodo" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="month">Este Mes</SelectItem>
                  <SelectItem value="quarter">Este Trimestre</SelectItem>
                  <SelectItem value="year">Este Año</SelectItem>
                  <SelectItem value="custom">Periodo Personalizado</SelectItem>
                </SelectContent>
              </Select>
              
              {periodFilter === "custom" && (
                <DatePickerWithRange
                  value={dateRange}
                  onChange={setDateRange}
                />
              )}
              
              <div className="flex gap-2">
                <Select
                  value={selectedCurrency}
                  onValueChange={(val) => setSelectedCurrency(val as Currency | "all")}
                >
                  <SelectTrigger className="w-[150px]">
                    <SelectValue placeholder="Moneda" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Todas</SelectItem>
                    <SelectItem value="COP">COP</SelectItem>
                    <SelectItem value="USD">USD</SelectItem>
                  </SelectContent>
                </Select>
                
                <Select
                  value={viewCurrency}
                  onValueChange={(val) => setViewCurrency(val as Currency)}
                >
                  <SelectTrigger className="w-[150px]">
                    <SelectValue placeholder="Ver en" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="COP">Ver en COP</SelectItem>
                    <SelectItem value="USD">Ver en USD</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <Button className="w-full md:w-auto">
              <Download className="h-4 w-4 mr-2" />
              Exportar Excel
            </Button>
          </div>
          
          <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
            <StatsCard
              title="Total Gastos Causados"
              value={formatCurrency(totalInViewCurrency, viewCurrency)}
              description={dateRange?.from && dateRange?.to 
                ? `${format(dateRange.from, "dd/MM/yyyy", { locale: es })} - ${format(dateRange.to, "dd/MM/yyyy", { locale: es })}`
                : "Periodo actual"
              }
              icon={<CreditCard className="h-4 w-4" />}
            />
            
            {Object.entries(totalByCategoryAndCurrency).map(([category, currencies], index) => {
              const totalInCategory = viewCurrency === "COP" 
                ? currencies.COP + convertCurrency(currencies.USD, "USD", "COP")
                : currencies.USD + convertCurrency(currencies.COP, "COP", "USD");
              
              if (index < 3) { // Only show top 3 categories
                return (
                  <StatsCard
                    key={category}
                    title={`Total ${category}`}
                    value={formatCurrency(totalInCategory, viewCurrency)}
                    description="Incluye gastos recurrentes y variables"
                  />
                );
              }
              return null;
            })}
          </div>
          
          <DataTable 
            columns={columns} 
            data={filteredExpenses}
            searchColumn="description"
            searchPlaceholder="Buscar gastos causados..."
          />
        </CardContent>
      </Card>
      
      {/* Dialog for marking expenses as paid */}
      <Dialog open={markAsPaidOpen} onOpenChange={setMarkAsPaidOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Marcar Gasto Como Pagado</DialogTitle>
            <DialogDescription>
              Complete los detalles del pago para el gasto "{selectedExpense?.description}".
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">Fecha de Pago</label>
              <div className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2">
                {format(new Date(), "PPP", { locale: es })}
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Monto a Pagar</label>
              <CurrencyInput
                value={selectedExpense?.amount}
                currency={selectedExpense?.currency || "COP"}
                readOnly
              />
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Método de Pago</label>
              <Select defaultValue={selectedExpense?.paymentMethod}>
                <SelectTrigger>
                  <SelectValue placeholder="Seleccionar método" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Efectivo">Efectivo</SelectItem>
                  <SelectItem value="Transferencia">Transferencia</SelectItem>
                  <SelectItem value="Tarjeta de Crédito">Tarjeta de Crédito</SelectItem>
                  <SelectItem value="Tarjeta de Débito">Tarjeta de Débito</SelectItem>
                  <SelectItem value="PayPal">PayPal</SelectItem>
                  <SelectItem value="Nequi">Nequi</SelectItem>
                  <SelectItem value="Daviplata">Daviplata</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">Comprobante (Opcional)</label>
              <div className="border-2 border-dashed rounded-md p-6 flex flex-col items-center justify-center text-center">
                <FileText className="h-10 w-10 text-muted-foreground mb-2" />
                <p className="text-sm text-muted-foreground">
                  Arrastra y suelta un archivo o haz clic para seleccionar
                </p>
                <p className="text-xs text-muted-foreground mt-1">
                  Formatos aceptados: PDF, JPG, PNG. Máx 5MB
                </p>
                <Button variant="outline" size="sm" className="mt-4">
                  Seleccionar Archivo
                </Button>
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setMarkAsPaidOpen(false)}>
              Cancelar
            </Button>
            <Button onClick={handleMarkAsPaid}>
              Confirmar Pago
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}

// Helper components that will be used in the AccruedExpenses component
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";



================================================
FILE: src/components/financial/client-analytics.tsx
================================================

import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { formatCurrency } from "@/lib/utils";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  LineChart,
  Line,
  Cell,
  PieChart,
  Pie,
  Scatter,
  ScatterChart,
  ZAxis
} from "recharts";
import { 
  ArrowUp, 
  ArrowDown, 
  TrendingUp, 
  TrendingDown, 
  AlertCircle, 
  AlertTriangle 
} from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";

interface ClientProfitability {
  name: string;
  revenue: number;
  cost: number;
  profit: number;
  margin: number;
}

interface ClientGrowth {
  name: string;
  previousValue: number;
  currentValue: number;
  growth?: number;
  decline?: number;
}

interface MrrChanges {
  newMrr: number;
  churn: number;
  netMrr: number;
}

interface ClientConcentrationData {
  name: string;
  value: number;
  percentage: number;
}

interface ClientAnalyticsProps {
  clientProfitability: ClientProfitability[];
  growingClients: ClientGrowth[];
  decliningClients: ClientGrowth[];
  mrrChanges: MrrChanges;
  timeFrame?: string;
  onTimeFrameChange?: (value: string) => void;
}

export function ClientAnalytics({ 
  clientProfitability, 
  growingClients, 
  decliningClients, 
  mrrChanges,
  timeFrame = "month",
  onTimeFrameChange
}: ClientAnalyticsProps) {
  const [analysisTab, setAnalysisTab] = useState("profitability");
  const [clientFilter, setClientFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  
  // Calcular concentración de clientes
  const totalRevenue = clientProfitability.reduce((sum, client) => sum + client.revenue, 0);
  const clientConcentration: ClientConcentrationData[] = clientProfitability
    .sort((a, b) => b.revenue - a.revenue)
    .map((client) => ({
      name: client.name,
      value: client.revenue,
      percentage: (client.revenue / totalRevenue) * 100
    }));
  
  // Calcular margen promedio
  const averageMargin = clientProfitability.reduce((sum, client) => sum + client.margin, 0) / clientProfitability.length;
  
  // Prepare data for MRR changes chart
  const mrrChangesData = [
    { name: "Nuevo MRR", value: mrrChanges.newMrr },
    { name: "Churn", value: -mrrChanges.churn },
    { name: "Neto", value: mrrChanges.netMrr }
  ];

  // Datos para gráfico de burbujas de rentabilidad vs tamaño
  const bubbleChartData = clientProfitability.map((client) => ({
    name: client.name,
    revenue: client.revenue,
    margin: client.margin,
    profit: client.profit,
    z: client.cost // Tamaño de la burbuja basado en el costo
  }));
  
  // Determinar si hay riesgo de concentración (más de 30% del ingreso en un solo cliente)
  const concentrationRisk = clientConcentration.length > 0 && clientConcentration[0].percentage > 30;

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-2">
        <Tabs defaultValue="profitability" className="w-full" onValueChange={setAnalysisTab}>
          <TabsList>
            <TabsTrigger value="profitability">Rentabilidad por Cliente</TabsTrigger>
            <TabsTrigger value="growth">Crecimiento de Clientes</TabsTrigger>
            <TabsTrigger value="concentration">Concentración</TabsTrigger>
            <TabsTrigger value="mrr">Cambios en MRR</TabsTrigger>
          </TabsList>
        </Tabs>
        
        {onTimeFrameChange && (
          <div className="w-[180px]">
            <Select value={timeFrame} onValueChange={onTimeFrameChange}>
              <SelectTrigger>
                <SelectValue placeholder="Seleccionar período" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="month">Este Mes</SelectItem>
                <SelectItem value="quarter">Este Trimestre</SelectItem>
                <SelectItem value="ytd">Año a la Fecha (YTD)</SelectItem>
                <SelectItem value="year">Este Año</SelectItem>
              </SelectContent>
            </Select>
          </div>
        )}
      </div>

      {/* KPIs generales sobre clientes */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className={concentrationRisk ? "bg-amber-50 border-amber-200" : "bg-green-50 border-green-200"}>
          <CardHeader className="pb-2">
            <div className="flex justify-between">
              <CardTitle className="text-sm">Concentración de Ingresos</CardTitle>
              {concentrationRisk ? (
                <AlertTriangle className="h-5 w-5 text-amber-500" />
              ) : (
                <TrendingUp className="h-5 w-5 text-green-500" />
              )}
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{clientConcentration.length > 0 ? `${clientConcentration[0].percentage.toFixed(1)}%` : "0%"}</div>
            <p className="text-xs text-muted-foreground mt-1">
              {clientConcentration.length > 0 ? `En cliente principal: ${clientConcentration[0].name}` : "No hay datos de clientes"}
            </p>
          </CardContent>
        </Card>

        <Card className="bg-blue-50 border-blue-200">
          <CardHeader className="pb-2">
            <div className="flex justify-between">
              <CardTitle className="text-sm">Margen de Utilidad Promedio</CardTitle>
              <TrendingUp className="h-5 w-5 text-blue-500" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{averageMargin.toFixed(1)}%</div>
            <p className="text-xs text-muted-foreground mt-1">
              {averageMargin > 50 ? "Margen saludable" : "Oportunidad de mejora"}
            </p>
          </CardContent>
        </Card>

        <Card className={mrrChanges.netMrr >= 0 ? "bg-green-50 border-green-200" : "bg-red-50 border-red-200"}>
          <CardHeader className="pb-2">
            <div className="flex justify-between">
              <CardTitle className="text-sm">MRR Neto</CardTitle>
              {mrrChanges.netMrr >= 0 ? (
                <TrendingUp className="h-5 w-5 text-green-500" />
              ) : (
                <TrendingDown className="h-5 w-5 text-red-500" />
              )}
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{formatCurrency(mrrChanges.netMrr)}</div>
            <p className="text-xs text-muted-foreground mt-1">
              Nuevos: {formatCurrency(mrrChanges.newMrr)} | Churn: {formatCurrency(mrrChanges.churn)}
            </p>
          </CardContent>
        </Card>
      </div>
      
      <TabsContent value="profitability">
        <div className="grid gap-6 grid-cols-1 lg:grid-cols-2">
          <Card>
            <CardHeader>
              <CardTitle>Ranking de Clientes por Rentabilidad</CardTitle>
              <CardDescription>Ingresos, costos y margen por cliente</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={clientProfitability.sort((a, b) => b.profit - a.profit)}
                    layout="vertical"
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" tickFormatter={(value) => `$${value / 1000000}M`} />
                    <YAxis dataKey="name" type="category" width={100} />
                    <Tooltip
                      formatter={(value, name) => {
                        const formattedValue = formatCurrency(Number(value));
                        if (name === "margin") return [`${value}%`, "Margen"];
                        if (name === "profit") return [formattedValue, "Utilidad"];
                        if (name === "revenue") return [formattedValue, "Ingresos"];
                        if (name === "cost") return [formattedValue, "Costos"];
                        return [formattedValue, name];
                      }}
                    />
                    <Legend />
                    <Bar dataKey="revenue" name="Ingresos" fill="#4ade80" stackId="a" />
                    <Bar dataKey="cost" name="Costos" fill="#f87171" stackId="a" />
                    <Line
                      type="monotone"
                      dataKey="margin"
                      name="Margen %"
                      stroke="#8884d8"
                      strokeWidth={2}
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Relación Ingresos vs Margen</CardTitle>
              <CardDescription>Tamaño = volumen de costos asociados</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <ScatterChart>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis
                      dataKey="revenue"
                      name="Ingresos"
                      tickFormatter={(value) => `$${value / 1000000}M`}
                    />
                    <YAxis 
                      dataKey="margin" 
                      name="Margen %" 
                      unit="%" 
                      domain={[0, 'dataMax + 10']}
                    />
                    <ZAxis dataKey="z" range={[50, 500]} name="Costos" />
                    <Tooltip 
                      formatter={(value, name) => {
                        if (name === "Ingresos") return [formatCurrency(Number(value)), name];
                        if (name === "Margen %") return [`${Number(value).toFixed(1)}%`, name];
                        if (name === "Costos") return [formatCurrency(Number(value)), name];
                        return [value, name];
                      }}
                      content={({ active, payload }) => {
                        if (active && payload && payload.length) {
                          const data = payload[0].payload;
                          return (
                            <div className="bg-white p-3 border rounded-md shadow-md">
                              <p className="font-medium">{data.name}</p>
                              <p>Ingresos: {formatCurrency(data.revenue)}</p>
                              <p>Margen: {data.margin.toFixed(1)}%</p>
                              <p>Costos: {formatCurrency(data.z)}</p>
                              <p>Utilidad: {formatCurrency(data.profit)}</p>
                            </div>
                          );
                        }
                        return null;
                      }}
                    />
                    <Scatter
                      name="Clientes"
                      data={bubbleChartData}
                      fill="#8884d8"
                    />
                  </ScatterChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </div>
      </TabsContent>

      <TabsContent value="growth">
        <div className="grid md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Clientes en Crecimiento</CardTitle>
              <CardDescription>Variación positiva en el período seleccionado</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {growingClients.length === 0 ? (
                  <div className="text-center p-8 text-muted-foreground">
                    No hay clientes con crecimiento en el período seleccionado
                  </div>
                ) : (
                  growingClients.map((client, index) => (
                    <div key={index} className="flex justify-between items-center p-3 bg-green-50 border border-green-100 rounded-lg">
                      <div>
                        <h4 className="font-medium">{client.name}</h4>
                        <div className="flex items-center gap-1 text-green-600 text-sm">
                          <ArrowUp className="h-4 w-4" />
                          <span>+{client.growth?.toFixed(1)}% crecimiento</span>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-medium">{formatCurrency(client.currentValue)}</div>
                        <div className="text-sm text-muted-foreground">
                          antes: {formatCurrency(client.previousValue)}
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader>
              <CardTitle>Clientes en Declive</CardTitle>
              <CardDescription>Variación negativa en el período seleccionado</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {decliningClients.length === 0 ? (
                  <div className="text-center p-8 text-muted-foreground">
                    No hay clientes con declive en el período seleccionado
                  </div>
                ) : (
                  decliningClients.map((client, index) => (
                    <div key={index} className="flex justify-between items-center p-3 bg-red-50 border border-red-100 rounded-lg">
                      <div>
                        <h4 className="font-medium">{client.name}</h4>
                        <div className="flex items-center gap-1 text-red-600 text-sm">
                          <ArrowDown className="h-4 w-4" />
                          <span>{client.decline?.toFixed(1)}% declive</span>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="font-medium">{formatCurrency(client.currentValue)}</div>
                        <div className="text-sm text-muted-foreground">
                          antes: {formatCurrency(client.previousValue)}
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </CardContent>
          </Card>

          <Card className="md:col-span-2">
            <CardHeader>
              <CardTitle>Análisis de Tendencias</CardTitle>
              <CardDescription>Evolución de los principales clientes</CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <LineChart>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                  <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                  <Legend />
                  {/* Aquí se pueden agregar líneas dinámicamente según datos históricos */}
                  <Line type="monotone" dataKey="cliente1" stroke="#8884d8" name="Cliente A" />
                  <Line type="monotone" dataKey="cliente2" stroke="#82ca9d" name="Cliente B" />
                  <Line type="monotone" dataKey="cliente3" stroke="#ffc658" name="Cliente C" />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>
      </TabsContent>

      <TabsContent value="concentration">
        <div className="grid md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>Distribución de Ingresos por Cliente</CardTitle>
              <CardDescription>Porcentaje sobre el total de ingresos</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[350px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={clientConcentration}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={120}
                      fill="#8884d8"
                      dataKey="value"
                      nameKey="name"
                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(1)}%`}
                    >
                      {clientConcentration.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={index === 0 ? '#FF8042' : ['#0088FE', '#00C49F', '#FFBB28', '#8884d8'][index % 4]} />
                      ))}
                    </Pie>
                    <Tooltip
                      formatter={(value) => formatCurrency(Number(value))}
                    />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Análisis de Concentración</CardTitle>
              <CardDescription>Distribución de ingresos y riesgo asociado</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {concentrationRisk && (
                  <div className="bg-amber-50 border border-amber-200 p-4 rounded-lg flex items-start gap-3">
                    <AlertCircle className="h-5 w-5 text-amber-500 mt-0.5" />
                    <div>
                      <h4 className="font-medium text-amber-800">Riesgo de concentración detectado</h4>
                      <p className="text-sm text-amber-700 mt-1">
                        El {clientConcentration[0]?.percentage.toFixed(1)}% de tus ingresos dependen de un solo cliente ({clientConcentration[0]?.name}).
                        Considera diversificar tu cartera de clientes para reducir el riesgo.
                      </p>
                    </div>
                  </div>
                )}

                <div>
                  <h3 className="font-medium mb-3">Distribución detallada</h3>
                  <div className="space-y-2">
                    {clientConcentration.map((client, index) => (
                      <div key={index} className="flex items-center">
                        <div className="w-32 truncate">{client.name}</div>
                        <div className="flex-1 mx-2">
                          <div className="h-2 bg-gray-200 rounded-full">
                            <div
                              className={`h-2 rounded-full ${index === 0 ? 'bg-amber-500' : 'bg-blue-500'}`}
                              style={{ width: `${client.percentage}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="w-20 text-right text-sm">{client.percentage.toFixed(1)}%</div>
                        <div className="w-24 text-right">{formatCurrency(client.value)}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h3 className="font-medium mb-2">Consejos de diversificación</h3>
                  <ul className="list-disc list-inside text-sm space-y-1 text-muted-foreground">
                    <li>Busca ampliar servicios en clientes pequeños con potencial</li>
                    <li>Considera desarrollar nuevos productos para mercados distintos</li>
                    <li>Establece límites máximos de concentración (ej: 25% por cliente)</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </TabsContent>

      <TabsContent value="mrr">
        <Card>
          <CardHeader>
            <CardTitle>Cambios en MRR (Monthly Recurring Revenue)</CardTitle>
            <CardDescription>Análisis de nuevo MRR, churn y balance neto</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-4 mb-6">
              <div className="bg-green-50 border border-green-100 p-4 rounded-lg">
                <div className="flex items-center gap-2">
                  <TrendingUp className="text-green-600 h-5 w-5" />
                  <span className="text-sm font-medium">Nuevo MRR</span>
                </div>
                <div className="text-xl font-bold mt-2">{formatCurrency(mrrChanges.newMrr)}</div>
              </div>
              
              <div className="bg-red-50 border border-red-100 p-4 rounded-lg">
                <div className="flex items-center gap-2">
                  <TrendingDown className="text-red-600 h-5 w-5" />
                  <span className="text-sm font-medium">Churn</span>
                </div>
                <div className="text-xl font-bold mt-2">{formatCurrency(mrrChanges.churn)}</div>
              </div>
              
              <div className="bg-blue-50 border border-blue-100 p-4 rounded-lg">
                <div className="flex items-center gap-2">
                  <span className={`h-5 w-5 rounded-full flex items-center justify-center ${mrrChanges.netMrr >= 0 ? 'bg-green-600' : 'bg-red-600'} text-white font-bold text-xs`}>
                    {mrrChanges.netMrr >= 0 ? '+' : '-'}
                  </span>
                  <span className="text-sm font-medium">MRR Neto</span>
                </div>
                <div className="text-xl font-bold mt-2">{formatCurrency(mrrChanges.netMrr)}</div>
              </div>
            </div>
            
            <div className="h-[300px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={mrrChangesData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis tickFormatter={(value) => `$${Math.abs(value) / 1000000}M`} />
                  <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                  <Bar 
                    dataKey="value" 
                    name="Valor"
                    fill="#4ade80" 
                    radius={[4, 4, 0, 0]}
                  >
                    {mrrChangesData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.value >= 0 ? "#4ade80" : "#f87171"} />
                    ))}
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>

            <div className="mt-6 bg-gray-50 p-4 rounded-lg">
              <h3 className="font-medium mb-2">Análisis del MRR</h3>
              <div className="text-sm text-muted-foreground space-y-2">
                <p>
                  {mrrChanges.netMrr > 0 
                    ? `Tu MRR está creciendo a un ritmo saludable. El crecimiento neto de ${formatCurrency(mrrChanges.netMrr)} indica una buena adquisición y retención de clientes.` 
                    : `Tu MRR está en declive. La pérdida neta de ${formatCurrency(Math.abs(mrrChanges.netMrr))} indica problemas de retención o adquisición de clientes.`}
                </p>
                <p>
                  <span className="font-medium">Tasa de churn:</span> {((mrrChanges.churn / (mrrChanges.churn + mrrChanges.newMrr)) * 100).toFixed(1)}% 
                  {mrrChanges.churn > mrrChanges.newMrr * 0.5 ? " (Alta, considerar estrategias de retención)" : " (Dentro de parámetros normales)"}
                </p>
              </div>
            </div>

            <div className="mt-4 flex justify-end">
              <Button variant="outline">
                Generar reporte detallado
              </Button>
            </div>
          </CardContent>
        </Card>
      </TabsContent>
    </div>
  );
}



================================================
FILE: src/components/financial/financial-dashboard.tsx
================================================

import React, { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { formatCurrency } from "@/lib/utils";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { AlertCircle, TrendingUp, TrendingDown, Wallet, Clock, DollarSign } from "lucide-react";
import { 
  BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, 
  XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend,
  Area, AreaChart
} from "recharts";
import { ChartContainer, ChartTooltipContent } from "@/components/ui/chart";

type MetricsData = {
  burnRate: number;
  mrr: number;
  mrrProjected: number;
  topClientPercentage: number;
  monthlyVariation: {
    income: { value: number; percentage: number };
    expense: { value: number; percentage: number };
  };
  structuralExpenses: number;
  avoidableExpenses: number;
  ytdProfit: number;
};

interface FinancialDashboardProps {
  metrics: MetricsData;
  monthlyData: any[];
  clientData: any[];
  expenseData: any[];
  expenseHeatMap: any[];
  onTimeFrameChange: (value: string) => void;
  timeFrame: string;
}

const COLORS = ['#4ade80', '#f87171', '#60a5fa', '#fbbf24', '#a78bfa', '#fb923c'];

export function FinancialDashboard({ 
  metrics, 
  monthlyData, 
  clientData, 
  expenseData,
  expenseHeatMap,
  onTimeFrameChange,
  timeFrame 
}: FinancialDashboardProps) {
  const [kpiView, setKpiView] = useState<"basic" | "advanced">("basic");
  
  // Calcular runway basado en burn rate
  const runway = metrics.mrr > metrics.burnRate 
    ? "∞" // Runway infinito si MRR > burn rate
    : (metrics.mrr < 0 
        ? 0 
        : Number((metrics.mrr / metrics.burnRate).toFixed(1)));
        
  // Calcular el estado de los KPIs
  const mrrPerformance = metrics.mrr >= metrics.mrrProjected ? "positive" : "negative";
  const variationStatus = metrics.monthlyVariation.income.percentage > 0 ? "positive" : "negative";
  const runwayStatus = typeof runway === 'string' || runway > 6 ? "positive" : runway > 3 ? "warning" : "negative";
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <Tabs value={kpiView} onValueChange={(v) => setKpiView(v as "basic" | "advanced")}>
          <TabsList>
            <TabsTrigger value="basic">Métricas Básicas</TabsTrigger>
            <TabsTrigger value="advanced">Métricas Avanzadas</TabsTrigger>
          </TabsList>
        </Tabs>
        
        <Select value={timeFrame} onValueChange={onTimeFrameChange}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Período" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="month">Este Mes</SelectItem>
            <SelectItem value="quarter">Este Trimestre</SelectItem>
            <SelectItem value="ytd">Año a la Fecha (YTD)</SelectItem>
            <SelectItem value="year">Este Año</SelectItem>
          </SelectContent>
        </Select>
      </div>
      
      <TabsContent value="basic" className="m-0">
        <div className="grid gap-4 md:grid-cols-4">
          <KpiCard 
            title="Burn Rate Mensual" 
            value={formatCurrency(metrics.burnRate)} 
            icon={<TrendingDown />}
            description="Gasto promedio mensual"
            status="neutral"
          />
          
          <KpiCard 
            title="MRR Actual" 
            value={formatCurrency(metrics.mrr)} 
            icon={<TrendingUp />}
            description={`${mrrPerformance === "positive" ? "+" : ""}${((metrics.mrr / metrics.mrrProjected - 1) * 100).toFixed(1)}% vs proyectado`}
            status={mrrPerformance}
          />
          
          <KpiCard 
            title="Runway" 
            value={typeof runway === "string" ? runway : `${runway.toFixed(1)} meses`}
            icon={<Clock />}
            description={typeof runway === "string" ? "MRR cubre gastos" : "Basado en burn rate actual"}
            status={runwayStatus}
          />
          
          <KpiCard 
            title="Variación Mensual" 
            value={formatCurrency(metrics.monthlyVariation.income.value)} 
            icon={metrics.monthlyVariation.income.percentage > 0 ? <TrendingUp /> : <TrendingDown />}
            description={`${metrics.monthlyVariation.income.percentage > 0 ? "+" : ""}${metrics.monthlyVariation.income.percentage.toFixed(1)}% vs mes anterior`}
            status={variationStatus}
          />
        </div>
      </TabsContent>
      
      <TabsContent value="advanced" className="m-0">
        <div className="grid gap-4 md:grid-cols-4">
          <KpiCard 
            title="Utilidad YTD" 
            value={formatCurrency(metrics.ytdProfit)} 
            icon={<Wallet />}
            description="Acumulado año a la fecha"
            status="neutral"
          />
          
          <KpiCard 
            title="Concentración de Clientes" 
            value={`${metrics.topClientPercentage}%`} 
            icon={<AlertCircle />}
            description="Del ingreso en cliente principal"
            status={metrics.topClientPercentage > 40 ? "negative" : "neutral"}
          />
          
          <KpiCard 
            title="Gastos Estructurales" 
            value={formatCurrency(metrics.structuralExpenses)} 
            icon={<DollarSign />}
            description={`${((metrics.structuralExpenses / metrics.burnRate) * 100).toFixed(0)}% del gasto total`}
            status="neutral"
          />
          
          <KpiCard 
            title="Gastos Evitables" 
            value={formatCurrency(metrics.avoidableExpenses)} 
            icon={<DollarSign />}
            description={`${((metrics.avoidableExpenses / metrics.burnRate) * 100).toFixed(0)}% del gasto total`}
            status="neutral"
          />
        </div>
      </TabsContent>
      
      <div className="grid gap-6 grid-cols-1 lg:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Ingresos vs Gastos (6 meses)</CardTitle>
            <CardDescription>Comparativa mensual y tendencia</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[350px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={monthlyData}
                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                  <XAxis dataKey="name" />
                  <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                  <Tooltip 
                    content={({ active, payload }) => {
                      if (active && payload && payload.length) {
                        return (
                          <div className="bg-background border rounded-md p-2 shadow-md">
                            <p className="font-medium">{payload[0]?.payload.name}</p>
                            <p className="text-sm text-green-600">
                              Ingresos: {formatCurrency(payload[0]?.value as number)}
                            </p>
                            <p className="text-sm text-red-600">
                              Gastos: {formatCurrency(payload[1]?.value as number)}
                            </p>
                            <p className="text-sm text-blue-600">
                              Balance: {formatCurrency(payload[2]?.value as number)}
                            </p>
                          </div>
                        );
                      }
                      return null;
                    }}
                  />
                  <Legend />
                  <Bar dataKey="ingresos" name="Ingresos" fill="#4ade80" />
                  <Bar dataKey="gastos" name="Gastos" fill="#f87171" />
                  <Line
                    type="monotone"
                    dataKey="balance"
                    name="Balance"
                    stroke="#60a5fa"
                    strokeWidth={2}
                    dot={{ r: 4 }}
                  />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Distribución de Gastos e Ingresos</CardTitle>
            <CardDescription>Desglose por categoría y por cliente</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="expenses">
              <TabsList className="mb-4">
                <TabsTrigger value="expenses">Gastos</TabsTrigger>
                <TabsTrigger value="income">Ingresos</TabsTrigger>
              </TabsList>
              
              <TabsContent value="expenses" className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={expenseData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    >
                      {expenseData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                    <Legend />
                  </PieChart>
                </ResponsiveContainer>
              </TabsContent>
              
              <TabsContent value="income" className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={clientData.sort((a, b) => b.value - a.value)}
                    layout="vertical"
                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                    <XAxis type="number" tickFormatter={(value) => `$${value / 1000000}M`} />
                    <YAxis type="category" dataKey="name" width={80} />
                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                    <Bar dataKey="value" name="Ingresos" fill="#4ade80" radius={[0, 4, 4, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>Evolución mensual de Ingresos y Gastos</CardTitle>
          <CardDescription>
            Tendencia mensual y calculo de variación porcentual
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="h-[400px]">
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart
                data={monthlyData}
                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
              >
                <defs>
                  <linearGradient id="colorIngresos" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#4ade80" stopOpacity={0.8} />
                    <stop offset="95%" stopColor="#4ade80" stopOpacity={0.1} />
                  </linearGradient>
                  <linearGradient id="colorGastos" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#f87171" stopOpacity={0.8} />
                    <stop offset="95%" stopColor="#f87171" stopOpacity={0.1} />
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                <XAxis dataKey="name" />
                <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                <Tooltip 
                  formatter={(value, name) => [
                    formatCurrency(Number(value)), 
                    name === "ingresos" ? "Ingresos" : "Gastos"
                  ]}
                />
                <Legend />
                <Area
                  type="monotone"
                  dataKey="ingresos"
                  name="Ingresos"
                  stroke="#4ade80"
                  fillOpacity={1}
                  fill="url(#colorIngresos)"
                />
                <Area
                  type="monotone"
                  dataKey="gastos"
                  name="Gastos"
                  stroke="#f87171"
                  fillOpacity={1}
                  fill="url(#colorGastos)"
                />
              </AreaChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

// Componente para tarjetas KPI
interface KpiCardProps {
  title: string;
  value: string;
  icon: React.ReactNode;
  description: string;
  status: "positive" | "negative" | "warning" | "neutral";
}

function KpiCard({ title, value, icon, description, status }: KpiCardProps) {
  const statusColors = {
    positive: "bg-green-50 border-green-200",
    negative: "bg-red-50 border-red-200",
    warning: "bg-amber-50 border-amber-200",
    neutral: "bg-blue-50 border-blue-200",
  };

  const iconColors = {
    positive: "text-green-500",
    negative: "text-red-500",
    warning: "text-amber-500",
    neutral: "text-blue-500",
  };

  return (
    <Card className={`border ${statusColors[status]}`}>
      <CardHeader className="pb-2">
        <div className="flex justify-between items-center">
          <CardTitle className="text-sm">{title}</CardTitle>
          <div className={iconColors[status]}>
            {icon}
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
        <p className="text-xs text-muted-foreground mt-1">{description}</p>
      </CardContent>
    </Card>
  );
}



================================================
FILE: src/components/financial/financial-projections.tsx
================================================

import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { formatCurrency } from "@/lib/utils";
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  AreaChart,
  Area,
  ReferenceLine
} from "recharts";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { AlertCircle, TrendingUp, TrendingDown, Clock } from "lucide-react";

export interface ProjectionData {
  month: string;
  year: number;
  projectedIncome: number;
  projectedExpense: number;
  projectedBalance: number;
}

interface CurrentData {
  name: string;
  ingresos: number;
  gastos: number;
  balance: number;
}

interface FinancialProjectionsProps {
  currentData: CurrentData;
  projectionData: ProjectionData[];
  metrics: {
    burnRate: number;
    mrr: number;
    structuralExpenses: number;
    ytdProfit: number;
  };
}

export function FinancialProjections({
  currentData,
  projectionData,
  metrics
}: FinancialProjectionsProps) {
  const [projectionType, setProjectionType] = useState("conservative");
  const [projectionScope, setProjectionScope] = useState("6m");
  
  // Calculamos runway actual y breakeven point
  const runway = metrics.mrr > 0 
    ? metrics.burnRate > metrics.mrr 
      ? (currentData.balance / (metrics.burnRate - metrics.mrr)).toFixed(1)
      : "∞" // Si MRR >= burnRate, runway es infinito
    : (currentData.balance / metrics.burnRate).toFixed(1);
  
  const isRunwayInfinite = runway === "∞";
  const runwayMonths = isRunwayInfinite ? 999 : parseFloat(runway);
  const breakEvenPoint = projectionData.findIndex(d => d.projectedBalance < 0);
  const hasBreakEven = breakEvenPoint !== -1;
  
  // Ajustamos proyecciones según el tipo seleccionado
  const getModifiedProjections = () => {
    const multiplier = {
      optimistic: { income: 1.15, expense: 0.95 },
      conservative: { income: 1.0, expense: 1.0 },
      pessimistic: { income: 0.85, expense: 1.1 }
    }[projectionType];
    
    return projectionData.map(data => ({
      ...data,
      projectedIncome: data.projectedIncome * multiplier.income,
      projectedExpense: data.projectedExpense * multiplier.expense,
      projectedBalance: data.projectedIncome * multiplier.income - data.projectedExpense * multiplier.expense
    }));
  };

  const modifiedProjections = getModifiedProjections();
  
  // Datos para el gráfico de áreas con acumulado
  const cumulativeData = modifiedProjections.reduce((acc, curr) => {
    const lastValue = acc.length > 0 ? acc[acc.length - 1].accumulated : currentData.balance;
    const newAccumulated = lastValue + (curr.projectedIncome - curr.projectedExpense);
    
    return [...acc, {
      ...curr,
      accumulated: newAccumulated
    }];
  }, []);
  
  return (
    <div className="space-y-6">
      <div className="flex flex-wrap justify-between items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold">Proyecciones Financieras</h2>
          <p className="text-muted-foreground">Estimación de flujo de caja para los próximos meses</p>
        </div>
        
        <div className="flex gap-3">
          <Select value={projectionType} onValueChange={setProjectionType}>
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Tipo de proyección" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="optimistic">Optimista</SelectItem>
              <SelectItem value="conservative">Conservadora</SelectItem>
              <SelectItem value="pessimistic">Pesimista</SelectItem>
            </SelectContent>
          </Select>
          
          <Select value={projectionScope} onValueChange={setProjectionScope}>
            <SelectTrigger className="w-[150px]">
              <SelectValue placeholder="Alcance" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="3m">3 meses</SelectItem>
              <SelectItem value="6m">6 meses</SelectItem>
              <SelectItem value="12m">12 meses</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      
      <div className="grid md:grid-cols-4 gap-4">
        <Card className={runwayMonths < 3 ? "bg-red-50" : runwayMonths < 6 ? "bg-amber-50" : "bg-green-50"}>
          <CardHeader className="pb-2">
            <div className="flex items-center justify-between">
              <CardTitle className="text-sm">Runway Proyectado</CardTitle>
              <Clock className={`h-5 w-5 ${runwayMonths < 3 ? "text-red-500" : runwayMonths < 6 ? "text-amber-500" : "text-green-500"}`} />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{isRunwayInfinite ? "∞" : `${runway} meses`}</div>
            <p className="text-xs text-muted-foreground mt-1">
              {isRunwayInfinite 
                ? "MRR actual cubre los gastos" 
                : hasBreakEven 
                  ? `Quiebre estimado: ${projectionData[breakEvenPoint].month} ${projectionData[breakEvenPoint].year}` 
                  : "Sin quiebre en el período proyectado"}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm">Ingresos Proyectados</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {formatCurrency(modifiedProjections.reduce((sum, data) => sum + data.projectedIncome, 0))}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              Próximos {projectionScope === '3m' ? '3' : projectionScope === '6m' ? '6' : '12'} meses
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm">Gastos Proyectados</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {formatCurrency(modifiedProjections.reduce((sum, data) => sum + data.projectedExpense, 0))}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              Próximos {projectionScope === '3m' ? '3' : projectionScope === '6m' ? '6' : '12'} meses
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <div className="flex items-center justify-between">
              <CardTitle className="text-sm">Balance Proyectado</CardTitle>
              {modifiedProjections.reduce((sum, data) => sum + (data.projectedIncome - data.projectedExpense), 0) >= 0 ? (
                <TrendingUp className="h-5 w-5 text-green-500" />
              ) : (
                <TrendingDown className="h-5 w-5 text-red-500" />
              )}
            </div>
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold ${modifiedProjections.reduce((sum, data) => sum + (data.projectedIncome - data.projectedExpense), 0) >= 0 ? "text-green-600" : "text-red-600"}`}>
              {formatCurrency(modifiedProjections.reduce((sum, data) => sum + (data.projectedIncome - data.projectedExpense), 0))}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              {modifiedProjections.reduce((sum, data) => sum + (data.projectedIncome - data.projectedExpense), 0) >= 0 
                ? "Flujo positivo" 
                : "Flujo negativo"}
            </p>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="cash-flow" className="space-y-4">
        <TabsList>
          <TabsTrigger value="cash-flow">Flujo de Caja</TabsTrigger>
          <TabsTrigger value="monthly">Ingresos vs Gastos</TabsTrigger>
          <TabsTrigger value="accumulated">Saldo Acumulado</TabsTrigger>
        </TabsList>

        <TabsContent value="cash-flow">
          <Card>
            <CardHeader>
              <CardTitle>Proyección de Flujo de Caja</CardTitle>
              <CardDescription>Ingresos menos gastos proyectados por mes</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={modifiedProjections.slice(0, projectionScope === '3m' ? 3 : projectionScope === '6m' ? 6 : 12)}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                    <Tooltip 
                      formatter={(value, name) => {
                        const formattedValue = formatCurrency(Number(value));
                        if (name === "projectedIncome") return [formattedValue, "Ingresos"];
                        if (name === "projectedExpense") return [formattedValue, "Gastos"];
                        if (name === "projectedBalance") return [formattedValue, "Balance"];
                        return [formattedValue, name];
                      }}
                    />
                    <Legend />
                    <Bar dataKey="projectedIncome" name="Ingresos" fill="#4ade80" />
                    <Bar dataKey="projectedExpense" name="Gastos" fill="#f87171" />
                    <ReferenceLine y={0} stroke="#000" />
                    <Line
                      type="monotone"
                      dataKey="projectedBalance"
                      name="Balance"
                      stroke="#60a5fa"
                      strokeWidth={2}
                      dot={{ r: 4 }}
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="monthly">
          <Card>
            <CardHeader>
              <CardTitle>Comparativa Mensual</CardTitle>
              <CardDescription>Evolución de ingresos y gastos por mes</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart
                    data={[
                      {
                        month: "Actual",
                        ingresos: currentData.ingresos,
                        gastos: currentData.gastos
                      },
                      ...modifiedProjections.slice(0, projectionScope === '3m' ? 3 : projectionScope === '6m' ? 6 : 12).map(data => ({
                        month: data.month,
                        ingresos: data.projectedIncome,
                        gastos: data.projectedExpense
                      }))
                    ]}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                    <Legend />
                    <Line
                      type="monotone"
                      dataKey="ingresos"
                      name="Ingresos"
                      stroke="#4ade80"
                      activeDot={{ r: 8 }}
                      strokeWidth={2}
                    />
                    <Line
                      type="monotone"
                      dataKey="gastos"
                      name="Gastos"
                      stroke="#f87171"
                      activeDot={{ r: 8 }}
                      strokeWidth={2}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="accumulated">
          <Card>
            <CardHeader>
              <CardTitle>Saldo Acumulado Proyectado</CardTitle>
              <CardDescription>Evolución del saldo disponible</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-[400px]">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart
                    data={[
                      { month: "Actual", accumulated: currentData.balance },
                      ...cumulativeData.slice(0, projectionScope === '3m' ? 3 : projectionScope === '6m' ? 6 : 12)
                    ]}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                    <Legend />
                    <ReferenceLine y={0} stroke="red" strokeDasharray="3 3" />
                    <Area
                      type="monotone"
                      dataKey="accumulated"
                      name="Saldo"
                      stroke="#4b4ce6"
                      fill="url(#colorAccumulated)"
                      activeDot={{ r: 8 }}
                    />
                    <defs>
                      <linearGradient id="colorAccumulated" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#4b4ce6" stopOpacity={0.8} />
                        <stop offset="95%" stopColor="#4b4ce6" stopOpacity={0.1} />
                      </linearGradient>
                    </defs>
                  </AreaChart>
                </ResponsiveContainer>
              </div>

              {runwayMonths < 6 && !isRunwayInfinite && (
                <div className="mt-4 bg-amber-50 border border-amber-200 p-4 rounded-lg">
                  <div className="flex items-start gap-3">
                    <AlertCircle className="text-amber-500 h-5 w-5 mt-0.5" />
                    <div>
                      <h4 className="font-medium text-amber-800">Alerta de Runway</h4>
                      <p className="text-sm text-amber-700 mt-1">
                        Tu saldo actual se agotará en aproximadamente {runway} meses al ritmo de gasto actual. 
                        {runwayMonths < 3 ? " Se recomienda acción inmediata para aumentar ingresos o reducir gastos." : 
                         " Considera estrategias para mejorar el flujo de caja."}
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      
      <Card>
        <CardHeader>
          <CardTitle>Análisis de Escenarios</CardTitle>
          <CardDescription>Comparación de resultados según diferentes proyecciones</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="h-[350px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="month" type="category" allowDuplicatedCategory={false} />
                <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                <Legend />
                
                {["optimistic", "conservative", "pessimistic"].map((scenario, index) => {
                  const multiplier = {
                    optimistic: { income: 1.15, expense: 0.95 },
                    conservative: { income: 1.0, expense: 1.0 },
                    pessimistic: { income: 0.85, expense: 1.1 }
                  }[scenario];
                  
                  const scenarioData = [
                    { month: "Actual", accumulated: currentData.balance },
                    ...projectionData.slice(0, projectionScope === '3m' ? 3 : projectionScope === '6m' ? 6 : 12).reduce((acc, curr, i) => {
                      const lastValue = acc.length > 0 ? acc[acc.length - 1].accumulated : currentData.balance;
                      const projIncome = curr.projectedIncome * multiplier.income;
                      const projExpense = curr.projectedExpense * multiplier.expense;
                      const newAccumulated = lastValue + (projIncome - projExpense);
                      
                      return [...acc, {
                        month: curr.month,
                        accumulated: newAccumulated
                      }];
                    }, [])
                  ];
                  
                  const colors = ["#4ade80", "#60a5fa", "#f87171"];
                  const scenarioNames = ["Optimista", "Conservador", "Pesimista"];
                  
                  return (
                    <Line
                      key={scenario}
                      data={scenarioData}
                      type="monotone"
                      dataKey="accumulated"
                      name={scenarioNames[index]}
                      stroke={colors[index]}
                      strokeWidth={scenario === projectionType ? 3 : 1.5}
                      dot={scenario === projectionType ? { r: 4 } : { r: 2 }}
                      activeDot={{ r: 8 }}
                      connectNulls
                    />
                  );
                })}
              </LineChart>
            </ResponsiveContainer>
          </div>
          
          <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="bg-green-50 p-3 rounded-lg">
              <h5 className="font-medium mb-1">Escenario Optimista</h5>
              <p className="text-muted-foreground">
                +15% ingresos, -5% gastos
              </p>
            </div>
            <div className="bg-blue-50 p-3 rounded-lg">
              <h5 className="font-medium mb-1">Escenario Conservador</h5>
              <p className="text-muted-foreground">
                Mantiene tendencias actuales
              </p>
            </div>
            <div className="bg-red-50 p-3 rounded-lg">
              <h5 className="font-medium mb-1">Escenario Pesimista</h5>
              <p className="text-muted-foreground">
                -15% ingresos, +10% gastos
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



================================================
FILE: src/components/income/add-income-dialog.tsx
================================================
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useToast } from "@/hooks/use-toast";
import {
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { CalendarIcon } from "lucide-react";
import { FileUpload } from "@/components/ui/file-upload";
import { CurrencyInput } from "@/components/ui/currency-input";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { cn } from "@/lib/utils";

const incomeFormSchema = z.object({
  type: z.string({
    required_error: "Seleccione un tipo de ingreso",
  }),
  description: z.string().min(3, "La descripción debe tener al menos 3 caracteres"),
  date: z.date({
    required_error: "La fecha es requerida",
  }),
  amount: z.number().min(1, "El monto debe ser mayor a 0"),
  currency: z.enum(["COP", "USD"] as const, {
    required_error: "Seleccione una moneda",
  }),
  client: z.string().optional(),
  paymentMethod: z.string({
    required_error: "Seleccione un método de pago",
  }),
  receipt: z.any().optional(),
  notes: z.string().optional(),
});

export function AddIncomeDialog({ open, onOpenChange, trigger }) {
  const { toast } = useToast();
  const form = useForm<z.infer<typeof incomeFormSchema>>({
    resolver: zodResolver(incomeFormSchema),
    defaultValues: {
      type: "",
      description: "",
      date: new Date(),
      amount: 0,
      currency: "COP",
      client: "",
      paymentMethod: "",
      notes: "",
    },
  });

  const onSubmit = (data: z.infer<typeof incomeFormSchema>) => {
    console.log("Nuevo ingreso:", data);
    toast({
      title: "Ingreso registrado",
      description: "El ingreso ha sido registrado correctamente",
    });
    form.reset();
    onOpenChange(false);
  };

  const incomeTypes = [
    "Cliente",
    "Aporte de socio",
    "Extraordinario",
    "Devolución Impuestos",
    "Otros",
  ];

  const clients = [
    "Cliente A",
    "Cliente B",
    "Cliente C",
    "Cliente D",
    "Cliente E",
  ];

  const paymentMethods = [
    "Efectivo",
    "Transferencia",
    "Tarjeta de Crédito",
    "Tarjeta de Débito",
    "PayPal",
    "Nequi",
    "Daviplata",
  ];

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogTrigger asChild>
        {trigger}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Registrar Nuevo Ingreso</DialogTitle>
          <DialogDescription>
            Completa el formulario para registrar un nuevo ingreso
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Tipo de Ingreso</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Seleccionar tipo" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {incomeTypes.map((type) => (
                          <SelectItem key={type} value={type}>
                            {type}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="form-required">Descripción</FormLabel>
                    <FormControl>
                      <Input placeholder="Descripción del ingreso" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="date"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel className="form-required">Fecha</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant={"outline"}
                            className={cn(
                              "w-full pl-3 text-left font-normal",
                              !field.value && "text-muted-foreground"
                            )}
                          >
                            {field.value ? (
                              format(field.value, "PPP", { locale: es })
                            ) : (
                              <span>Seleccionar fecha</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          initialFocus
                          className={cn("p-3 pointer-events-auto")}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-2 gap-2">
                <FormField
                  control={form.control}
                  name="amount"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="form-required">Monto</FormLabel>
                      <FormControl>
                        <CurrencyInput
                          onValueChange={field.onChange}
                          value={field.value}
                          showCurrencySelector={false}
                          currency={form.watch("currency")}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="currency"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="form-required">Moneda</FormLabel>
                      <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Moneda" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="COP">COP</SelectItem>
                          <SelectItem value="USD">USD</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            <FormField
              control={form.control}
              name="client"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Cliente</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Seleccionar cliente (opcional)" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {clients.map((client) => (
                        <SelectItem key={client} value={client}>
                          {client}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormDescription>Opcional para ingresos por clientes</FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="paymentMethod"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="form-required">Método de Pago</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Seleccionar método" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {paymentMethods.map((method) => (
                        <SelectItem key={method} value={method}>
                          {method}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="receipt"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Comprobante</FormLabel>
                  <FormControl>
                    <FileUpload
                      onFileSelect={(file) => field.onChange(file)}
                      acceptedFileTypes=".pdf,.jpg,.jpeg,.png"
                      maxFileSizeMB={5}
                    />
                  </FormControl>
                  <FormDescription>
                    Formatos aceptados: PDF, JPG, PNG. Máx 5MB
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="notes"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Notas</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Notas adicionales (opcional)"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
              >
                Cancelar
              </Button>
              <Button type="submit">Guardar</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: src/components/income/income-analysis.tsx
================================================

import { useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { formatCurrency, convertCurrency, Currency } from "@/lib/utils";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { monthlyData, incomesData } from "./income-data";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export function IncomeAnalysis() {
  const [displayCurrency, setDisplayCurrency] = useState<Currency>("COP");

  // Convert values based on selected currency
  const totalMonth = incomesData
    .filter(income => {
      const incomeDate = new Date(income.date);
      const now = new Date();
      return incomeDate.getMonth() === now.getMonth() && 
             incomeDate.getFullYear() === now.getFullYear();
    })
    .reduce((acc, income) => {
      const amount = displayCurrency === income.currency 
        ? income.amount 
        : convertCurrency(income.amount, income.currency, displayCurrency);
      return acc + amount;
    }, 0);

  const avgMonth = monthlyData.reduce((acc, month) => acc + month.ingresos, 0) / monthlyData.length;
  const avgMonthConverted = displayCurrency === "COP" 
    ? avgMonth 
    : convertCurrency(avgMonth, "COP", "USD");

  const clientIncome = incomesData
    .filter(income => income.type === "Cliente")
    .reduce((acc, income) => {
      const amount = displayCurrency === income.currency 
        ? income.amount 
        : convertCurrency(income.amount, income.currency, displayCurrency);
      return acc + amount;
    }, 0);

  return (
    <div className="grid gap-4">
      <div className="flex justify-end">
        <Select value={displayCurrency} onValueChange={(value: Currency) => setDisplayCurrency(value)}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Moneda de visualización" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="COP">Pesos Colombianos (COP)</SelectItem>
            <SelectItem value="USD">Dólares (USD)</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="bg-gradient-to-br from-blue-50 to-indigo-50">
          <CardHeader className="pb-2">
            <CardTitle className="text-base">Total del Mes</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-700">
              {formatCurrency(25600000)}
            </div>
            <p className="text-xs text-blue-600/80">Junio 2023</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-green-50 to-emerald-50">
          <CardHeader className="pb-2">
            <CardTitle className="text-base">Promedio Mensual</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-700">
              {formatCurrency(20750000)}
            </div>
            <p className="text-xs text-green-600/80">Últimos 6 meses</p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-purple-50 to-pink-50">
          <CardHeader className="pb-2">
            <CardTitle className="text-base">Por Cliente</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-700">
              {formatCurrency(15600000)}
            </div>
            <p className="text-xs text-purple-600/80">60.9% del total</p>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Análisis de Ingresos Mensuales</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[400px] mt-4">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={monthlyData.map(month => ({
                  ...month,
                  ingresos: displayCurrency === "COP" 
                    ? month.ingresos 
                    : convertCurrency(month.ingresos, "COP", "USD")
                }))}
                margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
              >
                <CartesianGrid strokeDasharray="3 3" className="stroke-gray-200" />
                <XAxis dataKey="month" />
                <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                <Tooltip
                  formatter={(value) => [formatCurrency(Number(value)), "Ingresos"]}
                  contentStyle={{
                    backgroundColor: "white",
                    border: "1px solid #e2e8f0",
                    borderRadius: "0.5rem",
                    boxShadow: "0 4px 6px -1px rgb(0 0 0 / 0.1)",
                  }}
                />
                <Bar
                  dataKey="ingresos"
                  fill="url(#colorGradient)"
                  radius={[4, 4, 0, 0]}
                />
                <defs>
                  <linearGradient id="colorGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#4F46E5" stopOpacity={0.8}/>
                    <stop offset="95%" stopColor="#818CF8" stopOpacity={0.8}/>
                  </linearGradient>
                </defs>
              </BarChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}



================================================
FILE: src/components/income/income-data.ts
================================================

import { Currency } from "@/lib/utils";

export const incomesData = [
  {
    id: 1,
    description: "Pago Proyecto Dashboard",
    date: new Date("2023-06-18"),
    amount: 7500000,
    type: "Cliente",
    client: "Cliente A",
    paymentMethod: "Transferencia",
    receipt: "comprobante-pago-a.pdf",
    notes: "Primer entregable",
    currency: "COP" as Currency,
  },
  {
    id: 2,
    description: "Pago Mensual Mantenimiento",
    date: new Date("2023-06-15"),
    amount: 3800000,
    type: "Cliente",
    client: "Cliente B",
    paymentMethod: "Transferencia",
    receipt: "comprobante-pago-b.pdf",
    notes: "",
    currency: "COP" as Currency,
  },
  {
    id: 3,
    description: "Consultoría UX/UI",
    date: new Date("2023-06-10"),
    amount: 2500000,
    type: "Cliente",
    client: "Cliente C",
    paymentMethod: "Transferencia",
    receipt: "comprobante-pago-c.pdf",
    notes: "Proyecto eCommerce",
    currency: "COP" as Currency,
  },
  {
    id: 4,
    description: "Aporte Capital",
    date: new Date("2023-06-05"),
    amount: 10000000,
    type: "Aporte de socio",
    client: "-",
    paymentMethod: "Transferencia",
    receipt: "comprobante-aporte.pdf",
    notes: "Inversión expansión",
    currency: "COP" as Currency,
  },
  {
    id: 5,
    description: "Desarrollo Landing Page",
    date: new Date("2023-06-03"),
    amount: 1800000,
    type: "Cliente",
    client: "Cliente D",
    paymentMethod: "Tarjeta de Crédito",
    receipt: "factura-cliente-d.pdf",
    notes: "",
    currency: "COP" as Currency,
  },
];

export const monthlyData = [
  { month: "Ene", ingresos: 18700000 },
  { month: "Feb", ingresos: 19500000 },
  { month: "Mar", ingresos: 17600000 },
  { month: "Abr", ingresos: 20800000 },
  { month: "May", ingresos: 22300000 },
  { month: "Jun", ingresos: 25600000 },
];



================================================
FILE: src/components/income/income-list.tsx
================================================

import { useState } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { DataTable } from "@/components/ui/data-table";
import { Button } from "@/components/ui/button";
import { Download, FileText } from "lucide-react";
import { formatCurrency, convertCurrency, Currency } from "@/lib/utils";
import { incomesData } from "./income-data";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export function IncomeList() {
  const [displayCurrency, setDisplayCurrency] = useState<Currency>("COP");

  const incomeColumns = [
    {
      accessorKey: "description",
      header: "Descripción",
    },
    {
      accessorKey: "date",
      header: "Fecha",
      cell: ({ row }) => {
        const date = new Date(row.original.date);
        return new Intl.DateTimeFormat('es-CO').format(date);
      },
    },
    {
      accessorKey: "amount",
      header: "Monto",
      cell: ({ row }) => {
        const originalAmount = row.original.amount;
        const originalCurrency = row.original.currency;
        const amount = displayCurrency === originalCurrency 
          ? originalAmount 
          : convertCurrency(originalAmount, originalCurrency, displayCurrency);

        return (
          <div className="flex items-center space-x-2">
            <span className="text-green-600 font-medium">
              {formatCurrency(amount, displayCurrency)}
            </span>
            {displayCurrency !== originalCurrency && (
              <span className="text-xs text-gray-500">
                (Original: {formatCurrency(originalAmount, originalCurrency)})
              </span>
            )}
          </div>
        );
      },
    },
    {
      accessorKey: "type",
      header: "Tipo",
      cell: ({ row }) => (
        <div className="inline-flex items-center rounded-full bg-blue-50 px-2.5 py-0.5 text-xs font-medium text-blue-800">
          {row.original.type}
        </div>
      ),
    },
    {
      accessorKey: "client",
      header: "Cliente",
      cell: ({ row }) => (
        <span className={row.original.client === "-" ? "text-gray-400" : ""}>
          {row.original.client}
        </span>
      ),
    },
    {
      accessorKey: "paymentMethod",
      header: "Método de Pago",
    },
    {
      accessorKey: "receipt",
      header: "Comprobante",
      cell: ({ row }) => (
        <Button variant="ghost" size="sm" className="w-full justify-start">
          <FileText className="h-4 w-4 mr-2" />
          Ver
        </Button>
      ),
    },
  ];

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
        <div>
          <CardTitle>Ingresos Registrados</CardTitle>
          <CardDescription>
            Control y seguimiento de todos los ingresos
          </CardDescription>
        </div>
        <Select value={displayCurrency} onValueChange={(value: Currency) => setDisplayCurrency(value)}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Moneda de visualización" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="COP">Pesos Colombianos (COP)</SelectItem>
            <SelectItem value="USD">Dólares (USD)</SelectItem>
          </SelectContent>
        </Select>
      </CardHeader>
      <CardContent>
        <DataTable
          columns={incomeColumns}
          data={incomesData}
          searchColumn="description"
          searchPlaceholder="Buscar ingresos..."
        />
      </CardContent>
      <CardFooter>
        <Button variant="outline">
          <Download className="h-4 w-4 mr-2" />
          Exportar Excel
        </Button>
      </CardFooter>
    </Card>
  );
}



================================================
FILE: src/components/income/income-tabs.tsx
================================================

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { IncomeList } from "./income-list";
import { IncomeAnalysis } from "./income-analysis";

export function IncomeTabs() {
  return (
    <Tabs defaultValue="list" className="space-y-6">
      <TabsList className="grid grid-cols-2 w-full max-w-[400px]">
        <TabsTrigger value="list">Ingresos</TabsTrigger>
        <TabsTrigger value="analysis">Análisis</TabsTrigger>
      </TabsList>
      
      <TabsContent value="list">
        <IncomeList />
      </TabsContent>
      
      <TabsContent value="analysis">
        <IncomeAnalysis />
      </TabsContent>
    </Tabs>
  );
}



================================================
FILE: src/components/layout/AppLayout.tsx
================================================

import React, { useState } from "react";
import { Sidebar } from "./Sidebar";
import { Outlet } from "react-router-dom";
import { MenuIcon, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { useIsMobile } from "@/hooks/use-mobile";

export const AppLayout = () => {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const isMobile = useIsMobile();

  return (
    <div className="flex h-screen overflow-hidden bg-background">
      {/* Sidebar */}
      <Sidebar open={sidebarOpen} setOpen={setSidebarOpen} />

      {/* Main Content */}
      <div className="flex flex-col flex-1 w-full overflow-hidden">
        {/* Header */}
        <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-4 sm:px-6">
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={() => setSidebarOpen(!sidebarOpen)}
          >
            <MenuIcon className="h-6 w-6" />
            <span className="sr-only">Toggle menu</span>
          </Button>
          <div className="flex-1 flex items-center">
            <h1 className="text-lg font-semibold md:text-xl">
              Sistema de Control Financiero
            </h1>
          </div>
        </header>

        {/* Mobile overlay */}
        {isMobile && sidebarOpen && (
          <div
            className="fixed inset-0 z-20 bg-black/50"
            onClick={() => setSidebarOpen(false)}
          />
        )}

        {/* Content area */}
        <main 
          className={cn(
            "flex-1 overflow-auto p-4 md:p-6",
            isMobile && sidebarOpen && "blur-sm"
          )}
        >
          <Outlet />
        </main>
      </div>
    </div>
  );
};



================================================
FILE: src/components/layout/Sidebar.tsx
================================================

import React, { Dispatch, SetStateAction } from "react";
import { NavLink } from "react-router-dom";
import { cn } from "@/lib/utils";
import {
  LayoutDashboard,
  ReceiptText,
  Wallet,
  Users,
  TrendingUp,
  BarChart4,
  X,
  LogOut
} from "lucide-react";
import { useIsMobile } from "@/hooks/use-mobile";
import { Button } from "../ui/button";

interface SidebarProps {
  open: boolean;
  setOpen: Dispatch<SetStateAction<boolean>>;
}

const SidebarLink = ({ to, icon: Icon, children }: { to: string; icon: React.ElementType; children: React.ReactNode }) => (
  <NavLink
    to={to}
    className={({ isActive }) =>
      cn(
        "flex items-center gap-3 rounded-md px-3 py-2 text-sm transition-all hover:text-white",
        isActive
          ? "bg-irrelevant-600 text-white"
          : "text-gray-400 hover:bg-irrelevant-800"
      )
    }
  >
    <Icon className="h-5 w-5" />
    <span>{children}</span>
  </NavLink>
);

export function Sidebar({ open, setOpen }: SidebarProps) {
  const isMobile = useIsMobile();

  return (
    <aside
      className={cn(
        "bg-irrelevant-950 text-white z-30 h-full w-64 shrink-0 border-r border-sidebar-border overflow-y-auto transition-all duration-300",
        isMobile && "fixed",
        isMobile && !open && "-translate-x-full"
      )}
    >
      <div className="flex h-16 items-center justify-between border-b border-sidebar-border px-4">
        <div className="font-bold text-xl">irrelevant</div>
        {isMobile && (
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setOpen(false)}
            className="text-white hover:bg-sidebar-accent"
          >
            <X className="h-5 w-5" />
            <span className="sr-only">Cerrar menú</span>
          </Button>
        )}
      </div>
      <nav className="flex flex-col gap-1 p-4">
        <SidebarLink to="/" icon={LayoutDashboard}>
          Dashboard
        </SidebarLink>
        <SidebarLink to="/gastos" icon={ReceiptText}>
          Gastos
        </SidebarLink>
        <SidebarLink to="/ingresos" icon={Wallet}>
          Ingresos
        </SidebarLink>
        <SidebarLink to="/clientes" icon={Users}>
          Clientes y Proyectos
        </SidebarLink>
        <SidebarLink to="/caja" icon={TrendingUp}>
          Caja
        </SidebarLink>
        <SidebarLink to="/reportes" icon={BarChart4}>
          Reportes Financieros
        </SidebarLink>
      </nav>
      <div className="mt-auto p-4 border-t border-sidebar-border">
        <Button variant="ghost" className="w-full justify-start text-gray-400 hover:text-white hover:bg-irrelevant-800">
          <LogOut className="mr-2 h-5 w-5" />
          Cerrar Sesión
        </Button>
      </div>
    </aside>
  );
}



================================================
FILE: src/components/ui/accordion.tsx
================================================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }



================================================
FILE: src/components/ui/alert-dialog.tsx
================================================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



================================================
FILE: src/components/ui/alert.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



================================================
FILE: src/components/ui/aspect-ratio.tsx
================================================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }



================================================
FILE: src/components/ui/avatar.tsx
================================================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }



================================================
FILE: src/components/ui/badge.tsx
================================================

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-red-100 text-red-800 hover:bg-red-200/80",
        outline: "text-foreground",
        success:
          "border-transparent bg-green-100 text-green-800 hover:bg-green-200/80",
        warning:
          "border-transparent bg-yellow-100 text-yellow-800 hover:bg-yellow-200/80",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



================================================
FILE: src/components/ui/breadcrumb.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}



================================================
FILE: src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================
FILE: src/components/ui/calendar.tsx
================================================
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };



================================================
FILE: src/components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================
FILE: src/components/ui/carousel.tsx
================================================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}



================================================
FILE: src/components/ui/chart.tsx
================================================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}



================================================
FILE: src/components/ui/checkbox.tsx
================================================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }



================================================
FILE: src/components/ui/collapsible.tsx
================================================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }



================================================
FILE: src/components/ui/command.tsx
================================================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}



================================================
FILE: src/components/ui/context-menu.tsx
================================================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}



================================================
FILE: src/components/ui/currency-input.tsx
================================================

import React from "react";
import { Input } from "./input";
import { cn } from "@/lib/utils";
import { Currency, CURRENCIES } from "@/lib/utils";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./select";

interface CurrencyInputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  onValueChange?: (value: number) => void;
  currency?: Currency;
  onCurrencyChange?: (currency: Currency) => void;
  showCurrencySelector?: boolean;
  label?: string;
}

export const CurrencyInput = React.forwardRef<
  HTMLInputElement,
  CurrencyInputProps
>(({ 
  className, 
  onValueChange, 
  value, 
  currency = "COP",
  onCurrencyChange,
  showCurrencySelector = false,
  label,
  ...props 
}, ref) => {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    // Handle either currency format - remove all non-digit characters except decimal point
    const rawValue = e.target.value.replace(/[^\d.]/g, "");
    
    // Handle decimal precision based on currency
    const decimalPlaces = CURRENCIES[currency].decimalPlaces;
    let numericValue: number;
    
    if (rawValue.includes('.')) {
      const parts = rawValue.split('.');
      const integerPart = parts[0] || '0';
      const decimalPart = parts[1]?.substring(0, decimalPlaces) || '';
      numericValue = parseFloat(`${integerPart}.${decimalPart}`);
    } else {
      numericValue = parseFloat(rawValue) || 0;
    }
    
    if (onValueChange) {
      onValueChange(numericValue);
    }
    
    if (props.onChange) {
      props.onChange(e);
    }
  };

  // Format for display based on selected currency
  const displayValue = value 
    ? new Intl.NumberFormat(CURRENCIES[currency].locale, {
        minimumFractionDigits: CURRENCIES[currency].decimalPlaces,
        maximumFractionDigits: CURRENCIES[currency].decimalPlaces
      }).format(Number(value))
    : '';

  const currencySymbol = CURRENCIES[currency].symbol;

  return (
    <div className="space-y-2">
      {label && (
        <label className="text-sm font-medium block">{label}</label>
      )}
      <div className="flex gap-2">
        {showCurrencySelector && onCurrencyChange && (
          <Select 
            value={currency} 
            onValueChange={(val) => onCurrencyChange(val as Currency)}
          >
            <SelectTrigger className="w-[90px]">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="COP">COP</SelectItem>
              <SelectItem value="USD">USD</SelectItem>
            </SelectContent>
          </Select>
        )}
        <div className="relative flex items-center flex-1">
          <span className="absolute left-3 text-gray-500">{currencySymbol}</span>
          <Input
            {...props}
            className={cn("pl-8", className)}
            value={displayValue}
            onChange={handleChange}
            type="text"
            inputMode="decimal"
            ref={ref}
          />
        </div>
      </div>
    </div>
  );
});

CurrencyInput.displayName = "CurrencyInput";



================================================
FILE: src/components/ui/data-table.tsx
================================================

import React from "react";
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  SortingState,
  useReactTable,
  getFilteredRowModel,
  ColumnFiltersState,
} from "@tanstack/react-table";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  searchPlaceholder?: string;
  searchColumn?: string;
}

export function DataTable<TData, TValue>({
  columns,
  data,
  searchPlaceholder = "Buscar...",
  searchColumn,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);
  const [rowsPerPage, setRowsPerPage] = React.useState(10);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
      pagination: {
        pageSize: rowsPerPage,
        pageIndex: 0,
      },
    },
  });

  return (
    <div className="w-full">
      {searchColumn && (
        <div className="flex items-center py-4">
          <Input
            placeholder={searchPlaceholder}
            value={(table.getColumn(searchColumn)?.getFilterValue() as string) ?? ""}
            onChange={(event) =>
              table.getColumn(searchColumn)?.setFilterValue(event.target.value)
            }
            className="max-w-sm"
          />
        </div>
      )}
      <div className="rounded-md border bg-white">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder ? null : (
                      <div
                        className={header.column.getCanSort() ? "cursor-pointer select-none" : ""}
                        onClick={header.column.getToggleSortingHandler()}
                      >
                        {flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                        {{
                          asc: " 🔼",
                          desc: " 🔽",
                        }[header.column.getIsSorted() as string] ?? null}
                      </div>
                    )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  data-state={row.getIsSelected() && "selected"}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No hay resultados.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-between space-x-2 py-4">
        <div className="flex items-center space-x-2">
          <p className="text-sm text-muted-foreground">
            Filas por página:
          </p>
          <Select
            value={String(rowsPerPage)}
            onValueChange={(value) => setRowsPerPage(Number(value))}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue>{rowsPerPage}</SelectValue>
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="5">5</SelectItem>
              <SelectItem value="10">10</SelectItem>
              <SelectItem value="20">20</SelectItem>
              <SelectItem value="50">50</SelectItem>
            </SelectContent>
          </Select>
          <div className="flex-1 text-sm text-muted-foreground">
            {table.getFilteredRowModel().rows.length} registro(s)
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Anterior
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
          >
            Siguiente
          </Button>
        </div>
      </div>
    </div>
  );
}



================================================
FILE: src/components/ui/date-range-picker.tsx
================================================

import * as React from "react";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import { Calendar as CalendarIcon } from "lucide-react";
import { DateRange } from "react-day-picker";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";

interface DatePickerWithRangeProps {
  value?: DateRange;
  onChange?: (date: DateRange) => void;
  className?: string;
}

export function DatePickerWithRange({
  value,
  onChange,
  className,
}: DatePickerWithRangeProps) {
  const [date, setDate] = React.useState<DateRange | undefined>(value);

  const handleValueChange = (range: DateRange | undefined) => {
    setDate(range);
    if (onChange) {
      onChange(range as DateRange);
    }
  };

  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            size="sm"
            className={cn(
              "w-[300px] justify-start text-left font-normal",
              !date && "text-muted-foreground"
            )}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date?.from ? (
              date.to ? (
                <>
                  {format(date.from, "LLL dd, y", { locale: es })} -{" "}
                  {format(date.to, "LLL dd, y", { locale: es })}
                </>
              ) : (
                format(date.from, "LLL dd, y", { locale: es })
              )
            ) : (
              <span>Seleccionar rango de fechas</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={date?.from}
            selected={date}
            onSelect={handleValueChange}
            numberOfMonths={2}
            locale={es}
          />
        </PopoverContent>
      </Popover>
    </div>
  );
}



================================================
FILE: src/components/ui/dialog.tsx
================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================
FILE: src/components/ui/drawer.tsx
================================================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}



================================================
FILE: src/components/ui/dropdown-menu.tsx
================================================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}



================================================
FILE: src/components/ui/file-upload.tsx
================================================

import React, { useCallback, useState } from "react";
import { cn } from "@/lib/utils";
import { Upload, X } from "lucide-react";
import { Button } from "./button";

interface FileUploadProps {
  onFileSelect: (file: File | null) => void;
  acceptedFileTypes?: string;
  maxFileSizeMB?: number;
  className?: string;
  buttonText?: string;
  selectedFile?: File | null;
}

export function FileUpload({
  onFileSelect,
  acceptedFileTypes = ".pdf,.jpg,.jpeg,.png",
  maxFileSizeMB = 5,
  className,
  buttonText = "Seleccionar archivo",
  selectedFile = null,
}: FileUploadProps) {
  const [file, setFile] = useState<File | null>(selectedFile);
  const [isDragging, setIsDragging] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleFileSelect = useCallback(
    (selectedFile: File | null) => {
      if (!selectedFile) {
        setFile(null);
        onFileSelect(null);
        return;
      }

      // Check file type
      const fileExtension = `.${selectedFile.name.split(".").pop()?.toLowerCase()}`;
      const isValidType = acceptedFileTypes
        .split(",")
        .some(type => type.trim() === fileExtension || type.trim() === selectedFile.type);

      if (!isValidType) {
        setError(`Tipo de archivo no permitido. Use: ${acceptedFileTypes}`);
        return;
      }

      // Check file size
      const maxSizeBytes = maxFileSizeMB * 1024 * 1024;
      if (selectedFile.size > maxSizeBytes) {
        setError(`El archivo excede el tamaño máximo de ${maxFileSizeMB}MB`);
        return;
      }

      setError(null);
      setFile(selectedFile);
      onFileSelect(selectedFile);
    },
    [acceptedFileTypes, maxFileSizeMB, onFileSelect]
  );

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback(() => {
    setIsDragging(false);
  }, []);

  const handleDrop = useCallback(
    (e: React.DragEvent) => {
      e.preventDefault();
      setIsDragging(false);
      
      if (e.dataTransfer.files.length) {
        handleFileSelect(e.dataTransfer.files[0]);
      }
    },
    [handleFileSelect]
  );

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const removeFile = () => {
    setFile(null);
    onFileSelect(null);
  };

  return (
    <div className={className}>
      <div
        className={cn(
          "file-upload-area",
          isDragging && "dragging",
          className
        )}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        {file ? (
          <div className="flex flex-col items-center justify-center gap-2">
            <div className="flex items-center justify-between w-full bg-secondary rounded p-2">
              <span className="text-sm truncate max-w-[200px]">{file.name}</span>
              <Button variant="ghost" size="sm" onClick={removeFile}>
                <X className="h-4 w-4" />
              </Button>
            </div>
            <div className="text-xs text-muted-foreground">
              {(file.size / 1024 / 1024).toFixed(2)} MB
            </div>
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center gap-2">
            <Upload className="h-8 w-8 text-muted-foreground" />
            <p className="text-sm font-medium">
              Arrastre y suelte, o haga clic para seleccionar
            </p>
            <p className="text-xs text-muted-foreground">
              Archivos permitidos: {acceptedFileTypes.replace(/\./g, "")}
            </p>
            <p className="text-xs text-muted-foreground">
              Tamaño máximo: {maxFileSizeMB}MB
            </p>
            <Button variant="secondary" size="sm" className="mt-2">
              <label htmlFor="file-upload" className="cursor-pointer">
                {buttonText}
              </label>
            </Button>
          </div>
        )}
        <input
          id="file-upload"
          type="file"
          className="sr-only"
          onChange={handleInputChange}
          accept={acceptedFileTypes}
        />
      </div>
      {error && <p className="text-sm text-destructive mt-1">{error}</p>}
    </div>
  );
}



================================================
FILE: src/components/ui/form.tsx
================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}



================================================
FILE: src/components/ui/hover-card.tsx
================================================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }



================================================
FILE: src/components/ui/input-otp.tsx
================================================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



================================================
FILE: src/components/ui/input.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }



================================================
FILE: src/components/ui/label.tsx
================================================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================
FILE: src/components/ui/menubar.tsx
================================================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}



================================================
FILE: src/components/ui/navigation-menu.tsx
================================================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}



================================================
FILE: src/components/ui/page-header.tsx
================================================

import React from "react";
import { cn } from "@/lib/utils";

interface PageHeaderProps {
  title: string;
  description?: string;
  children?: React.ReactNode;
  className?: string;
}

export function PageHeader({ 
  title, 
  description, 
  children, 
  className 
}: PageHeaderProps) {
  return (
    <div className={cn("mb-6", className)}>
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">{title}</h1>
          {description && (
            <p className="text-muted-foreground">{description}</p>
          )}
        </div>
        {children && <div className="flex items-center gap-2">{children}</div>}
      </div>
    </div>
  );
}



================================================
FILE: src/components/ui/pagination.tsx
================================================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}



================================================
FILE: src/components/ui/popover.tsx
================================================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



================================================
FILE: src/components/ui/progress.tsx
================================================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



================================================
FILE: src/components/ui/radio-group.tsx
================================================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }



================================================
FILE: src/components/ui/resizable.tsx
================================================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }



================================================
FILE: src/components/ui/scroll-area.tsx
================================================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }



================================================
FILE: src/components/ui/select.tsx
================================================

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}



================================================
FILE: src/components/ui/separator.tsx
================================================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



================================================
FILE: src/components/ui/sheet.tsx
================================================
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}




================================================
FILE: src/components/ui/sidebar.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



================================================
FILE: src/components/ui/skeleton.tsx
================================================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }



================================================
FILE: src/components/ui/slider.tsx
================================================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }



================================================
FILE: src/components/ui/sonner.tsx
================================================
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }



================================================
FILE: src/components/ui/stats-card.tsx
================================================

import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { InfoIcon } from "lucide-react";
import { convertCurrency, Currency, formatCurrency } from "@/lib/utils";

interface StatsCardProps {
  title: string;
  value: string | number;
  description?: string;
  icon?: React.ReactNode;
  trend?: "up" | "down" | "neutral";
  trendValue?: string;
  className?: string;
  currencySymbol?: string;
  originalCurrency?: Currency;
  displayCurrency?: Currency;
  originalValue?: number;
  showConversionInfo?: boolean;
}

export function StatsCard({
  title,
  value,
  description,
  icon,
  trend,
  trendValue,
  className,
  currencySymbol,
  originalCurrency,
  displayCurrency,
  originalValue,
  showConversionInfo = true,
}: StatsCardProps) {
  // If currency conversion info should be shown
  const showConversion = showConversionInfo && 
                         originalCurrency && 
                         displayCurrency && 
                         originalCurrency !== displayCurrency && 
                         typeof originalValue === "number";

  return (
    <Card className={className}>
      <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2 bg-muted/20">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        {icon && <div className="h-4 w-4 text-muted-foreground">{icon}</div>}
      </CardHeader>
      <CardContent className="pt-6">
        <div className="text-2xl font-bold flex items-center">
          {currencySymbol && <span className="mr-1">{currencySymbol}</span>}
          <span>{value}</span>
          
          {showConversion && (
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <span className="ml-2 cursor-help">
                    <InfoIcon className="h-4 w-4 text-muted-foreground" />
                  </span>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Original: {formatCurrency(originalValue, originalCurrency)}</p>
                  <p>Valor convertido usando tasa aproximada</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          )}
        </div>
        
        {description && (
          <p className="text-xs text-muted-foreground">{description}</p>
        )}
        
        {trend && (
          <div
            className={`flex items-center text-xs ${
              trend === "up" 
                ? "text-green-500" 
                : trend === "down" 
                  ? "text-red-500" 
                  : "text-gray-500"
            }`}
          >
            {trend === "up" 
              ? "↑" 
              : trend === "down" 
                ? "↓" 
                : "→"} {trendValue}
          </div>
        )}
      </CardContent>
    </Card>
  );
}

export default StatsCard;



================================================
FILE: src/components/ui/switch.tsx
================================================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }



================================================
FILE: src/components/ui/table.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



================================================
FILE: src/components/ui/tabs.tsx
================================================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
FILE: src/components/ui/textarea.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }



================================================
FILE: src/components/ui/toast.tsx
================================================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



================================================
FILE: src/components/ui/toaster.tsx
================================================
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



================================================
FILE: src/components/ui/toggle-group.tsx
================================================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }



================================================
FILE: src/components/ui/toggle.tsx
================================================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }



================================================
FILE: src/components/ui/tooltip.tsx
================================================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



================================================
FILE: src/components/ui/use-toast.ts
================================================
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };



================================================
FILE: src/hooks/use-clients-data.tsx
================================================

import { useState, useEffect } from 'react';
import { Client } from '@/types/clients';

// Datos de ejemplo para clientes
const INITIAL_CLIENTS: Client[] = [
  {
    id: 1,
    name: "Empresa Innovadora S.A.S",
    contactName: "Carlos Rodríguez",
    email: "carlos@empresainnovadora.com",
    phone: "315 789 1234",
    address: "Calle 85 # 11-53, Oficina 401, Bogotá",
    taxId: "901.234.567-8",
    startDate: new Date("2023-03-15"),
    status: "Activo",
    notes: "Cliente prioritario, necesita atención VIP",
    documents: [
      {
        id: 1,
        name: "RUT Empresa Innovadora",
        type: "RUT",
        url: "#",
        uploadDate: new Date("2023-03-15"),
      },
      {
        id: 2,
        name: "Cámara de Comercio Actualizada",
        type: "Cámara de Comercio",
        url: "#",
        uploadDate: new Date("2023-04-02"),
      },
      {
        id: 3,
        name: "Contrato Marco de Servicios",
        type: "Contrato",
        url: "#",
        uploadDate: new Date("2023-04-10"),
      },
    ],
  },
  {
    id: 2,
    name: "Distribuciones Comerciales Ltda.",
    contactName: "Ana Martínez",
    email: "ana.martinez@discocom.com",
    phone: "310 567 8901",
    taxId: "800.123.456-7",
    startDate: new Date("2023-01-20"),
    status: "Activo",
    documents: [
      {
        id: 4,
        name: "RUT Distribuciones Comerciales",
        type: "RUT",
        url: "#",
        uploadDate: new Date("2023-01-20"),
      },
    ],
  },
  {
    id: 3,
    name: "Consultores Asociados S.A.",
    contactName: "Fernando Gómez",
    email: "fgomez@consultoresasoc.com",
    phone: "320 234 5678",
    address: "Av. El Dorado # 68D-35, Piso 3, Bogotá",
    startDate: new Date("2022-11-05"),
    status: "Pausado",
    notes: "Contrato en pausa por reestructuración interna del cliente",
    documents: [],
  },
  {
    id: 4,
    name: "Tecnología Avanzada C.A.",
    contactName: "Luisa Torres",
    email: "ltorres@tecavanzada.com",
    phone: "300 456 7890",
    taxId: "830.567.890-1",
    startDate: new Date("2022-08-15"),
    status: "Terminado",
    documents: [
      {
        id: 5,
        name: "Cámara de Comercio",
        type: "Cámara de Comercio",
        url: "#",
        uploadDate: new Date("2022-08-15"),
      },
      {
        id: 6,
        name: "Acuerdo de Confidencialidad",
        type: "NDA",
        url: "#",
        uploadDate: new Date("2022-08-20"),
      },
    ],
  },
];

export function useClientsData() {
  const [clients, setClients] = useState<Client[]>(INITIAL_CLIENTS);
  
  const getClientById = (id: number) => {
    return clients.find(client => client.id === id);
  };
  
  const addClient = (newClient: Omit<Client, "id" | "documents">) => {
    const client: Client = {
      ...newClient,
      id: clients.length > 0 ? Math.max(...clients.map(c => c.id)) + 1 : 1,
      documents: [],
    };
    
    setClients([...clients, client]);
    return client;
  };
  
  const updateClient = (id: number, updatedData: Partial<Client>) => {
    setClients(clients.map(client => 
      client.id === id ? { ...client, ...updatedData } : client
    ));
  };
  
  const addDocument = (
    clientId: number, 
    document: Omit<Client["documents"][0], "id">
  ) => {
    const client = getClientById(clientId);
    if (!client) return;
    
    const newDoc = {
      ...document,
      id: client.documents.length > 0 
        ? Math.max(...client.documents.map(d => d.id)) + 1 
        : 1,
    };
    
    updateClient(clientId, {
      documents: [...client.documents, newDoc],
    });
    
    return newDoc;
  };
  
  const removeDocument = (clientId: number, documentId: number) => {
    const client = getClientById(clientId);
    if (!client) return;
    
    updateClient(clientId, {
      documents: client.documents.filter(doc => doc.id !== documentId),
    });
  };
  
  return {
    clients,
    getClientById,
    addClient,
    updateClient,
    addDocument,
    removeDocument,
  };
}



================================================
FILE: src/hooks/use-mobile.tsx
================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



================================================
FILE: src/hooks/use-payments-data.tsx
================================================

import { useState, useEffect } from 'react';
import { Payment } from '@/types/clients';
import { useProjectsData } from './use-projects-data';

export function usePaymentsData() {
  const { projects } = useProjectsData();
  
  // Extraer todos los pagos de todos los proyectos
  const allPayments = projects.flatMap(project => 
    project.payments.map(payment => ({
      ...payment,
      projectName: project.name,
      clientName: project.clientName,
    }))
  );
  
  const getPaymentsByProjectId = (projectId: number) => {
    const project = projects.find(p => p.id === projectId);
    if (!project) return [];
    
    return project.payments.map(payment => ({
      ...payment,
      projectName: project.name,
      clientName: project.clientName,
    }));
  };
  
  const getPaymentsByClientId = (clientId: number) => {
    return allPayments.filter(payment => payment.clientId === clientId);
  };
  
  const getOverduePayments = () => {
    const today = new Date();
    return allPayments.filter(
      payment => payment.status === "Pendiente" && payment.date < today
    );
  };
  
  const getUpcomingPayments = (days: number = 30) => {
    const today = new Date();
    const limit = new Date();
    limit.setDate(today.getDate() + days);
    
    return allPayments.filter(
      payment => 
        payment.status === "Pendiente" && 
        payment.date >= today && 
        payment.date <= limit
    );
  };
  
  const addPayment = (payment: Omit<Payment, "id">) => {
    // Esta implementación es simplificada ya que los pagos están anidados en los proyectos
    // En una implementación real, esto requeriría una actualización del estado de proyectos
    return payment;
  };
  
  const updatePaymentStatus = (paymentId: number, status: Payment["status"], paidDate?: Date) => {
    // Esta implementación es simplificada ya que los pagos están anidados en los proyectos
    // En una implementación real, esto requeriría una actualización del estado de proyectos
    return true;
  };
  
  return {
    payments: allPayments,
    getPaymentsByProjectId,
    getPaymentsByClientId,
    getOverduePayments,
    getUpcomingPayments,
    addPayment,
    updatePaymentStatus,
  };
}



================================================
FILE: src/hooks/use-projects-data.tsx
================================================

import { useState, useEffect } from 'react';
import { Project, Document } from '@/types/clients';
import { useClientsData } from './use-clients-data';

// Datos de ejemplo para proyectos
const INITIAL_PROJECTS: Project[] = [
  {
    id: 1,
    clientId: 1,
    name: "Rediseño Sitio Web",
    description: "Rediseño completo del sitio web corporativo con énfasis en experiencia de usuario y optimización para móviles",
    startDate: new Date("2023-04-10"),
    status: "Activo",
    paymentPlan: {
      id: 1,
      projectId: 1,
      type: "Mixto",
      implementationFee: {
        total: 15000000,
        currency: "COP",
        installments: 3,
      },
      recurringFee: {
        amount: 1500000,
        currency: "COP",
        frequency: "Mensual",
        dayOfCharge: 15,
      },
    },
    payments: [
      {
        id: 1,
        projectId: 1,
        clientId: 1,
        amount: 5000000,
        currency: "COP",
        date: new Date("2023-04-15"),
        paidDate: new Date("2023-04-17"),
        status: "Pagado",
        invoiceNumber: "FV-2023-001",
        invoiceUrl: "#",
        type: "Implementación",
        installmentNumber: 1,
      },
      {
        id: 2,
        projectId: 1,
        clientId: 1,
        amount: 5000000,
        currency: "COP",
        date: new Date("2023-05-15"),
        status: "Pendiente",
        type: "Implementación",
        installmentNumber: 2,
      },
      {
        id: 3,
        projectId: 1,
        clientId: 1,
        amount: 5000000,
        currency: "COP",
        date: new Date("2023-06-15"),
        status: "Pendiente",
        type: "Implementación",
        installmentNumber: 3,
      },
    ],
    documents: [
      {
        id: 1,
        name: "Propuesta Técnica",
        type: "Otro",
        url: "#",
        uploadDate: new Date("2023-04-05"),
      },
      {
        id: 2,
        name: "Contrato de Servicios",
        type: "Contrato",
        url: "#",
        uploadDate: new Date("2023-04-10"),
      },
    ],
  },
  {
    id: 2,
    clientId: 1,
    name: "App Móvil de Ventas",
    description: "Desarrollo de aplicación móvil para equipo de ventas con gestión de clientes y seguimiento de pedidos",
    startDate: new Date("2023-05-01"),
    status: "Activo",
    paymentPlan: {
      id: 2,
      projectId: 2,
      type: "Fee único",
      implementationFee: {
        total: 25000000,
        currency: "COP",
        installments: 1,
      },
    },
    payments: [
      {
        id: 4,
        projectId: 2,
        clientId: 1,
        amount: 25000000,
        currency: "COP",
        date: new Date("2023-05-10"),
        paidDate: new Date("2023-05-11"),
        status: "Pagado",
        invoiceNumber: "FV-2023-005",
        invoiceUrl: "#",
        type: "Implementación",
        installmentNumber: 1,
      },
    ],
    documents: [],
  },
  {
    id: 3,
    clientId: 2,
    name: "Sistema de Inventarios",
    description: "Implementación de sistema para gestión y control de inventarios con integración a ERP existente",
    startDate: new Date("2023-02-01"),
    endDate: new Date("2023-07-15"),
    status: "Finalizado",
    paymentPlan: {
      id: 3,
      projectId: 3,
      type: "Fee por cuotas",
      implementationFee: {
        total: 18000000,
        currency: "COP",
        installments: 6,
      },
    },
    payments: [
      {
        id: 5,
        projectId: 3,
        clientId: 2,
        amount: 3000000,
        currency: "COP",
        date: new Date("2023-02-15"),
        paidDate: new Date("2023-02-18"),
        status: "Pagado",
        invoiceNumber: "FV-2023-010",
        invoiceUrl: "#",
        type: "Implementación",
        installmentNumber: 1,
      },
      {
        id: 6,
        projectId: 3,
        clientId: 2,
        amount: 3000000,
        currency: "COP",
        date: new Date("2023-03-15"),
        paidDate: new Date("2023-03-16"),
        status: "Pagado",
        invoiceNumber: "FV-2023-015",
        invoiceUrl: "#",
        type: "Implementación",
        installmentNumber: 2,
      },
      {
        id: 7,
        projectId: 3,
        clientId: 2,
        amount: 3000000,
        currency: "COP",
        date: new Date("2023-04-15"),
        paidDate: new Date("2023-04-20"),
        status: "Pagado",
        invoiceNumber: "FV-2023-022",
        invoiceUrl: "#",
        type: "Implementación",
        installmentNumber: 3,
      },
      {
        id: 8,
        projectId: 3,
        clientId: 2,
        amount: 3000000,
        currency: "COP",
        date: new Date("2023-05-15"),
        paidDate: new Date("2023-05-16"),
        status: "Pagado",
        invoiceNumber: "FV-2023-028",
        invoiceUrl: "#",
        type: "Implementación",
        installmentNumber: 4,
      },
      {
        id: 9,
        projectId: 3,
        clientId: 2,
        amount: 3000000,
        currency: "COP",
        date: new Date("2023-06-15"),
        paidDate: new Date("2023-06-17"),
        status: "Pagado",
        invoiceNumber: "FV-2023-035",
        invoiceUrl: "#",
        type: "Implementación",
        installmentNumber: 5,
      },
      {
        id: 10,
        projectId: 3,
        clientId: 2,
        amount: 3000000,
        currency: "COP",
        date: new Date("2023-07-15"),
        paidDate: new Date("2023-07-15"),
        status: "Pagado",
        invoiceNumber: "FV-2023-042",
        invoiceUrl: "#",
        type: "Implementación",
        installmentNumber: 6,
      },
    ],
    documents: [],
    notes: "Proyecto completado exitosamente, cliente muy satisfecho",
  },
  {
    id: 4,
    clientId: 3,
    name: "Consultoría Estratégica",
    description: "Consultoría y acompañamiento en el desarrollo de plan estratégico de crecimiento 2023-2025",
    startDate: new Date("2022-11-10"),
    status: "Pausado",
    paymentPlan: {
      id: 4,
      projectId: 4,
      type: "Suscripción periódica",
      recurringFee: {
        amount: 4800000,
        currency: "COP",
        frequency: "Mensual",
        dayOfCharge: 10,
      },
    },
    payments: [
      {
        id: 11,
        projectId: 4,
        clientId: 3,
        amount: 4800000,
        currency: "COP",
        date: new Date("2022-11-10"),
        paidDate: new Date("2022-11-12"),
        status: "Pagado",
        invoiceNumber: "FV-2022-123",
        invoiceUrl: "#",
        type: "Recurrente",
      },
      {
        id: 12,
        projectId: 4,
        clientId: 3,
        amount: 4800000,
        currency: "COP",
        date: new Date("2022-12-10"),
        paidDate: new Date("2022-12-11"),
        status: "Pagado",
        invoiceNumber: "FV-2022-130",
        invoiceUrl: "#",
        type: "Recurrente",
      },
      {
        id: 13,
        projectId: 4,
        clientId: 3,
        amount: 4800000,
        currency: "COP",
        date: new Date("2023-01-10"),
        paidDate: new Date("2023-01-12"),
        status: "Pagado",
        invoiceNumber: "FV-2023-003",
        invoiceUrl: "#",
        type: "Recurrente",
      },
      {
        id: 14,
        projectId: 4,
        clientId: 3,
        amount: 4800000,
        currency: "COP",
        date: new Date("2023-02-10"),
        paidDate: new Date("2023-02-15"),
        status: "Pagado",
        invoiceNumber: "FV-2023-012",
        invoiceUrl: "#",
        type: "Recurrente",
      },
      {
        id: 15,
        projectId: 4,
        clientId: 3,
        amount: 4800000,
        currency: "COP",
        date: new Date("2023-03-10"),
        status: "Vencido",
        type: "Recurrente",
      },
    ],
    documents: [],
  },
];

export function useProjectsData() {
  const [projects, setProjects] = useState<Project[]>(INITIAL_PROJECTS);
  const { clients } = useClientsData();
  
  const getProjectById = (id: number) => {
    return projects.find(project => project.id === id);
  };
  
  const getProjectsByClientId = (clientId: number) => {
    return projects.filter(project => project.clientId === clientId);
  };

  // Agregar nombres de cliente a los proyectos para facilitar la visualización
  const projectsWithClientNames = projects.map(project => {
    const client = clients.find(c => c.id === project.clientId);
    return {
      ...project,
      clientName: client?.name || "Cliente Desconocido"
    };
  });
  
  const addProject = (newProject: Omit<Project, "id" | "documents" | "payments">) => {
    const project: Project = {
      ...newProject,
      id: projects.length > 0 ? Math.max(...projects.map(p => p.id)) + 1 : 1,
      documents: [],
      payments: [],
    };
    
    setProjects([...projects, project]);
    return project;
  };
  
  const updateProject = (id: number, updatedData: Partial<Project>) => {
    setProjects(projects.map(project => 
      project.id === id ? { ...project, ...updatedData } : project
    ));
  };
  
  const addDocument = (
    projectId: number, 
    document: Omit<Document, "id">
  ) => {
    const project = getProjectById(projectId);
    if (!project) return;
    
    const newDoc = {
      ...document,
      id: project.documents.length > 0 
        ? Math.max(...project.documents.map(d => d.id)) + 1 
        : 1,
    };
    
    updateProject(projectId, {
      documents: [...project.documents, newDoc],
    });
    
    return newDoc;
  };
  
  const removeDocument = (projectId: number, documentId: number) => {
    const project = getProjectById(projectId);
    if (!project) return;
    
    updateProject(projectId, {
      documents: project.documents.filter(doc => doc.id !== documentId),
    });
  };
  
  return {
    projects: projectsWithClientNames,
    getProjectById,
    getProjectsByClientId,
    addProject,
    updateProject,
    addDocument,
    removeDocument,
  };
}



================================================
FILE: src/hooks/use-toast.ts
================================================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



================================================
FILE: src/lib/utils.ts
================================================

import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export type Currency = "COP" | "USD";

export interface CurrencyConfig {
  symbol: string;
  code: Currency;
  locale: string;
  decimalPlaces: number;
}

export const CURRENCIES: Record<Currency, CurrencyConfig> = {
  COP: {
    symbol: "$",
    code: "COP",
    locale: "es-CO",
    decimalPlaces: 0,
  },
  USD: {
    symbol: "US$",
    code: "USD",
    locale: "en-US",
    decimalPlaces: 2,
  }
};

// Conversion rates (placeholder - in real app would come from API)
export const CONVERSION_RATES = {
  USD_TO_COP: 4000, // 1 USD = 4000 COP
  COP_TO_USD: 1 / 4000, // 1 COP = 0.00025 USD
};

export function formatCurrency(value: number, currency: Currency = "COP"): string {
  const config = CURRENCIES[currency];
  
  return new Intl.NumberFormat(config.locale, {
    style: 'currency',
    currency: config.code,
    minimumFractionDigits: config.decimalPlaces,
    maximumFractionDigits: config.decimalPlaces,
  }).format(value);
}

export function convertCurrency(value: number, fromCurrency: Currency, toCurrency: Currency): number {
  if (fromCurrency === toCurrency) return value;
  
  if (fromCurrency === "USD" && toCurrency === "COP") {
    return value * CONVERSION_RATES.USD_TO_COP;
  } else {
    return value * CONVERSION_RATES.COP_TO_USD;
  }
}

export function getCurrencySymbol(currency: Currency = "COP"): string {
  return CURRENCIES[currency].symbol;
}

export function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('es-CO', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
}

export function formatShortDate(date: Date): string {
  return new Intl.DateTimeFormat('es-CO', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
  }).format(date);
}

export function getRandomColor(index: number): string {
  const colors = [
    'rgba(54, 162, 235, 0.5)',
    'rgba(255, 99, 132, 0.5)',
    'rgba(75, 192, 192, 0.5)',
    'rgba(255, 206, 86, 0.5)',
    'rgba(153, 102, 255, 0.5)',
    'rgba(255, 159, 64, 0.5)',
    'rgba(199, 199, 199, 0.5)',
    'rgba(83, 102, 255, 0.5)',
    'rgba(78, 124, 255, 0.5)',
    'rgba(119, 93, 208, 0.5)',
  ];
  
  return colors[index % colors.length];
}

export function getStatusColor(status: string): string {
  switch (status.toLowerCase()) {
    case 'pagado':
      return 'bg-green-100 text-green-800';
    case 'pendiente':
      return 'bg-yellow-100 text-yellow-800';
    case 'vencido':
      return 'bg-red-100 text-red-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
}

export function getStatusBadge(status: string): string {
  switch (status.toLowerCase()) {
    case 'pagado':
      return 'inline-flex items-center rounded-full bg-green-100 px-2.5 py-0.5 text-xs font-medium text-green-800';
    case 'pendiente':
      return 'inline-flex items-center rounded-full bg-yellow-100 px-2.5 py-0.5 text-xs font-medium text-yellow-800';
    case 'vencido':
      return 'inline-flex items-center rounded-full bg-red-100 px-2.5 py-0.5 text-xs font-medium text-red-800';
    case 'activo':
      return 'inline-flex items-center rounded-full bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800';
    case 'pausado':
      return 'inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-800';
    default:
      return 'inline-flex items-center rounded-full bg-gray-100 px-2.5 py-0.5 text-xs font-medium text-gray-800';
  }
}

export function isPastDue(date: Date): boolean {
  return date < new Date();
}

export function calculateNextPaymentDate(startDate: Date, frequency: string): Date {
  const today = new Date();
  let nextDate = new Date(startDate);

  while (nextDate <= today) {
    switch (frequency.toLowerCase()) {
      case 'semanal':
        nextDate.setDate(nextDate.getDate() + 7);
        break;
      case 'quincenal':
        nextDate.setDate(nextDate.getDate() + 15);
        break;
      case 'mensual':
        nextDate.setMonth(nextDate.getMonth() + 1);
        break;
      case 'bimestral':
        nextDate.setMonth(nextDate.getMonth() + 2);
        break;
      case 'trimestral':
        nextDate.setMonth(nextDate.getMonth() + 3);
        break;
      case 'semestral':
        nextDate.setMonth(nextDate.getMonth() + 6);
        break;
      case 'anual':
        nextDate.setFullYear(nextDate.getFullYear() + 1);
        break;
      default:
        nextDate.setMonth(nextDate.getMonth() + 1);
    }
  }
  
  return nextDate;
}

export function generatePaymentDates(startDate: Date, frequency: string, count: number = 12): Date[] {
  const dates: Date[] = [new Date(startDate)];
  let currentDate = new Date(startDate);
  
  for (let i = 1; i < count; i++) {
    switch (frequency.toLowerCase()) {
      case 'semanal':
        currentDate = new Date(currentDate);
        currentDate.setDate(currentDate.getDate() + 7);
        break;
      case 'quincenal':
        currentDate = new Date(currentDate);
        currentDate.setDate(currentDate.getDate() + 15);
        break;
      case 'mensual':
        currentDate = new Date(currentDate);
        currentDate.setMonth(currentDate.getMonth() + 1);
        break;
      case 'bimestral':
        currentDate = new Date(currentDate);
        currentDate.setMonth(currentDate.getMonth() + 2);
        break;
      case 'trimestral':
        currentDate = new Date(currentDate);
        currentDate.setMonth(currentDate.getMonth() + 3);
        break;
      case 'semestral':
        currentDate = new Date(currentDate);
        currentDate.setMonth(currentDate.getMonth() + 6);
        break;
      case 'anual':
        currentDate = new Date(currentDate);
        currentDate.setFullYear(currentDate.getFullYear() + 1);
        break;
      default:
        currentDate = new Date(currentDate);
        currentDate.setMonth(currentDate.getMonth() + 1);
    }
    dates.push(new Date(currentDate));
  }
  
  return dates;
}



================================================
FILE: src/pages/CashFlowPage.tsx
================================================
import React, { useState } from "react";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { formatCurrency, formatDate } from "@/lib/utils";
import { DataTable } from "@/components/ui/data-table";
import { Download, ArrowDownIcon as ArrowDown, ArrowUpIcon as ArrowUp, FileDown } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { FinancialMetrics } from "@/components/cash-flow/financial-metrics";
import { AnalysisCharts } from "@/components/cash-flow/analysis-charts";
import { FinancialDashboard } from "@/components/financial/financial-dashboard";
import { FinancialProjections } from "@/components/financial/financial-projections";
import { ClientAnalytics } from "@/components/financial/client-analytics";

// Datos simulados para movimientos de caja
const cashFlowData = [
  {
    id: 1,
    date: new Date("2023-06-20"),
    description: "Pago Proyecto Dashboard",
    type: "Ingreso",
    category: "Cliente",
    paymentMethod: "Transferencia",
    amount: 7500000,
  },
  {
    id: 2,
    date: new Date("2023-06-18"),
    description: "Nómina",
    type: "Gasto",
    category: "Personal",
    paymentMethod: "Transferencia",
    amount: 7500000,
  },
  {
    id: 3,
    date: new Date("2023-06-15"),
    description: "Pago Mensual Mantenimiento",
    type: "Ingreso",
    category: "Cliente",
    paymentMethod: "Transferencia",
    amount: 3800000,
  },
  {
    id: 4,
    date: new Date("2023-06-10"),
    description: "Consultoría UX/UI",
    type: "Ingreso",
    category: "Cliente",
    paymentMethod: "Transferencia",
    amount: 2500000,
  },
  {
    id: 5,
    date: new Date("2023-06-10"),
    description: "Servicios Cloud",
    type: "Gasto",
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    amount: 950000,
  },
  {
    id: 6,
    date: new Date("2023-06-05"),
    description: "Aporte Capital",
    type: "Ingreso",
    category: "Aporte de socio",
    paymentMethod: "Transferencia",
    amount: 10000000,
  },
  {
    id: 7,
    date: new Date("2023-06-05"),
    description: "Arriendo Oficina",
    type: "Gasto",
    category: "Arriendo",
    paymentMethod: "Transferencia",
    amount: 3200000,
  },
  {
    id: 8,
    date: new Date("2023-06-03"),
    description: "Desarrollo Landing Page",
    type: "Ingreso",
    category: "Cliente",
    paymentMethod: "Tarjeta de Crédito",
    amount: 1800000,
  },
  {
    id: 9,
    date: new Date("2023-06-03"),
    description: "Publicidad Facebook",
    type: "Gasto",
    category: "Marketing",
    paymentMethod: "Tarjeta de Crédito",
    amount: 450000,
  },
];

// Datos simulados para el gráfico de flujo de caja
const cashFlowChartData = [
  {
    name: "01/06",
    ingresos: 1800000,
    gastos: 450000,
    balance: 1350000,
  },
  {
    name: "05/06",
    ingresos: 10000000,
    gastos: 3200000,
    balance: 8150000,
  },
  {
    name: "10/06",
    ingresos: 2500000,
    gastos: 950000,
    balance: 9700000,
  },
  {
    name: "15/06",
    ingresos: 3800000,
    gastos: 0,
    balance: 13500000,
  },
  {
    name: "18/06",
    ingresos: 0,
    gastos: 7500000,
    balance: 6000000,
  },
  {
    name: "20/06",
    ingresos: 7500000,
    gastos: 0,
    balance: 13500000,
  },
];

// Datos mensuales para análisis
const monthlyBalanceData = [
  { name: "Ene", ingresos: 24500000, gastos: 18700000, balance: 5800000 },
  { name: "Feb", ingresos: 26700000, gastos: 19200000, balance: 7500000 },
  { name: "Mar", ingresos: 23900000, gastos: 17800000, balance: 6100000 },
  { name: "Abr", ingresos: 28400000, gastos: 20100000, balance: 8300000 },
  { name: "May", ingresos: 27800000, gastos: 21300000, balance: 6500000 },
  { name: "Jun", ingresos: 25600000, gastos: 22400000, balance: 3200000 },
];

// Datos de gastos por categoría
const categoryExpensesData = [
  { name: "Personal", value: 7500000 },
  { name: "Tecnología", value: 950000 },
  { name: "Arriendo", value: 3200000 },
  { name: "Marketing", value: 450000 },
];

// Datos de ingresos por cliente
const clientIncomeData = [
  { name: "Cliente A", value: 7500000 },
  { name: "Cliente B", value: 3800000 },
  { name: "Cliente C", value: 2500000 },
  { name: "Cliente D", value: 1800000 },
];

// Columnas actualizadas para DataTable
const cashFlowColumns = [
  {
    accessorKey: "date",
    header: "Fecha",
    cell: ({ row }) => formatDate(row.original.date),
  },
  {
    accessorKey: "description",
    header: "Descripción",
  },
  {
    accessorKey: "type",
    header: "Tipo",
    cell: ({ row }) => (
      <div className="flex items-center">
        <span
          className={`flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium ${
            row.original.type === "Ingreso"
              ? "bg-green-100 text-green-800"
              : "bg-red-100 text-red-800"
          }`}
        >
          {row.original.type === "Ingreso" ? (
            <ArrowDown className="h-3 w-3 mr-1" />
          ) : (
            <ArrowUp className="h-3 w-3 mr-1" />
          )}
          {row.original.type}
        </span>
      </div>
    ),
  },
  {
    accessorKey: "client",
    header: "Cliente/Proyecto",
    cell: ({ row }) => row.original.client || "N/A",
  },
  {
    accessorKey: "category",
    header: "Categoría",
  },
  {
    accessorKey: "paymentMethod",
    header: "Método de Pago",
  },
  {
    accessorKey: "isRecurring",
    header: "Tipo",
    cell: ({ row }) => (
      <div className="flex space-x-2">
        {row.original.isRecurring && (
          <Badge variant="secondary">Recurrente</Badge>
        )}
        {row.original.isScheduled && (
          <Badge variant="warning">Programado</Badge>
        )}
      </div>
    ),
  },
  {
    accessorKey: "amount",
    header: "Monto",
    cell: ({ row }) => (
      <span
        className={
          row.original.type === "Ingreso" ? "text-green-600" : "text-red-600"
        }
      >
        {row.original.type === "Ingreso" ? "+" : "-"}
        {formatCurrency(row.original.amount)}
      </span>
    ),
  },
  {
    accessorKey: "balance",
    header: "Saldo",
    cell: ({ row }) => formatCurrency(row.original.balance),
  },
];

// Datos para análisis financiero avanzado
const financialMetricsData = {
  burnRate: 20100000, // Gasto promedio mensual
  mrr: 18500000, // Monthly Recurring Revenue
  mrrProjected: 22000000, // MRR proyectado
  topClientPercentage: 32, // % del ingreso que representa el cliente principal
  monthlyVariation: {
    income: { value: 2800000, percentage: 12.3 },
    expense: { value: -1200000, percentage: -5.6 }
  },
  structuralExpenses: 15600000,
  avoidableExpenses: 4500000,
  ytdProfit: 43800000, // Utilidad acumulada año a la fecha
};

// Datos para proyecciones
const projectionData = Array(6).fill(0).map((_, i) => {
  const month = new Date();
  month.setMonth(month.getMonth() + i + 1);
  return {
    month: month.toLocaleString('default', { month: 'short' }),
    year: month.getFullYear(),
    projectedIncome: 25600000 + (i * 800000),
    projectedExpense: 22400000 + (i * 300000),
    projectedBalance: (25600000 + (i * 800000)) - (22400000 + (i * 300000))
  };
});

// Datos para análisis de clientes
const clientAnalyticsData = {
  growingClients: [
    { name: "Cliente B", previousValue: 3200000, currentValue: 3800000, growth: 18.8 },
    { name: "Cliente D", previousValue: 1500000, currentValue: 1800000, growth: 20.0 }
  ],
  decliningClients: [
    { name: "Cliente A", previousValue: 8200000, currentValue: 7500000, decline: -8.5 }
  ],
  mrrChanges: {
    newMrr: 1200000,
    churn: 800000,
    netMrr: 400000
  },
  clientsProfitability: [
    { name: "Cliente B", revenue: 3800000, cost: 1200000, profit: 2600000, margin: 68.4 },
    { name: "Cliente A", revenue: 7500000, cost: 5200000, profit: 2300000, margin: 30.7 },
    { name: "Cliente D", revenue: 1800000, cost: 500000, profit: 1300000, margin: 72.2 },
    { name: "Cliente C", revenue: 2500000, cost: 1600000, profit: 900000, margin: 36.0 }
  ]
};

// Datos para el mapa de calor de gastos
const expenseHeatMapData = Array.from({ length: 31 }, (_, i) => ({
  day: i + 1,
  value: Math.random() * 1000000
}));

const CashFlowPage = () => {
  const [dateFilter, setDateFilter] = useState("all");
  const [typeFilter, setTypeFilter] = useState("all");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [analysisTimeFrame, setAnalysisTimeFrame] = useState("month");
  const [clientFilter, setClientFilter] = useState("all");
  const [incomeTypeFilter, setIncomeTypeFilter] = useState("all");
  const [paymentMethodFilter, setPaymentMethodFilter] = useState("all");
  
  // Calcular métricas financieras
  const totalIncome = cashFlowData
    .filter((item) => item.type === "Ingreso")
    .reduce((sum, item) => sum + item.amount, 0);
  
  const totalExpenses = cashFlowData
    .filter((item) => item.type === "Gasto")
    .reduce((sum, item) => sum + item.amount, 0);
  
  const currentBalance = totalIncome - totalExpenses;
  
  // Calcular promedios mensuales (últimos 6 meses)
  const averageMonthlyIncome = totalIncome / 6;
  const averageMonthlyExpenses = totalExpenses / 6;
  
  // Calcular runway y fecha de quiebre
  const runway = currentBalance / averageMonthlyExpenses;
  const breakEvenDate = new Date();
  breakEvenDate.setMonth(breakEvenDate.getMonth() + Math.floor(runway));

  // Aplicar filtros a los datos
  const filteredCashFlowData = cashFlowData.map((item, index) => {
    let balanceAcumulado = cashFlowData
      .slice(0, index + 1)
      .reduce((sum, mov) => sum + (mov.type === "Ingreso" ? mov.amount : -mov.amount), 0);
    
    return {
      ...item,
      balance: balanceAcumulado,
    };
  }).filter((item) => {
    return (
      (typeFilter === "all" || item.type === typeFilter) &&
      (categoryFilter === "all" || item.category === categoryFilter) &&
      (dateFilter === "all" ||
        (dateFilter === "thisWeek" &&
          item.date >= new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) ||
        (dateFilter === "thisMonth" &&
          item.date.getMonth() === new Date().getMonth() &&
          item.date.getFullYear() === new Date().getFullYear()))
    );
  });

  const handleExportAnalysis = () => {
    console.log("Exporting financial analysis...");
    // Implementación para generar PDF o Excel
  };

  return (
    <div>
      <PageHeader
        title="Flujo de Caja"
        description="Control, seguimiento y análisis financiero para decisiones estratégicas"
      />

      <FinancialMetrics
        totalIncome={totalIncome}
        totalExpenses={totalExpenses}
        currentBalance={currentBalance}
        averageMonthlyIncome={averageMonthlyIncome}
        averageMonthlyExpenses={averageMonthlyExpenses}
        runway={runway}
        breakEvenDate={breakEvenDate}
      />

      <Tabs defaultValue="dashboard" className="mt-6">
        <div className="flex justify-between items-center mb-2">
          <TabsList>
            <TabsTrigger value="dashboard">Dashboard</TabsTrigger>
            <TabsTrigger value="movimientos">Movimientos</TabsTrigger>
            <TabsTrigger value="analisis">Análisis</TabsTrigger>
            <TabsTrigger value="proyecciones">Proyecciones</TabsTrigger>
            <TabsTrigger value="clientes">Análisis de Clientes</TabsTrigger>
          </TabsList>
          
          <Button onClick={handleExportAnalysis} variant="outline">
            <FileDown className="h-4 w-4 mr-2" />
            Exportar Análisis
          </Button>
        </div>

        <TabsContent value="dashboard">
          <FinancialDashboard 
            metrics={financialMetricsData}
            monthlyData={monthlyBalanceData}
            clientData={clientIncomeData}
            expenseData={categoryExpensesData}
            expenseHeatMap={expenseHeatMapData}
            onTimeFrameChange={setAnalysisTimeFrame}
            timeFrame={analysisTimeFrame}
          />
        </TabsContent>

        <TabsContent value="movimientos">
          <Card>
            <CardHeader>
              <CardTitle>Movimientos de Caja</CardTitle>
              <CardDescription>
                Registro detallado de ingresos y gastos
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col sm:flex-row gap-4 mb-6">
                <div className="flex-1">
                  <Select
                    value={dateFilter}
                    onValueChange={setDateFilter}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Filtrar por fecha" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Todas las fechas</SelectItem>
                      <SelectItem value="thisWeek">Esta semana</SelectItem>
                      <SelectItem value="thisMonth">Este mes</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex-1">
                  <Select
                    value={typeFilter}
                    onValueChange={setTypeFilter}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Filtrar por tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Todos los movimientos</SelectItem>
                      <SelectItem value="Ingreso">Solo ingresos</SelectItem>
                      <SelectItem value="Gasto">Solo gastos</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex-1">
                  <Select
                    value={categoryFilter}
                    onValueChange={setCategoryFilter}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Filtrar por categoría" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">Todas las categorías</SelectItem>
                      <SelectItem value="Personal">Personal</SelectItem>
                      <SelectItem value="Tecnología">Tecnología</SelectItem>
                      <SelectItem value="Arriendo">Arriendo</SelectItem>
                      <SelectItem value="Marketing">Marketing</SelectItem>
                      <SelectItem value="Cliente">Cliente</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <DataTable
                columns={cashFlowColumns}
                data={filteredCashFlowData}
                searchColumn="description"
                searchPlaceholder="Buscar movimientos..."
              />
            </CardContent>
            <CardFooter>
              <Button variant="outline">
                <Download className="h-4 w-4 mr-2" />
                Exportar Excel
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="analisis">
          <AnalysisCharts
            monthlyData={monthlyBalanceData}
            categoryExpenses={categoryExpensesData}
            clientIncome={clientIncomeData}
          />
        </TabsContent>

        <TabsContent value="proyecciones">
          <FinancialProjections
            currentData={monthlyBalanceData[monthlyBalanceData.length - 1]}
            projectionData={projectionData}
            metrics={financialMetricsData}
          />
        </TabsContent>

        <TabsContent value="clientes">
          <ClientAnalytics
            clientProfitability={clientAnalyticsData.clientsProfitability}
            growingClients={clientAnalyticsData.growingClients}
            decliningClients={clientAnalyticsData.decliningClients}
            mrrChanges={clientAnalyticsData.mrrChanges}
            timeFrame={analysisTimeFrame}
            onTimeFrameChange={setAnalysisTimeFrame}
          />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default CashFlowPage;



================================================
FILE: src/pages/ClientsPage.tsx
================================================

import React, { useState } from "react";
import { useToast } from "@/components/ui/use-toast";
import { PageHeader } from "@/components/ui/page-header";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { ClientsList } from "@/components/clients/clients-list";
import { ProjectsList } from "@/components/clients/projects-list";
import { ClientDetails } from "@/components/clients/client-details";
import { ProjectDetails } from "@/components/clients/project-details";
import { FinancialOverview } from "@/components/clients/financial-overview";
import { AddClientDialog } from "@/components/clients/add-client-dialog";
import { AddProjectDialog } from "@/components/clients/add-project-dialog";
import { Plus } from "lucide-react";

const ClientsPage = () => {
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("clientes");
  const [selectedClientId, setSelectedClientId] = useState<number | null>(null);
  const [selectedProjectId, setSelectedProjectId] = useState<number | null>(null);
  const [viewFinancials, setViewFinancials] = useState(false);
  const [clientDialogOpen, setClientDialogOpen] = useState(false);
  const [projectDialogOpen, setProjectDialogOpen] = useState(false);

  const handleClientAdded = () => {
    toast({
      title: "Cliente registrado",
      description: "El cliente ha sido registrado correctamente",
    });
    setClientDialogOpen(false);
  };

  const handleProjectAdded = () => {
    toast({
      title: "Proyecto registrado",
      description: "El proyecto ha sido registrado correctamente",
    });
    setProjectDialogOpen(false);
  };

  const handleClientSelect = (clientId: number) => {
    setSelectedClientId(clientId);
    setSelectedProjectId(null);
    setViewFinancials(false);
  };

  const handleProjectSelect = (projectId: number) => {
    setSelectedProjectId(projectId);
    setViewFinancials(false);
  };

  const handleBackToList = () => {
    setSelectedClientId(null);
    setSelectedProjectId(null);
    setViewFinancials(false);
  };

  const handleViewFinancials = () => {
    setViewFinancials(true);
  };

  return (
    <div>
      <PageHeader
        title="Clientes y Proyectos"
        description="Gestiona tus clientes, proyectos y seguimiento financiero"
      />

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <div className="flex justify-between items-center mb-4">
          <TabsList>
            <TabsTrigger value="clientes">Clientes</TabsTrigger>
            <TabsTrigger value="proyectos">Proyectos</TabsTrigger>
            <TabsTrigger value="financiero">Financiero</TabsTrigger>
          </TabsList>
          
          <div className="flex gap-2">
            <AddClientDialog 
              open={clientDialogOpen} 
              onOpenChange={setClientDialogOpen} 
              onClientAdded={handleClientAdded}
            >
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Nuevo Cliente
              </Button>
            </AddClientDialog>

            <AddProjectDialog 
              open={projectDialogOpen} 
              onOpenChange={setProjectDialogOpen} 
              onProjectAdded={handleProjectAdded}
            >
              <Button>
                <Plus className="h-4 w-4 mr-2" />
                Nuevo Proyecto
              </Button>
            </AddProjectDialog>
          </div>
        </div>
        
        {/* Contenido de la tab de clientes */}
        <TabsContent value="clientes">
          {selectedClientId ? (
            <ClientDetails 
              clientId={selectedClientId} 
              onBack={handleBackToList}
              onViewFinancials={handleViewFinancials}
            />
          ) : (
            <ClientsList onClientSelect={handleClientSelect} />
          )}
        </TabsContent>
        
        {/* Contenido de la tab de proyectos */}
        <TabsContent value="proyectos">
          {selectedProjectId ? (
            <ProjectDetails 
              projectId={selectedProjectId} 
              onBack={handleBackToList}
              onViewFinancials={handleViewFinancials}
            />
          ) : (
            <ProjectsList onProjectSelect={handleProjectSelect} />
          )}
        </TabsContent>

        {/* Contenido de la tab financiera */}
        <TabsContent value="financiero">
          <FinancialOverview 
            clientId={selectedClientId} 
            projectId={selectedProjectId}
          />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ClientsPage;



================================================
FILE: src/pages/Dashboard.tsx
================================================

import React from "react";
import { PageHeader } from "@/components/ui/page-header";
import { StatsCard } from "@/components/ui/stats-card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { formatCurrency } from "@/lib/utils";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell, Legend } from "recharts";
import { CircleDollarSign, CreditCard, TrendingUp, Users, ArrowDownUp } from "lucide-react";

// Datos simulados para el dashboard
const monthlyData = [
  { month: "Ene", ingresos: 24500000, gastos: 18700000 },
  { month: "Feb", ingresos: 26700000, gastos: 19200000 },
  { month: "Mar", ingresos: 23900000, gastos: 17800000 },
  { month: "Abr", ingresos: 28400000, gastos: 20100000 },
  { month: "May", ingresos: 27800000, gastos: 21300000 },
  { month: "Jun", ingresos: 29600000, gastos: 22400000 },
];

const clientData = [
  { name: "Cliente A", value: 12400000 },
  { name: "Cliente B", value: 8700000 },
  { name: "Cliente C", value: 5300000 },
  { name: "Cliente D", value: 3200000 },
];

const expenseCategories = [
  { name: "Personal", value: 9800000 },
  { name: "Tecnología", value: 5200000 },
  { name: "Marketing", value: 3700000 },
  { name: "Freelancers", value: 2300000 },
  { name: "Otros", value: 1400000 },
];

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8'];

const Dashboard = () => {
  return (
    <div>
      <PageHeader
        title="Dashboard"
        description="Vista general del estado financiero"
      />
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <StatsCard
          title="Ingresos este mes"
          value={formatCurrency(29600000)}
          trend="up"
          trendValue="6.4%"
          icon={<CircleDollarSign className="h-4 w-4" />}
        />
        <StatsCard
          title="Gastos este mes"
          value={formatCurrency(22400000)}
          trend="up"
          trendValue="4.9%"
          icon={<CreditCard className="h-4 w-4" />}
        />
        <StatsCard
          title="Saldo en caja"
          value={formatCurrency(7200000)}
          trend="up"
          trendValue="10.7%"
          icon={<TrendingUp className="h-4 w-4" />}
        />
        <StatsCard
          title="Clientes activos"
          value="8"
          trend="neutral"
          trendValue="0%"
          icon={<Users className="h-4 w-4" />}
        />
      </div>

      <Tabs defaultValue="ingresos-gastos" className="mt-6">
        <TabsList>
          <TabsTrigger value="ingresos-gastos">Ingresos vs Gastos</TabsTrigger>
          <TabsTrigger value="clientes">Top Clientes</TabsTrigger>
          <TabsTrigger value="categorias">Gastos por Categoría</TabsTrigger>
        </TabsList>
        <TabsContent value="ingresos-gastos">
          <Card>
            <CardHeader>
              <CardTitle>Ingresos vs Gastos (Últimos 6 Meses)</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={monthlyData}
                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                    <Tooltip
                      formatter={(value) => [
                        formatCurrency(Number(value)),
                        "",
                      ]}
                    />
                    <Legend />
                    <Bar
                      name="Ingresos"
                      dataKey="ingresos"
                      fill="#4b4ce6"
                      radius={[4, 4, 0, 0]}
                    />
                    <Bar
                      name="Gastos"
                      dataKey="gastos"
                      fill="#f87171"
                      radius={[4, 4, 0, 0]}
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="clientes">
          <Card>
            <CardHeader>
              <CardTitle>Top Clientes por Ingresos</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={clientData}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                    >
                      {clientData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Legend />
                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="categorias">
          <Card>
            <CardHeader>
              <CardTitle>Gastos por Categoría</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[300px]">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={expenseCategories}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="value"
                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                    >
                      {expenseCategories.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Legend />
                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      
      <div className="grid gap-4 md:grid-cols-2 mt-6">
        <Card>
          <CardHeader>
            <CardTitle>Flujo de Caja</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[220px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={monthlyData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                  <Tooltip
                    formatter={(value) => [
                      formatCurrency(Number(value)),
                      "",
                    ]}
                  />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="ingresos"
                    stroke="#4b4ce6"
                    strokeWidth={2}
                    activeDot={{ r: 8 }}
                  />
                  <Line
                    type="monotone"
                    dataKey="gastos"
                    stroke="#f87171"
                    strokeWidth={2}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Movimientos Recientes</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[
                { type: "ingreso", desc: "Pago Cliente A", amount: 4800000, date: "15 Jun 2023" },
                { type: "gasto", desc: "Nómina", amount: 7500000, date: "10 Jun 2023" },
                { type: "ingreso", desc: "Pago Cliente B", amount: 3200000, date: "8 Jun 2023" },
                { type: "gasto", desc: "Hosting", amount: 850000, date: "5 Jun 2023" },
                { type: "gasto", desc: "Freelancer Diseño", amount: 1200000, date: "3 Jun 2023" },
              ].map((item, i) => (
                <div key={i} className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className={`mr-2 p-2 rounded ${item.type === "ingreso" ? "bg-green-100" : "bg-red-100"}`}>
                      <ArrowDownUp className={`h-4 w-4 ${item.type === "ingreso" ? "text-green-500" : "text-red-500"}`} />
                    </div>
                    <div>
                      <p className="text-sm font-medium">{item.desc}</p>
                      <p className="text-xs text-muted-foreground">{item.date}</p>
                    </div>
                  </div>
                  <div className={`text-sm font-medium ${item.type === "ingreso" ? "text-green-500" : "text-red-500"}`}>
                    {item.type === "ingreso" ? "+" : "-"}{formatCurrency(item.amount)}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Dashboard;



================================================
FILE: src/pages/ExpensesPage.tsx
================================================
import React, { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { PageHeader } from "@/components/ui/page-header";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { 
  CalendarIcon, 
  Plus, 
  FileText, 
  CreditCard, 
  DollarSign, 
  Download, 
  InfoIcon,
  Check
} from "lucide-react";
import { FileUpload } from "@/components/ui/file-upload";
import { DataTable } from "@/components/ui/data-table";
import { CurrencyInput } from "@/components/ui/currency-input";
import { 
  Currency, 
  CURRENCIES, 
  convertCurrency,
  formatCurrency, 
  formatDate, 
  getRandomColor, 
  getStatusBadge,
  calculateNextPaymentDate, 
  generatePaymentDates 
} from "@/lib/utils";
import { format, isBefore } from "date-fns";
import { es } from "date-fns/locale";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { StatsCard } from "@/components/ui/stats-card";
import { 
  Bar, 
  BarChart, 
  CartesianGrid, 
  Legend,
  ResponsiveContainer, 
  Tooltip as RechartsTooltip, 
  XAxis, 
  YAxis 
} from "recharts";
import { AccruedExpenses } from "@/components/expenses/accrued-expenses";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

const expensesData = [
  {
    id: 1,
    description: "Pago Desarrollador Frontend",
    date: new Date("2023-06-15"),
    amount: 2500000,
    currency: "COP" as Currency,
    category: "Freelancers",
    paymentMethod: "Transferencia",
    receipt: "recibo-dev-123.pdf",
    notes: "Proyecto Dashboard",
  },
  {
    id: 2,
    description: "Licencias Software",
    date: new Date("2023-06-10"),
    amount: 850000,
    currency: "COP" as Currency,
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    receipt: "licencia-software.pdf",
    notes: "",
  },
  {
    id: 3,
    description: "Reunión con Cliente",
    date: new Date("2023-06-08"),
    amount: 120000,
    currency: "COP" as Currency,
    category: "Alimentación",
    paymentMethod: "Efectivo",
    receipt: "factura-restaurant.jpg",
    notes: "Almuerzo con Cliente A",
  },
  {
    id: 4,
    description: "Viaje a Medellín",
    date: new Date("2023-06-05"),
    amount: 780000,
    currency: "COP" as Currency,
    category: "Transporte",
    paymentMethod: "Tarjeta de Crédito",
    receipt: "tiquetes-medellin.pdf",
    notes: "Reunión Cliente B",
  },
  {
    id: 5,
    description: "Publicidad Facebook",
    date: new Date("2023-06-03"),
    amount: 450000,
    currency: "COP" as Currency,
    category: "Marketing",
    paymentMethod: "Tarjeta de Crédito",
    receipt: "facebook-ads.pdf",
    notes: "",
  },
  {
    id: 6,
    description: "Licencia Software Anual",
    date: new Date("2023-06-20"),
    amount: 1200,
    currency: "USD" as Currency,
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    receipt: "licencia-adobe.pdf",
    notes: "Adobe Creative Cloud",
  },
  {
    id: 7,
    description: "Servicio AWS",
    date: new Date("2023-06-25"),
    amount: 350,
    currency: "USD" as Currency,
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    receipt: "aws-junio.pdf",
    notes: "Hosting y servicios cloud",
  },
];

const recurringExpensesData = [
  {
    id: 1,
    description: "Nómina",
    frequency: "Mensual",
    startDate: new Date("2023-01-15"),
    amount: 7500000,
    currency: "COP" as Currency,
    category: "Personal",
    paymentMethod: "Transferencia",
    status: "Activo",
    nextPayment: new Date("2023-07-15"),
  },
  {
    id: 2,
    description: "Arriendo Oficina",
    frequency: "Mensual",
    startDate: new Date("2023-01-05"),
    amount: 3200000,
    currency: "COP" as Currency,
    category: "Arriendo",
    paymentMethod: "Transferencia",
    status: "Activo",
    nextPayment: new Date("2023-07-05"),
  },
  {
    id: 3,
    description: "Servicios Cloud",
    frequency: "Mensual",
    startDate: new Date("2023-01-10"),
    amount: 950000,
    currency: "COP" as Currency,
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    status: "Activo",
    nextPayment: new Date("2023-07-10"),
  },
  {
    id: 4,
    description: "Servicios Contables",
    frequency: "Trimestral",
    startDate: new Date("2023-01-20"),
    amount: 1800000,
    currency: "COP" as Currency,
    category: "Servicios Profesionales",
    paymentMethod: "Transferencia",
    status: "Activo",
    nextPayment: new Date("2023-07-20"),
  },
  {
    id: 5,
    description: "Suscripción Herramientas de Diseño",
    frequency: "Mensual",
    startDate: new Date("2023-02-15"),
    amount: 50,
    currency: "USD" as Currency,
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    status: "Activo",
    nextPayment: new Date("2023-07-15"),
  },
  {
    id: 6,
    description: "Hosting Anual",
    frequency: "Anual",
    startDate: new Date("2023-03-01"),
    amount: 300,
    currency: "USD" as Currency,
    category: "Tecnología",
    paymentMethod: "Tarjeta de Crédito",
    status: "Pausado",
    nextPayment: new Date("2024-03-01"),
  },
];

const expenseFormSchema = z.object({
  description: z.string().min(3, "La descripción debe tener al menos 3 caracteres"),
  date: z.date({
    required_error: "La fecha es requerida",
  }),
  amount: z.number().min(1, "El monto debe ser mayor a 0"),
  currency: z.enum(["COP", "USD"], {
    required_error: "Seleccione una moneda",
  }),
  category: z.string({
    required_error: "Seleccione una categoría",
  }),
  paymentMethod: z.string({
    required_error: "Seleccione un método de pago",
  }),
  receipt: z.any().optional(),
  notes: z.string().optional(),
});

const recurringExpenseFormSchema = z.object({
  description: z.string().min(3, "La descripción debe tener al menos 3 caracteres"),
  frequency: z.string({
    required_error: "Seleccione una frecuencia",
  }),
  startDate: z.date({
    required_error: "La fecha de inicio es requerida",
  }),
  amount: z.number().min(1, "El monto debe ser mayor a 0"),
  currency: z.enum(["COP", "USD"], {
    required_error: "Seleccione una moneda",
  }),
  category: z.string({
    required_error: "Seleccione una categoría",
  }),
  paymentMethod: z.string({
    required_error: "Seleccione un método de pago",
  }),
  notes: z.string().optional(),
});

const expenseCategories = [
  "Transporte",
  "Alimentación",
  "Tecnología",
  "Freelancers",
  "Marketing",
  "Personal",
  "Arriendo",
  "Servicios",
  "Impuestos",
  "Servicios Profesionales",
  "Otros",
];

const paymentMethods = [
  "Efectivo",
  "Transferencia",
  "Tarjeta de Crédito",
  "Tarjeta de Débito",
  "PayPal",
  "Nequi",
  "Daviplata",
];

const frequencies = [
  "Diaria",
  "Semanal",
  "Quincenal",
  "Mensual",
  "Bimensual",
  "Trimestral",
  "Semestral",
  "Anual",
];

const ExpensesPage = () => {
  const { toast } = useToast();
  const [expenseModalOpen, setExpenseModalOpen] = useState(false);
  const [recurringModalOpen, setRecurringModalOpen] = useState(false);
  const [selectedCurrency, setSelectedCurrency] = useState<Currency | "all">("all");
  const [viewCurrency, setViewCurrency] = useState<Currency>("COP");
  const [previewPayments, setPreviewPayments] = useState<any[]>([]);
  const [previewModalOpen, setPreviewModalOpen] = useState(false);
  
  const expenseForm = useForm<z.infer<typeof expenseFormSchema>>({
    resolver: zodResolver(expenseFormSchema),
    defaultValues: {
      description: "",
      date: new Date(),
      amount: 0,
      currency: "COP",
      category: "",
      paymentMethod: "",
      notes: "",
    },
  });

  const recurringExpenseForm = useForm<z.infer<typeof recurringExpenseFormSchema>>({
    resolver: zodResolver(recurringExpenseFormSchema),
    defaultValues: {
      description: "",
      frequency: "",
      startDate: new Date(),
      amount: 0,
      currency: "COP",
      category: "",
      paymentMethod: "",
      notes: "",
    },
  });

  const filteredExpenses = selectedCurrency === "all" 
    ? expensesData 
    : expensesData.filter(expense => expense.currency === selectedCurrency);
  
  const filteredRecurringExpenses = selectedCurrency === "all"
    ? recurringExpensesData
    : recurringExpensesData.filter(expense => expense.currency === selectedCurrency);

  const calculateTotalInViewCurrency = (expenses: any[], currencyField = "currency") => {
    return expenses.reduce((total, expense) => {
      if (expense[currencyField] === viewCurrency) {
        return total + expense.amount;
      } else {
        return total + convertCurrency(expense.amount, expense[currencyField], viewCurrency);
      }
    }, 0);
  };

  const variableTotalInViewCurrency = calculateTotalInViewCurrency(expensesData);
  const recurringTotalInViewCurrency = calculateTotalInViewCurrency(
    recurringExpensesData.filter(expense => expense.status === "Activo")
  );

  const categoryTotals = [...expensesData, ...recurringExpensesData]
    .filter(expense => {
      return 'status' in expense ? expense.status !== "Pausado" : true;
    })
    .reduce((acc, expense) => {
      const category = expense.category;
      if (!acc[category]) acc[category] = 0;
      
      if (expense.currency === viewCurrency) {
        acc[category] += expense.amount;
      } else {
        acc[category] += convertCurrency(expense.amount, expense.currency, viewCurrency);
      }
      
      return acc;
    }, {} as Record<string, number>);

  const totalByCurrency = {
    COP: expensesData
      .filter(expense => expense.currency === "COP")
      .reduce((sum, expense) => sum + expense.amount, 0),
    USD: expensesData
      .filter(expense => expense.currency === "USD")
      .reduce((sum, expense) => sum + expense.amount, 0),
  };

  const recurringTotalByCurrency = {
    COP: recurringExpensesData
      .filter(expense => expense.currency === "COP" && expense.status === "Activo")
      .reduce((sum, expense) => sum + expense.amount, 0),
    USD: recurringExpensesData
      .filter(expense => expense.currency === "USD" && expense.status === "Activo")
      .reduce((sum, expense) => sum + expense.amount, 0),
  };

  const prepareCategoryChartData = () => {
    const categoryData = Object.entries(
      [...expensesData, ...recurringExpensesData]
        .filter(expense => {
          return 'status' in expense ? expense.status !== "Pausado" : true;
        })
        .reduce((acc, expense) => {
          const category = expense.category;
          const currency = expense.currency;
          
          if (!acc[category]) {
            acc[category] = { COP: 0, USD: 0 };
          }
          
          acc[category][currency] += expense.amount;
          return acc;
        }, {} as Record<string, Record<Currency, number>>)
    ).map(([category, amounts]) => {
      if (viewCurrency === "COP") {
        return {
          category,
          COP: amounts.COP,
          USD_en_COP: convertCurrency(amounts.USD, "USD", "COP"),
          original_USD: amounts.USD
        };
      } 
      else {
        return {
          category,
          USD: amounts.USD,
          COP_en_USD: convertCurrency(amounts.COP, "COP", "USD"),
          original_COP: amounts.COP
        };
      }
    });
    
    return categoryData;
  };

  const categoryChartData = prepareCategoryChartData();

  const handlePreviewPayments = (formValues: any) => {
    if (formValues.startDate && formValues.frequency && formValues.amount) {
      const dates = generatePaymentDates(formValues.startDate, formValues.frequency, 12);
      
      const payments = dates.map((date, index) => ({
        id: index + 1,
        dueDate: date,
        amount: formValues.amount,
        currency: formValues.currency,
        status: isBefore(date, new Date()) ? 'vencido' : 'pendiente',
      }));
      
      setPreviewPayments(payments);
      setPreviewModalOpen(true);
    }
  };

  const onExpenseSubmit = (data: z.infer<typeof expenseFormSchema>) => {
    console.log("Nuevo gasto:", data);
    toast({
      title: "Gasto registrado",
      description: "El gasto ha sido registrado correctamente",
    });
    expenseForm.reset();
    setExpenseModalOpen(false);
  };

  const onRecurringExpenseSubmit = (data: z.infer<typeof recurringExpenseFormSchema>) => {
    console.log("Nuevo gasto recurrente:", data);
    toast({
      title: "Gasto recurrente registrado",
      description: "El gasto recurrente ha sido registrado correctamente",
    });
    recurringExpenseForm.reset();
    setRecurringModalOpen(false);
  };

  const expenseColumns = [
    {
      accessorKey: "description",
      header: "Descripción",
    },
    {
      accessorKey: "date",
      header: "Fecha",
      cell: ({ row }: { row: any }) => formatDate(row.original.date),
    },
    {
      accessorKey: "amount",
      header: "Monto",
      cell: ({ row }: { row: any }) => {
        const expense = row.original;
        
        if (viewCurrency === expense.currency) {
          return formatCurrency(expense.amount, expense.currency);
        }
        
        const convertedAmount = convertCurrency(
          expense.amount, 
          expense.currency, 
          viewCurrency
        );
        
        return (
          <div className="flex items-center">
            <span>{formatCurrency(convertedAmount, viewCurrency)}</span>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger>
                  <span className="ml-1 text-xs text-muted-foreground">
                    ({expense.currency})
                  </span>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Original: {formatCurrency(expense.amount, expense.currency)}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        );
      },
    },
    {
      accessorKey: "category",
      header: "Categoría",
    },
    {
      accessorKey: "paymentMethod",
      header: "Método de Pago",
    },
    {
      accessorKey: "receipt",
      header: "Comprobante",
      cell: ({ row }: { row: any }) => (
        <Button variant="ghost" size="sm" className="w-full justify-start">
          <FileText className="h-4 w-4 mr-2" />
          Ver
        </Button>
      ),
    },
    {
      accessorKey: "actions",
      header: "Acciones",
      cell: () => (
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm">
            Editar
          </Button>
          <Button variant="ghost" size="sm" className="text-destructive">
            Eliminar
          </Button>
        </div>
      ),
    },
  ];

  const recurringExpenseColumns = [
    {
      accessorKey: "description",
      header: "Descripción",
    },
    {
      accessorKey: "frequency",
      header: "Frecuencia",
    },
    {
      accessorKey: "amount",
      header: "Monto",
      cell: ({ row }: { row: any }) => {
        const expense = row.original;
        
        if (viewCurrency === expense.currency) {
          return formatCurrency(expense.amount, expense.currency);
        }
        
        const convertedAmount = convertCurrency(
          expense.amount, 
          expense.currency, 
          viewCurrency
        );
        
        return (
          <div className="flex items-center">
            <span>{formatCurrency(convertedAmount, viewCurrency)}</span>
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger>
                  <span className="ml-1 text-xs text-muted-foreground">
                    ({expense.currency})
                  </span>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Original: {formatCurrency(expense.amount, expense.currency)}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        );
      },
    },
    {
      accessorKey: "nextPayment",
      header: "Próximo Pago",
      cell: ({ row }: { row: any }) => formatDate(row.original.nextPayment),
    },
    {
      accessorKey: "status",
      header: "Estado",
      cell: ({ row }: { row: any }) => (
        <span className={getStatusBadge(row.original.status)}>
          {row.original.status}
        </span>
      ),
    },
    {
      accessorKey: "category",
      header: "Categoría",
    },
    {
      accessorKey: "actions",
      header: "Acciones",
      cell: ({ row }: { row: any }) => (
        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="sm"
          >
            {row.original.status === "Activo" ? "Pausar" : "Activar"}
          </Button>
          <Button 
            variant="ghost" 
            size="sm"
            onClick={() => {
              handlePreviewPayments({
                startDate: row.original.startDate,
                frequency: row.original.frequency.toLowerCase(),
                amount: row.original.amount,
                currency: row.original.currency
              });
            }}
          >
            Ver Pagos
          </Button>
          <Button variant="ghost" size="sm">
            Editar
          </Button>
        </div>
      ),
    },
  ];

  return (
    <div>
      <PageHeader
        title="Gastos"
        description="Gestiona tus gastos variables, recurrentes y causados"
      />

      <Tabs defaultValue="variables">
        <div className="flex flex-wrap justify-between items-center mb-4 gap-4">
          <TabsList className="bg-background border mb-2">
            <TabsTrigger value="variables">Gastos Variables</TabsTrigger>
            <TabsTrigger value="recurrentes">Gastos Recurrentes</TabsTrigger>
            <TabsTrigger value="causados">Gastos Causados</TabsTrigger>
            <TabsTrigger value="resumen">Resumen</TabsTrigger>
          </TabsList>
          
          <div className="flex flex-wrap gap-2">
            <Select
              value={selectedCurrency}
              onValueChange={(val) => setSelectedCurrency(val as Currency | "all")}
            >
              <SelectTrigger className="w-[150px] bg-background">
                <SelectValue placeholder="Moneda" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Todas</SelectItem>
                <SelectItem value="COP">COP</SelectItem>
                <SelectItem value="USD">USD</SelectItem>
              </SelectContent>
            </Select>
            
            <Select
              value={viewCurrency}
              onValueChange={(val) => setViewCurrency(val as Currency)}
            >
              <SelectTrigger className="w-[150px] bg-background">
                <SelectValue placeholder="Ver en" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="COP">Ver en COP</SelectItem>
                <SelectItem value="USD">Ver en USD</SelectItem>
              </SelectContent>
            </Select>
            
            <Dialog open={expenseModalOpen} onOpenChange={setExpenseModalOpen}>
              <DialogTrigger asChild>
                <Button className="mr-2">
                  <Plus className="h-4 w-4 mr-2" />
                  Nuevo Gasto
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[600px]">
                <DialogHeader>
                  <DialogTitle>Registrar Nuevo Gasto</DialogTitle>
                  <DialogDescription>
                    Completa el formulario para registrar un nuevo gasto variable
                  </DialogDescription>
                </DialogHeader>
                
                <Form {...expenseForm}>
                  <form onSubmit={expenseForm.handleSubmit(onExpenseSubmit)} className="space-y-4">
                    <FormField
                      control={expenseForm.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="form-required">Descripción</FormLabel>
                          <FormControl>
                            <Input placeholder="Descripción del gasto" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={expenseForm.control}
                        name="date"
                        render={({ field }) => (
                          <FormItem className="flex flex-col">
                            <FormLabel className="form-required">Fecha</FormLabel>
                            <Popover>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant={"outline"}
                                    className={cn(
                                      "w-full pl-3 text-left font-normal",
                                      !field.value && "text-muted-foreground"
                                    )}
                                  >
                                    {field.value ? (
                                      format(field.value, "PPP", { locale: es })
                                    ) : (
                                      <span>Seleccionar fecha</span>
                                    )}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                  mode="single"
                                  selected={field.value}
                                  onSelect={field.onChange}
                                  initialFocus
                                  locale={es}
                                  className="pointer-events-auto"
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <div className="grid grid-cols-2 gap-4">
                        <FormField
                          control={expenseForm.control}
                          name="currency"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="form-required">Moneda</FormLabel>
                              <Select onValueChange={field.onChange} defaultValue={field.value}>
                                <FormControl>
                                  <SelectTrigger>
                                    <SelectValue placeholder="Moneda" />
                                  </SelectTrigger>
                                </FormControl>
                                <SelectContent>
                                  <SelectItem value="COP">COP</SelectItem>
                                  <SelectItem value="USD">USD</SelectItem>
                                </SelectContent>
                              </Select>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={expenseForm.control}
                          name="amount"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="form-required">Valor</FormLabel>
                              <FormControl>
                                <CurrencyInput
                                  onValueChange={field.onChange}
                                  value={field.value}
                                  currency={expenseForm.watch("currency") as Currency}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={expenseForm.control}
                        name="category"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="form-required">Categoría</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Seleccionar categoría" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {expenseCategories.map((category) => (
                                  <SelectItem key={category} value={category}>
                                    {category}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={expenseForm.control}
                        name="paymentMethod"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="form-required">Método de Pago</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Seleccionar método" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {paymentMethods.map((method) => (
                                  <SelectItem key={method} value={method}>
                                    {method}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <FormField
                      control={expenseForm.control}
                      name="receipt"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Comprobante</FormLabel>
                          <FormControl>
                            <FileUpload
                              onFileSelect={(file) => field.onChange(file)}
                              acceptedFileTypes=".pdf,.jpg,.jpeg,.png"
                              maxFileSizeMB={5}
                            />
                          </FormControl>
                          <FormDescription>
                            Formatos aceptados: PDF, JPG, PNG. Máx 5MB
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={expenseForm.control}
                      name="notes"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Notas</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Notas adicionales (opcional)"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <DialogFooter>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() => setExpenseModalOpen(false)}
                      >
                        Cancelar
                      </Button>
                      <Button type="submit">Guardar</Button>
                    </DialogFooter>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>

            <Dialog open={recurringModalOpen} onOpenChange={setRecurringModalOpen}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="h-4 w-4 mr-2" />
                  Nuevo Recurrente
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-[600px]">
                <DialogHeader>
                  <DialogTitle>Registrar Gasto Recurrente</DialogTitle>
                  <DialogDescription>
                    Configura un gasto que se repetirá periódicamente
                  </DialogDescription>
                </DialogHeader>
                
                <Form {...recurringExpenseForm}>
                  <form onSubmit={recurringExpenseForm.handleSubmit(onRecurringExpenseSubmit)} className="space-y-4">
                    <FormField
                      control={recurringExpenseForm.control}
                      name="description"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="form-required">Descripción</FormLabel>
                          <FormControl>
                            <Input placeholder="Descripción del gasto" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={recurringExpenseForm.control}
                        name="frequency"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="form-required">Frecuencia</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Seleccionar frecuencia" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {frequencies.map((frequency) => (
                                  <SelectItem key={frequency} value={frequency}>
                                    {frequency}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={recurringExpenseForm.control}
                        name="startDate"
                        render={({ field }) => (
                          <FormItem className="flex flex-col">
                            <FormLabel className="form-required">Fecha Primer Pago</FormLabel>
                            <Popover>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant={"outline"}
                                    className={cn(
                                      "w-full pl-3 text-left font-normal",
                                      !field.value && "text-muted-foreground"
                                    )}
                                  >
                                    {field.value ? (
                                      format(field.value, "PPP", { locale: es })
                                    ) : (
                                      <span>Seleccionar fecha</span>
                                    )}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                  mode="single"
                                  selected={field.value}
                                  onSelect={field.onChange}
                                  initialFocus
                                  locale={es}
                                  className="pointer-events-auto"
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={recurringExpenseForm.control}
                        name="currency"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="form-required">Moneda</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Moneda" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value="COP">COP</SelectItem>
                                <SelectItem value="USD">USD</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={recurringExpenseForm.control}
                        name="amount"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="form-required">Valor de Cada Pago</FormLabel>
                            <FormControl>
                              <CurrencyInput
                                onValueChange={field.onChange}
                                value={field.value}
                                currency={recurringExpenseForm.watch("currency") as Currency}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={recurringExpenseForm.control}
                        name="category"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="form-required">Categoría</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Seleccionar categoría" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {expenseCategories.map((category) => (
                                  <SelectItem key={category} value={category}>
                                    {category}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={recurringExpenseForm.control}
                        name="paymentMethod"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="form-required">Método de Pago</FormLabel>
                            <Select onValueChange={field.onChange} defaultValue={field.value}>
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Seleccionar método" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {paymentMethods.map((method) => (
                                  <SelectItem key={method} value={method}>
                                    {method}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <FormField
                      control={recurringExpenseForm.control}
                      name="notes"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Notas</FormLabel>
                          <FormControl>
                            <Textarea
                              placeholder="Notas adicionales (opcional)"
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <DialogFooter className="gap-2 flex-col sm:flex-row">
                      <Button 
                        type="button"
                        variant="outline"
                        onClick={() => {
                          const formValues = recurringExpenseForm.getValues();
                          handlePreviewPayments(formValues);
                        }}
                        disabled={!recurringExpenseForm.watch("startDate") || !recurringExpenseForm.watch("frequency") || !recurringExpenseForm.watch("amount")}
                      >
                        Vista Previa de Pagos
                      </Button>

                      <div className="flex gap-2">
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => setRecurringModalOpen(false)}
                        >
                          Cancelar
                        </Button>
                        <Button type="submit">Guardar</Button>
                      </div>
                    </DialogFooter>
                  </form>
                </Form>
              </DialogContent>
            </Dialog>
          </div>
        </div>
        
        <TabsContent value="variables">
          <Card>
            <CardHeader className="bg-muted/20">
              <CardTitle>Gastos Variables</CardTitle>
              <CardDescription>
                Lista de gastos no recurrentes registrados en el sistema
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <DataTable
                columns={expenseColumns}
                data={filteredExpenses}
                searchColumn="description"
                searchPlaceholder="Buscar gastos..."
              />
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="recurrentes">
          <Card>
            <CardHeader className="bg-muted/20">
              <CardTitle>Gastos Recurrentes</CardTitle>
              <CardDescription>
                Gastos periódicos programados y su estado actual
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <DataTable
                columns={recurringExpenseColumns}
                data={filteredRecurringExpenses}
                searchColumn="description"
                searchPlaceholder="Buscar gastos recurrentes..."
              />
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="causados">
          <AccruedExpenses />
        </TabsContent>
        
        <TabsContent value="resumen">
          <Card>
            <CardHeader className="bg-muted/20">
              <CardTitle>Resumen de Gastos</CardTitle>
              <CardDescription>
                Análisis y estadísticas de gastos por categoría y periodo
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-8">
                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                  <StatsCard
                    title="Total Gastos Variables"
                    value={formatCurrency(variableTotalInViewCurrency, viewCurrency)}
                    description="Todos los gastos únicos"
                    displayCurrency={viewCurrency}
                    originalCurrency={viewCurrency === "COP" ? "USD" : "COP"}
                    originalValue={viewCurrency === "COP" ? totalByCurrency.USD : totalByCurrency.COP}
                    showConversionInfo={false}
                  />
                  <StatsCard
                    title="Total Gastos Recurrentes"
                    value={formatCurrency(recurringTotalInViewCurrency, viewCurrency)}
                    description="Mensual (solo activos)"
                    displayCurrency={viewCurrency}
                    originalCurrency={viewCurrency === "COP" ? "USD" : "COP"}
                    originalValue={viewCurrency === "COP" ? recurringTotalByCurrency.USD : recurringTotalByCurrency.COP}
                    showConversionInfo={false}
                  />
                  <StatsCard
                    title="Total Gastos"
                    value={formatCurrency(variableTotalInViewCurrency + recurringTotalInViewCurrency, viewCurrency)}
                    description="Variables + Recurrentes"
                    displayCurrency={viewCurrency}
                  />
                  {Object.entries(categoryTotals)
                    .sort((a, b) => b[1] - a[1]) // Sort by amount in descending order
                    .slice(0, 1) // Get top category
                    .map(([category, amount]) => (
                      <StatsCard
                        key={category}
                        title={`Mayor Categoría: ${category}`}
                        value={formatCurrency(amount, viewCurrency)}
                        description="Categoría con más gastos"
                        displayCurrency={viewCurrency}
                      />
                    ))}
                </div>

                <div className="h-[400px]">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-medium">Gastos por Categoría</h3>
                    <Button variant="outline" className="flex items-center gap-2">
                      <Download className="h-4 w-4" /> Exportar Excel
                    </Button>
                  </div>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={categoryChartData}
                      margin={{ top: 20, right: 30, left: 40, bottom: 60 }}
                    >
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis
                        dataKey="category"
                        angle={-45}
                        textAnchor="end"
                        height={70}
                      />
                      {viewCurrency === "COP" ? (
                        <>
                          <YAxis 
                            yAxisId="left"
                            orientation="left"
                            tickFormatter={(value) => `$${value / 1000000}M`} 
                            label={{ value: 'Millones de COP', angle: -90, position: 'insideLeft' }}
                          />
                          <YAxis 
                            yAxisId="right"
                            orientation="right"
                            hide
                          />
                          <Legend formatter={(value) => value === "COP" ? "COP (Original)" : "USD (Convertido a COP)"} />
                          <RechartsTooltip
                            formatter={(value, name) => [
                              name === "COP" 
                                ? formatCurrency(Number(value), "COP") 
                                : `${formatCurrency(Number(value), "COP")} (Original: ${formatCurrency(categoryChartData.find(item => item.category === name)?.original_USD || 0, "USD")})`,
                              name === "COP" ? "COP (Original)" : "USD (Convertido a COP)"
                            ]}
                          />
                          <Bar 
                            dataKey="COP" 
                            name="COP" 
                            fill="#4b4ce6" 
                            radius={[4, 4, 0, 0]} 
                            yAxisId="left"
                          />
                          <Bar 
                            dataKey="USD_en_COP" 
                            name="USD" 
                            fill="#e6664b" 
                            radius={[4, 4, 0, 0]} 
                            yAxisId="left"
                          />
                        </>
                      ) : (
                        <>
                          <YAxis 
                            yAxisId="left"
                            orientation="left"
                            tickFormatter={(value) => `$${value / 1000}K`} 
                            label={{ value: 'Miles de USD', angle: -90, position: 'insideLeft' }}
                          />
                          <YAxis 
                            yAxisId="right"
                            orientation="right"
                            hide
                          />
                          <Legend formatter={(value) => value === "USD" ? "USD (Original)" : "COP (Convertido a USD)"} />
                          <RechartsTooltip
                            formatter={(value, name) => [
                              name === "USD" 
                                ? formatCurrency(Number(value), "USD") 
                                : `${formatCurrency(Number(value), "USD")} (Original: ${formatCurrency(categoryChartData.find(item => item.category === name)?.original_COP || 0, "COP")})`,
                              name === "USD" ? "USD (Original)" : "COP (Convertido a USD)"
                            ]}
                          />
                          <Bar 
                            dataKey="USD" 
                            name="USD" 
                            fill="#e6664b" 
                            radius={[4, 4, 0, 0]} 
                            yAxisId="left"
                          />
                          <Bar 
                            dataKey="COP_en_USD" 
                            name="COP" 
                            fill="#4b4ce6" 
                            radius={[4, 4, 0, 0]} 
                            yAxisId="left"
                          />
                        </>
                      )}
                    </BarChart>
                  </ResponsiveContainer>
                </div>
                
                <div className="pt-4">
                  <h3 className="text-lg font-medium mb-4">Próximos Pagos</h3>
                  <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {recurringExpensesData
                      .filter(expense => expense.status === "Activo")
                      .sort((a, b) => a.nextPayment.getTime() - b.nextPayment.getTime())
                      .slice(0, 3)
                      .map((expense, index) => {
                        const displayAmount = expense.currency === viewCurrency 
                          ? expense.amount 
                          : convertCurrency(expense.amount, expense.currency, viewCurrency);
                          
                        return (
                          <div key={index} className="p-4 border rounded-md space-y-2">
                            <div className="text-lg font-medium">{expense.description}</div>
                            <div className="text-sm text-muted-foreground">Vence: {formatDate(expense.nextPayment)}</div>
                            <div className="text-xl font-bold flex items-center">
                              {formatCurrency(displayAmount, viewCurrency)}
                              
                              {expense.currency !== viewCurrency && (
                                <TooltipProvider>
                                  <Tooltip>
                                    <TooltipTrigger asChild>
                                      <span className="ml-2 cursor-help">
                                        <InfoIcon className="h-4 w-4 text-muted-foreground" />
                                      </span>
                                    </TooltipTrigger>
                                    <TooltipContent>
                                      <p>Original: {formatCurrency(expense.amount, expense.currency)}</p>
                                      <p>Valor convertido usando tasa aproximada</p>
                                    </TooltipContent>
                                  </Tooltip>
                                </TooltipProvider>
                              )}
                            </div>
                            <div className="flex items-center text-sm text-muted-foreground">
                              <CreditCard className="h-4 w-4 mr-2" />
                              {expense.paymentMethod}
                            </div>
                          </div>
                        );
                      })
                    }
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between border-t p-6">
              <div>
                <p className="text-sm text-muted-foreground mb-1">Total gastos variables + recurrentes</p>
                <div className="text-xl font-bold">
                  {formatCurrency(variableTotalInViewCurrency + recurringTotalInViewCurrency, viewCurrency)}
                </div>
              </div>
              <Button variant="outline" className="flex items-center gap-2">
                <Download className="h-4 w-4" /> Exportar Excel
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>

      <Dialog open={previewModalOpen} onOpenChange={setPreviewModalOpen}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Vista Previa de Pagos Generados</DialogTitle>
            <DialogDescription>
              Estos son los pagos que serán generados automáticamente para este gasto recurrente
            </DialogDescription>
          </DialogHeader>
          
          <div className="max-h-[400px] overflow-y-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-muted/20">
                  <th className="p-2 text-left">Cuota</th>
                  <th className="p-2 text-left">Fecha</th>
                  <th className="p-2 text-left">Valor</th>
                  <th className="p-2 text-left">Estado</th>
                </tr>
              </thead>
              <tbody>
                {previewPayments.map((payment, index) => (
                  <tr key={index} className="border-b">
                    <td className="p-2">{index + 1}</td>
                    <td className="p-2">{formatDate(payment.dueDate)}</td>
                    <td className="p-2">{formatCurrency(payment.amount, payment.currency)}</td>
                    <td className="p-2">
                      <span className={getStatusBadge(payment.status)}>
                        {payment.status.charAt(0).toUpperCase() + payment.status.slice(1)}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setPreviewModalOpen(false)}>
              Cerrar
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default ExpensesPage;



================================================
FILE: src/pages/IncomePage.tsx
================================================

import React, { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { IncomeTabs } from "@/components/income/income-tabs";
import { AddIncomeDialog } from "@/components/income/add-income-dialog";
import { Plus } from "lucide-react";

const IncomePage = () => {
  const [incomeModalOpen, setIncomeModalOpen] = useState(false);

  return (
    <div className="space-y-6">
      <PageHeader
        title="Ingresos"
        description="Gestiona y analiza tus fuentes de ingresos"
      >
        <AddIncomeDialog 
          open={incomeModalOpen} 
          onOpenChange={setIncomeModalOpen}
          trigger={
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              Nuevo Ingreso
            </Button>
          }
        />
      </PageHeader>

      <IncomeTabs />
    </div>
  );
};

export default IncomePage;



================================================
FILE: src/pages/Index.tsx
================================================
// Update this page (the content is just a fallback if you fail to update the page)

const Index = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">Welcome to Your Blank App</h1>
        <p className="text-xl text-gray-600">Start building your amazing project here!</p>
      </div>
    </div>
  );
};

export default Index;



================================================
FILE: src/pages/NotFound.tsx
================================================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;



================================================
FILE: src/pages/ReportsPage.tsx
================================================

import React, { useState } from "react";
import { PageHeader } from "@/components/ui/page-header";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { formatCurrency } from "@/lib/utils";
import { Download, Calendar, ChevronDown, ChevronUp } from "lucide-react";
import { BarChart, Bar, LineChart, Line, PieChart, Pie, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Cell } from "recharts";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { es } from "date-fns/locale";
import { DateRange } from "react-day-picker";
import { CalendarIcon } from "lucide-react";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";

// Paleta de colores para gráficos
const COLORS = ['#4b4ce6', '#4ade80', '#f87171', '#facc15', '#60a5fa', '#c084fc', '#2dd4bf'];

// Datos simulados para los reportes
const monthlyRevenueExpenses = [
  { month: "Ene", ingresos: 24500000, gastos: 18700000, utilidad: 5800000 },
  { month: "Feb", ingresos: 26700000, gastos: 19200000, utilidad: 7500000 },
  { month: "Mar", ingresos: 23900000, gastos: 17800000, utilidad: 6100000 },
  { month: "Abr", ingresos: 28400000, gastos: 20100000, utilidad: 8300000 },
  { month: "May", ingresos: 27800000, gastos: 21300000, utilidad: 6500000 },
  { month: "Jun", ingresos: 25600000, gastos: 22400000, utilidad: 3200000 },
];

const clientRevenue = [
  { name: "Cliente A", value: 12400000 },
  { name: "Cliente B", value: 8700000 },
  { name: "Cliente C", value: 5300000 },
  { name: "Cliente D", value: 3200000 },
  { name: "Otros", value: 5600000 },
];

const expensesByCategory = [
  { name: "Personal", value: 9800000 },
  { name: "Tecnología", value: 5200000 },
  { name: "Arriendo", value: 3200000 },
  { name: "Marketing", value: 2700000 },
  { name: "Freelancers", value: 2300000 },
  { name: "Servicios", value: 1800000 },
  { name: "Otros", value: 1400000 },
];

const cashFlowTrend = [
  { date: "31/01", saldo: 5800000 },
  { date: "28/02", saldo: 13300000 },
  { date: "31/03", saldo: 19400000 },
  { date: "30/04", saldo: 27700000 },
  { date: "31/05", saldo: 34200000 },
  { date: "30/06", saldo: 37400000 },
];

// Datos para el estado de resultados
const financialStatementData = {
  periodo: "Enero - Junio 2023",
  ingresos: {
    clientes: 125200000,
    aportesSocios: 15000000,
    otros: 3600000,
    total: 143800000,
  },
  gastos: {
    personal: 58800000,
    tecnologia: 31200000,
    arriendo: 19200000,
    marketing: 16200000,
    freelancers: 13800000,
    servicios: 10800000,
    otros: 8400000,
    total: 158400000,
  },
  utilidadBruta: -14600000,
  impuestos: 0,
  utilidadNeta: -14600000,
};

const ReportsPage = () => {
  const [dateRange, setDateRange] = useState<DateRange | undefined>({
    from: new Date(2023, 0, 1), // 1 de enero de 2023
    to: new Date(2023, 5, 30),  // 30 de junio de 2023
  });
  
  const [reportPeriod, setReportPeriod] = useState("semestral");

  return (
    <div>
      <PageHeader
        title="Reportes Financieros"
        description="Análisis detallado de la situación financiera de la empresa"
      >
        <div className="flex items-center gap-2">
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant={"outline"}
                className={cn(
                  "w-[300px] justify-start text-left font-normal",
                  !dateRange && "text-muted-foreground"
                )}
              >
                <CalendarIcon className="mr-2 h-4 w-4" />
                {dateRange?.from ? (
                  dateRange.to ? (
                    <>
                      {format(dateRange.from, "LLL dd, yyyy", { locale: es })} -{" "}
                      {format(dateRange.to, "LLL dd, yyyy", { locale: es })}
                    </>
                  ) : (
                    format(dateRange.from, "LLL dd, yyyy", { locale: es })
                  )
                ) : (
                  <span>Seleccionar rango de fechas</span>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="start">
              <CalendarComponent
                initialFocus
                mode="range"
                defaultMonth={dateRange?.from}
                selected={dateRange}
                onSelect={setDateRange}
                numberOfMonths={2}
                className={cn("p-3 pointer-events-auto")}
              />
            </PopoverContent>
          </Popover>

          <Select
            value={reportPeriod}
            onValueChange={setReportPeriod}
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Seleccionar periodo" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="mensual">Mensual</SelectItem>
              <SelectItem value="trimestral">Trimestral</SelectItem>
              <SelectItem value="semestral">Semestral</SelectItem>
              <SelectItem value="anual">Anual</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </PageHeader>

      <Tabs defaultValue="resumen">
        <TabsList className="mb-4">
          <TabsTrigger value="resumen">Resumen</TabsTrigger>
          <TabsTrigger value="edoResultados">Estado de Resultados</TabsTrigger>
          <TabsTrigger value="indicadores">Indicadores</TabsTrigger>
        </TabsList>

        {/* Tab de Resumen */}
        <TabsContent value="resumen">
          <div className="grid gap-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Ingresos vs Gastos</CardTitle>
                  <CardDescription>
                    Comparativa mensual de ingresos, gastos y utilidad
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[350px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart data={monthlyRevenueExpenses}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                        <Tooltip formatter={(value) => [formatCurrency(Number(value)), ""]} />
                        <Legend />
                        <Bar
                          dataKey="ingresos"
                          name="Ingresos"
                          fill="#4ade80"
                          radius={[4, 4, 0, 0]}
                        />
                        <Bar
                          dataKey="gastos"
                          name="Gastos"
                          fill="#f87171"
                          radius={[4, 4, 0, 0]}
                        />
                        <Bar
                          dataKey="utilidad"
                          name="Utilidad"
                          fill="#4b4ce6"
                          radius={[4, 4, 0, 0]}
                        />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Evolución de Caja</CardTitle>
                  <CardDescription>
                    Saldo acumulado en caja a lo largo del tiempo
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[350px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={cashFlowTrend}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis tickFormatter={(value) => `$${value / 1000000}M`} />
                        <Tooltip formatter={(value) => [formatCurrency(Number(value)), "Saldo"]} />
                        <Line
                          type="monotone"
                          dataKey="saldo"
                          name="Saldo en Caja"
                          stroke="#4b4ce6"
                          strokeWidth={3}
                          dot={{ r: 5 }}
                          activeDot={{ r: 8 }}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Top Clientes por Ingresos</CardTitle>
                  <CardDescription>
                    Distribución de ingresos por cliente
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[350px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={clientRevenue}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          outerRadius={120}
                          fill="#8884d8"
                          dataKey="value"
                          label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                        >
                          {clientRevenue.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Gastos por Categoría</CardTitle>
                  <CardDescription>
                    Distribución de gastos por categoría
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[350px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <PieChart>
                        <Pie
                          data={expensesByCategory}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          outerRadius={120}
                          fill="#8884d8"
                          dataKey="value"
                          label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                        >
                          {expensesByCategory.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                          ))}
                        </Pie>
                        <Tooltip formatter={(value) => formatCurrency(Number(value))} />
                      </PieChart>
                    </ResponsiveContainer>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>

        {/* Tab de Estado de Resultados */}
        <TabsContent value="edoResultados">
          <Card>
            <CardHeader>
              <CardTitle>Estado de Resultados</CardTitle>
              <CardDescription>
                {financialStatementData.periodo}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-8">
                {/* Ingresos */}
                <div>
                  <h3 className="text-lg font-semibold mb-4">Ingresos</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between py-2 border-b">
                      <span>Ingresos por Clientes</span>
                      <span>{formatCurrency(financialStatementData.ingresos.clientes)}</span>
                    </div>
                    <div className="flex justify-between py-2 border-b">
                      <span>Aportes de Socios</span>
                      <span>{formatCurrency(financialStatementData.ingresos.aportesSocios)}</span>
                    </div>
                    <div className="flex justify-between py-2 border-b">
                      <span>Otros Ingresos</span>
                      <span>{formatCurrency(financialStatementData.ingresos.otros)}</span>
                    </div>
                    <div className="flex justify-between py-2 font-bold">
                      <span>Total Ingresos</span>
                      <span>{formatCurrency(financialStatementData.ingresos.total)}</span>
                    </div>
                  </div>
                </div>

                {/* Gastos */}
                <div>
                  <h3 className="text-lg font-semibold mb-4">Gastos</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between py-2 border-b">
                      <span>Personal</span>
                      <span>{formatCurrency(financialStatementData.gastos.personal)}</span>
                    </div>
                    <div className="flex justify-between py-2 border-b">
                      <span>Tecnología</span>
                      <span>{formatCurrency(financialStatementData.gastos.tecnologia)}</span>
                    </div>
                    <div className="flex justify-between py-2 border-b">
                      <span>Arriendo</span>
                      <span>{formatCurrency(financialStatementData.gastos.arriendo)}</span>
                    </div>
                    <div className="flex justify-between py-2 border-b">
                      <span>Marketing</span>
                      <span>{formatCurrency(financialStatementData.gastos.marketing)}</span>
                    </div>
                    <div className="flex justify-between py-2 border-b">
                      <span>Freelancers</span>
                      <span>{formatCurrency(financialStatementData.gastos.freelancers)}</span>
                    </div>
                    <div className="flex justify-between py-2 border-b">
                      <span>Servicios</span>
                      <span>{formatCurrency(financialStatementData.gastos.servicios)}</span>
                    </div>
                    <div className="flex justify-between py-2 border-b">
                      <span>Otros</span>
                      <span>{formatCurrency(financialStatementData.gastos.otros)}</span>
                    </div>
                    <div className="flex justify-between py-2 font-bold">
                      <span>Total Gastos</span>
                      <span>{formatCurrency(financialStatementData.gastos.total)}</span>
                    </div>
                  </div>
                </div>

                {/* Resultados */}
                <div className="pt-4 border-t-2">
                  <div className="flex justify-between py-2 text-lg font-bold">
                    <span>Utilidad Bruta</span>
                    <span className={financialStatementData.utilidadBruta >= 0 ? "text-green-600" : "text-red-600"}>
                      {formatCurrency(financialStatementData.utilidadBruta)}
                    </span>
                  </div>
                  <div className="flex justify-between py-2 border-b">
                    <span>Impuestos</span>
                    <span>{formatCurrency(financialStatementData.impuestos)}</span>
                  </div>
                  <div className="flex justify-between py-4 text-xl font-bold">
                    <span>Utilidad Neta</span>
                    <span className={financialStatementData.utilidadNeta >= 0 ? "text-green-600" : "text-red-600"}>
                      {formatCurrency(financialStatementData.utilidadNeta)}
                    </span>
                  </div>
                </div>
              </div>
            </CardContent>
            <CardFooter>
              <Button>
                <Download className="h-4 w-4 mr-2" />
                Exportar a Excel
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>

        {/* Tab de Indicadores */}
        <TabsContent value="indicadores">
          <div className="grid gap-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle>Margen de Utilidad</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center">
                    <span className="text-3xl font-bold">-10.2%</span>
                    <ChevronDown className="h-6 w-6 text-red-500 ml-2" />
                  </div>
                  <p className="text-muted-foreground mt-1">
                    Utilidad / Ingresos Totales
                  </p>
                  <div className="mt-4 text-sm">
                    <div className="flex justify-between">
                      <span>Mes Anterior:</span>
                      <span className="font-medium">23.4%</span>
                    </div>
                    <div className="flex justify-between mt-1">
                      <span>Variación:</span>
                      <span className="font-medium text-red-500">-33.6%</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-2">
                  <CardTitle>ROI Marketing</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center">
                    <span className="text-3xl font-bold">3.2x</span>
                    <ChevronUp className="h-6 w-6 text-green-500 ml-2" />
                  </div>
                  <p className="text-muted-foreground mt-1">
                    Ingresos / Gasto en Marketing
                  </p>
                  <div className="mt-4 text-sm">
                    <div className="flex justify-between">
                      <span>Mes Anterior:</span>
                      <span className="font-medium">2.8x</span>
                    </div>
                    <div className="flex justify-between mt-1">
                      <span>Variación:</span>
                      <span className="font-medium text-green-500">+14.3%</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader className="pb-2">
                  <CardTitle>Efectivo Disponible</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-3xl font-bold">
                    {formatCurrency(37400000)}
                  </div>
                  <p className="text-muted-foreground mt-1">
                    Saldo acumulado
                  </p>
                  <div className="mt-4 text-sm">
                    <div className="flex justify-between">
                      <span>Meses de operación cubiertos:</span>
                      <span className="font-medium">2.1 meses</span>
                    </div>
                    <div className="flex justify-between mt-1">
                      <span>Burn rate mensual:</span>
                      <span className="font-medium">{formatCurrency(22400000)}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            <Card>
              <CardHeader>
                <CardTitle>Análisis de Tendencias</CardTitle>
                <CardDescription>
                  Evolución de indicadores clave en el tiempo
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-[400px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={monthlyRevenueExpenses}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis yAxisId="left" tickFormatter={(value) => `$${value / 1000000}M`} />
                      <YAxis yAxisId="right" orientation="right" tickFormatter={(value) => `${value / 1000000}M`} />
                      <Tooltip formatter={(value, name) => {
                        if (name === "utilidad") {
                          return [formatCurrency(Number(value)), "Utilidad"];
                        } else if (name === "margen") {
                          return [`${(Number(value) * 100).toFixed(1)}%`, "Margen"];
                        }
                        return [formatCurrency(Number(value)), name];
                      }} />
                      <Legend />
                      <Line
                        yAxisId="left"
                        type="monotone"
                        dataKey="ingresos"
                        name="Ingresos"
                        stroke="#4ade80"
                        strokeWidth={2}
                        dot={{ r: 4 }}
                      />
                      <Line
                        yAxisId="left"
                        type="monotone"
                        dataKey="gastos"
                        name="Gastos"
                        stroke="#f87171"
                        strokeWidth={2}
                        dot={{ r: 4 }}
                      />
                      <Line
                        yAxisId="left"
                        type="monotone"
                        dataKey="utilidad"
                        name="Utilidad"
                        stroke="#4b4ce6"
                        strokeWidth={3}
                        dot={{ r: 5 }}
                      />
                      <Line
                        yAxisId="right"
                        type="monotone"
                        dataKey={(item) => item.utilidad / item.ingresos}
                        name="margen"
                        stroke="#facc15"
                        strokeWidth={2}
                        dot={{ r: 4 }}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Proyección Financiera</CardTitle>
                  <CardDescription>
                    Estimación a 6 meses basada en tendencias actuales
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex justify-between items-center">
                      <div>
                        <h4 className="font-medium">Ingresos Proyectados</h4>
                        <p className="text-muted-foreground text-sm">Próximos 6 meses</p>
                      </div>
                      <div className="text-right">
                        <p className="text-xl font-bold">{formatCurrency(168000000)}</p>
                        <p className="text-sm text-green-500">+9.4% vs periodo anterior</p>
                      </div>
                    </div>
                    
                    <div className="flex justify-between items-center">
                      <div>
                        <h4 className="font-medium">Gastos Proyectados</h4>
                        <p className="text-muted-foreground text-sm">Próximos 6 meses</p>
                      </div>
                      <div className="text-right">
                        <p className="text-xl font-bold">{formatCurrency(145000000)}</p>
                        <p className="text-sm text-red-500">+7.2% vs periodo anterior</p>
                      </div>
                    </div>
                    
                    <div className="flex justify-between items-center pt-4 border-t">
                      <div>
                        <h4 className="font-medium">Utilidad Proyectada</h4>
                        <p className="text-muted-foreground text-sm">Próximos 6 meses</p>
                      </div>
                      <div className="text-right">
                        <p className="text-xl font-bold">{formatCurrency(23000000)}</p>
                        <p className="text-sm text-green-500">vs. pérdida periodo anterior</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Recomendaciones</CardTitle>
                  <CardDescription>
                    Acciones sugeridas basadas en indicadores
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="p-3 bg-amber-50 rounded-md border border-amber-200">
                      <h4 className="font-medium text-amber-800 mb-1">Control de Gastos</h4>
                      <p className="text-sm text-amber-700">
                        Los gastos están creciendo a un ritmo mayor que los ingresos. 
                        Considerar ajustar presupuestos en categorías no esenciales.
                      </p>
                    </div>
                    
                    <div className="p-3 bg-blue-50 rounded-md border border-blue-200">
                      <h4 className="font-medium text-blue-800 mb-1">Diversificación de Clientes</h4>
                      <p className="text-sm text-blue-700">
                        El 34% de los ingresos proviene de un solo cliente. Buscar
                        oportunidades para reducir la dependencia.
                      </p>
                    </div>
                    
                    <div className="p-3 bg-green-50 rounded-md border border-green-200">
                      <h4 className="font-medium text-green-800 mb-1">Inversión en Marketing</h4>
                      <p className="text-sm text-green-700">
                        El ROI de marketing es positivo. Considerar aumentar la inversión
                        en campañas efectivas.
                      </p>
                    </div>
                    
                    <div className="p-3 bg-purple-50 rounded-md border border-purple-200">
                      <h4 className="font-medium text-purple-800 mb-1">Gestión de Liquidez</h4>
                      <p className="text-sm text-purple-700">
                        Las reservas actuales cubren 2.1 meses de operación. Considerar
                        estrategias para aumentar el flujo de caja.
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default ReportsPage;



================================================
FILE: src/types/clients.ts
================================================

import { Currency } from "@/lib/utils";

// Tipo de documento
export type DocumentType = 
  | "RUT"
  | "Cámara de Comercio"
  | "NDA"
  | "Contrato"
  | "Factura"
  | "Otro";

// Status del cliente
export type ClientStatus = "Activo" | "Pausado" | "Terminado";

// Status del proyecto
export type ProjectStatus = "Activo" | "Pausado" | "Finalizado" | "Cancelado";

// Status de pago
export type PaymentStatus = "Pagado" | "Pendiente" | "Vencido";

// Frecuencia de pago
export type PaymentFrequency = 
  | "Única"
  | "Semanal"
  | "Quincenal"
  | "Mensual"
  | "Bimensual"
  | "Trimestral"
  | "Semestral"
  | "Anual"
  | "Personalizada";

// Tipo de plan
export type PlanType = 
  | "Fee único"
  | "Fee por cuotas"
  | "Suscripción periódica"
  | "Mixto";

// Método de pago
export type PaymentMethod = 
  | "Efectivo"
  | "Transferencia"
  | "Tarjeta de Crédito"
  | "Tarjeta de Débito"
  | "PayPal"
  | "Nequi"
  | "Daviplata"
  | "Otro";

// Interface para documentos
export interface Document {
  id: number;
  name: string;
  type: DocumentType;
  url: string;
  uploadDate: Date;
}

// Interface para cliente
export interface Client {
  id: number;
  name: string;
  contactName?: string;
  email: string;
  phone: string;
  address?: string;
  taxId?: string;
  startDate: Date;
  status: ClientStatus;
  notes?: string;
  documents: Document[];
}

// Interface para plan de pago
export interface PaymentPlan {
  id: number;
  projectId: number;
  type: PlanType;
  implementationFee?: {
    total: number;
    currency: Currency;
    installments: number; // Número de cuotas (1 = pago único)
  };
  recurringFee?: {
    amount: number;
    currency: Currency;
    frequency: PaymentFrequency;
    dayOfCharge: number; // Día del mes para cargo (1-31)
    gracePeriods?: number; // Periodos gratuitos
    discountPeriods?: number; // Periodos con descuento
    discountPercentage?: number; // Porcentaje de descuento
  };
}

// Interface para cuota o pago
export interface Payment {
  id: number;
  projectId: number;
  clientId: number;
  amount: number;
  currency: Currency;
  date: Date; // Fecha programada
  paidDate?: Date; // Fecha real de pago
  status: PaymentStatus;
  invoiceNumber?: string;
  invoiceUrl?: string;
  type: "Implementación" | "Recurrente";
  installmentNumber?: number; // Número de cuota
  notes?: string;
}

// Interface para proyecto
export interface Project {
  id: number;
  clientId: number;
  name: string;
  description: string;
  startDate: Date;
  endDate?: Date;
  status: ProjectStatus;
  paymentPlan: PaymentPlan;
  payments: Payment[];
  documents: Document[];
  notes?: string;
}


